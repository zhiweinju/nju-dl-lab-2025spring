{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6df1\u5ea6\u5b66\u4e60\u5e73\u53f0\u548c\u5e94\u7528","text":""},{"location":"#_2","title":"\u8bfe\u7a0b\u4fe1\u606f","text":"<ul> <li>\u8bfe\u7a0b\u540d\u79f0\uff1a\u6df1\u5ea6\u5b66\u4e60\u5e73\u53f0\u548c\u5e94\u7528</li> <li>\u5b66\u5e74\u5b66\u671f\uff1a2024-2025\u5b66\u5e74 \u7b2c2\u5b66\u671f(\u6625)</li> <li>\u4e0a\u8bfe\u6559\u5e08\uff1a\u848b\u667a\u5a01\u8001\u5e08\u3001\u738b\u667a\u5f6c\u8001\u5e08</li> <li>\u65f6\u95f4\u5730\u70b9\uff1a\u5468\u4e94 5-7\u8282 1-16\u5468 \u5357\u96cd\u697c 550 \u673a\u623f</li> <li>\u673a\u623f\u5f00\u653e\u65f6\u95f4\uff1a\u5468\u56db9\u70b9-14\u70b9\uff0c\u5468\u4e9412\u70b9-17\u70b9</li> <li>\u8054\u7cfb\u52a9\u6559\uff1a<ul> <li>\u5b9e\u9a8c\u4e00\u3001\u4e8c\uff1a \u738b\u9526\u56fd\u3001\u9093\u6cfd\u8f69</li> <li>\u5b9e\u9a8c\u4e09\uff1a \u7b26\u5b87\u8fb0\u3001\u5e72\u91d1\u73ae</li> <li>\u5b9e\u9a8c\u56db\u3001\u4e94\uff1a \u7a0b\u7d2b\u5cf0\u3001\u6768\u4e66\u74a0</li> <li>\u5b9e\u9a8c\u516d\uff1a\u845b\u58eb\u5e73\u3001\u53f6\u5b50\u6d0b</li> <li>\u5b9e\u9a8c\u4e03\uff1a\u7b26\u5b87\u8fb0\u3001\u5e72\u91d1\u73ae</li> <li>\u5b9e\u9a8c\u516b\uff1a\u845b\u58eb\u5e73\u3001\u53f6\u5b50\u6d0b</li> <li>\u5b9e\u9a8c\u4e5d\uff1a\u738b\u6893\u535a</li> </ul> </li> </ul>"},{"location":"#_3","title":"\u8bfe\u7a0b\u7b80\u4ecb","text":"<p>\u672c\u8bfe\u7a0b\u662f\u4e00\u95e8\u9762\u5411\u6df1\u5ea6\u5b66\u4e60\u9886\u57df\u7684\u5b9e\u8df5\u6027\u5e73\u53f0\u8bfe\u7a0b\uff0c\u65e8\u5728\u901a\u8fc7\u4e30\u5bcc\u7684\u5b9e\u6218\u6848\u4f8b\u57f9\u517b\u5b66\u751f\u7684\u6df1\u5ea6\u5b66\u4e60\u5e94\u7528\u80fd\u529b\u3002\u8bfe\u7a0b\u5185\u5bb9\u6db5\u76d6\u4e3b\u6d41\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff08\u5982PyTorch\uff09\u7684\u4f7f\u7528\uff0c\u4ee5\u53ca\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u3001\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7b49\u9886\u57df\u7684\u5e94\u7528\u5b9e\u8df5\u3002\u5b66\u751f\u5c06\u5728\u6bcf\u4e2a\u5b9e\u9a8c\u4e2d\u81ea\u4e3b\u5b66\u4e60\u76f8\u5173\u7406\u8bba\uff0c\u5e76\u5c06\u5176\u5e94\u7528\u4e8e\u9879\u76ee\u5f00\u53d1\uff0c\u638c\u63e1\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7684\u8bbe\u8ba1\u3001\u8bad\u7ec3\u548c\u4f18\u5316\u6280\u80fd\u3002\u8bfe\u7a0b\u901a\u8fc7\u5b9e\u9645\u9879\u76ee\u9a71\u52a8\uff0c\u57f9\u517b\u5b66\u751f\u7684\u52a8\u624b\u80fd\u529b\uff0c\u5e2e\u52a9\u5b66\u751f\u5168\u9762\u63d0\u5347\u5f00\u53d1\u6df1\u5ea6\u5b66\u4e60\u5e94\u7528\u7684\u5b9e\u8df5\u6280\u80fd\u3002</p>"},{"location":"#_4","title":"\u5b9e\u9a8c\u76ee\u5f55","text":"<ol> <li>\u5b9e\u9a8c\u4e00-\u73af\u5883\u914d\u7f6e\u53caPyTorch\u7ec3\u4e60</li> <li>\u5b9e\u9a8c\u4e8c-\u795e\u7ecf\u7f51\u7edc\u57fa\u7840\uff1a\u6fc0\u6d3b\u51fd\u6570\u4e0e\u6b63\u5219\u5316</li> <li>\u5b9e\u9a8c\u4e09-\u5377\u79ef\u795e\u7ecf\u7f51\u7edc</li> <li>\u5b9e\u9a8c\u56db-\u8bcd\u5d4c\u5165\u548c\u5faa\u73af\u795e\u7ecf\u7f51\u7edc</li> <li>\u5b9e\u9a8c\u4e94-Transformer\u4e0e\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b</li> <li>\u5b9e\u9a8c\u516d-\u751f\u6210\u5bf9\u6297\u7f51\u7edc</li> <li>\u5b9e\u9a8c\u4e03-\u8fc1\u79fb\u5b66\u4e60\u548c\u5143\u5b66\u4e60</li> <li>\u5b9e\u9a8c\u516b-\u591a\u6a21\u6001\u5b66\u4e60</li> <li>\u5b9e\u9a8c\u4e5d-\u56fe\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08GCN\uff09</li> </ol>"},{"location":"#_5","title":"\u5b66\u672f\u8bda\u4fe1","text":"<ol> <li> <p>\u5141\u8bb8\u540c\u5b66\u4e4b\u95f4\u7684\u76f8\u4e92\u8ba8\u8bba\uff0c\u4f46\u662f\u7f72\u4f60\u540d\u5b57\u7684\u5de5\u4f5c\u5fc5\u987b\u7531\u4f60\u5b8c\u6210\uff0c\u4e0d\u5141\u8bb8\u76f4\u63a5\u7167\u642c\u4efb\u4f55\u5df2\u6709\u7684\u6750\u6599\uff0c\u5fc5\u987b\u72ec\u7acb\u5b8c\u6210\u5b9e\u9a8c\u3002</p> </li> <li> <p>\u5728\u5b8c\u6210\u5b9e\u9a8c\u8fc7\u7a0b\u4e2d\uff0c\u5bf9\u4ed6\u4eba\u5de5\u4f5c\uff08\u51fa\u7248\u7269\u3001\u4e92\u8054\u7f51\u8d44\u6599\uff09\u4e2d\u6587\u672c\u7684\u76f4\u63a5\u7167\u642c\uff08\u5305\u62ec\u539f\u6587\u7684\u76f4\u63a5\u590d\u5236\u7c98\u8d34\u53ca\u8bed\u53e5\u7684\u7b80\u5355\u4fee\u6539\u7b49\uff09\u90fd\u5c06\u89c6\u4e3a\u527d\u7a83\uff0c\u527d\u7a83\u8005\u6210\u7ee9\u5c06\u88ab\u53d6\u6d88\u3002\u5bf9\u4e8e\u5b8c\u6210\u5b9e\u9a8c\u4e2d\u6709\u5173\u952e\u4f5c\u7528\u7684\u516c\u5f00\u8d44\u6599\uff0c\u5e94\u4e88\u4ee5\u660e\u663e\u5f15\u7528\u3002</p> </li> <li> <p>\u5982\u679c\u53d1\u73b0\u5b9e\u9a8c\u62a5\u544a\u4e4b\u95f4\u9ad8\u5ea6\u76f8\u4f3c\u5c06\u88ab\u5224\u5b9a\u4e3a\u4e92\u76f8\u6284\u88ad\u884c\u4e3a\uff0c \u6284\u88ad\u548c\u88ab\u6284\u88ad\u53cc\u65b9\u7684\u6210\u7ee9\u90fd\u5c06\u88ab\u53d6\u6d88\u3002\u56e0\u6b64\u8bf7\u4e3b\u52a8\u9632\u6b62\u81ea\u5df1\u7684\u5b9e\u9a8c\u62a5\u544a\u88ab\u4ed6\u4eba\u6284\u88ad\u3002</p> </li> </ol>"},{"location":"final/%E7%AD%94%E8%BE%A9%E7%9B%B8%E5%85%B3%E5%AE%89%E6%8E%92/","title":"\u8bfe\u7a0b\u5927\u4f5c\u4e1a-\u7b54\u8fa9\u76f8\u5173\u5b89\u6392","text":""},{"location":"final/%E7%AD%94%E8%BE%A9%E7%9B%B8%E5%85%B3%E5%AE%89%E6%8E%92/#_1","title":"\u4e00\u3001\u7b54\u8fa9\u65f6\u95f4\u5b89\u6392","text":"<ul> <li>\u65f6\u95f4\uff1a5\u670830\u65e5</li> <li>\u5730\u70b9\uff1a\u5357\u96cd\u697c\u897f446</li> <li>\u4e0a\u5348\uff1a9:00 \u2013 12:00</li> <li>\u4e0b\u5348\uff1a14:00 \u2013 17:00</li> <li>\u6bcf\u4f4d\u5c0f\u7ec4\u7b54\u8fa9\u65f6\u95f45\u5206\u949f\uff0c\u5176\u4e2d\uff1a<ul> <li>\u5c55\u793a\u8bb2\u89e3\uff1a3\u5206\u949f</li> <li>\u63d0\u95ee\u4e0e\u56de\u7b54\uff1a2\u5206\u949f</li> </ul> </li> </ul>"},{"location":"final/%E7%AD%94%E8%BE%A9%E7%9B%B8%E5%85%B3%E5%AE%89%E6%8E%92/#_2","title":"\u4e8c\u3001\u7b54\u8fa9\u8981\u6c42","text":""},{"location":"final/%E7%AD%94%E8%BE%A9%E7%9B%B8%E5%85%B3%E5%AE%89%E6%8E%92/#1","title":"1.\u5c55\u793a\u91cd\u70b9\uff1a","text":"\u5185\u5bb9 \u5efa\u8bae\u5448\u73b0\u65b9\u5f0f \u9009\u9898\u610f\u4e49 \u9879\u76ee\u7684\u80cc\u666f\u52a8\u673a\u3001\u7814\u7a76\u610f\u4e49\u3001\u5b9e\u7528\u4ef7\u503c\u3001\u4e0e\u8bfe\u7a0b\u7684\u5173\u8054\u7b49\u3002 \u6280\u672f\u7ec6\u8282 \u7528\u56fe\u8868\u6216\u4ee3\u7801\u7247\u6bb5\u8bf4\u660e\u6838\u5fc3\u5b9e\u73b0\u3002 \u521b\u65b0\u70b9 \u7a81\u51fa\u9879\u76ee\u72ec\u7279\u4e4b\u5904\uff08\u5982\u201c\u57fa\u4e8e\u5f15\u5bfc\u7684\u5e7b\u89c9\u7f13\u89e3\u201d\u5bf9LLM\u8f93\u51fa\u7684\u6539\u8fdb\uff09\u3002 \u7ed3\u679c\u5bf9\u6bd4 \u7528\u8868\u683c\u6216\u66f2\u7ebf\u5bf9\u6bd4\u57fa\u7ebf\u6a21\u578b\u4e0e\u672c\u9879\u76ee\u7684\u6027\u80fd\u5dee\u5f02\u3002 \u95ee\u9898\u53cd\u601d \u5206\u6790\u5b9e\u9a8c\u4e2d\u672a\u89e3\u51b3\u7684\u96be\u70b9\uff08\u5982\u201c\u663e\u5b58\u6362\u51fa\u6362\u5165\u201d\u4e2d\u7684\u6027\u80fd\u74f6\u9888\uff09\u3002"},{"location":"final/%E7%AD%94%E8%BE%A9%E7%9B%B8%E5%85%B3%E5%AE%89%E6%8E%92/#2ppt10","title":"2.\u7b54\u8fa9PPT\uff08\u5efa\u8bae10\u9875\u4ee5\u5185\uff09\uff0c\u5efa\u8bae\u5305\u542b\u4f46\u4e0d\u9650\u4e8e\u4ee5\u4e0b\u5185\u5bb9\uff1a","text":"<ul> <li>\u9879\u76ee\u80cc\u666f\u4e0e\u76ee\u6807<ul> <li>\u8bf4\u660e\u9009\u9898\u7684\u52a8\u673a\u3001\u5e94\u7528\u573a\u666f\u53ca\u7814\u7a76\u610f\u4e49\u3002</li> </ul> </li> <li>\u6280\u672f\u8def\u7ebf\u4e0e\u65b9\u6cd5<ul> <li>\u4f7f\u7528\u7684\u6a21\u578b/\u7b97\u6cd5\uff08PEFT\u3001\u5f3a\u5316\u5b66\u4e60\u3001\u6269\u6563\u6a21\u578b\u7b49\uff09\u3002</li> <li>\u6a21\u578b\u7ed3\u6784\u56fe\u6216\u7cfb\u7edf\u6d41\u7a0b\u56fe\u3002</li> </ul> </li> <li>\u6570\u636e\u96c6\u4e0e\u5b9e\u9a8c\u8bbe\u8ba1<ul> <li>\u6570\u636e\u6765\u6e90\u3001\u9884\u5904\u7406\u65b9\u6cd5\u3001\u5b9e\u9a8c\u8bbe\u7f6e\uff08\u8bad\u7ec3\u53c2\u6570\u3001\u8bc4\u4f30\u6307\u6807\u7b49\uff09\u3002</li> </ul> </li> <li>\u5b9e\u9a8c\u7ed3\u679c\u4e0e\u5206\u6790<ul> <li>\u53ef\u89c6\u5316\u56fe\u8868\uff08\u51c6\u786e\u7387\u3001\u635f\u5931\u66f2\u7ebf\u3001\u751f\u6210\u56fe\u50cf\u6548\u679c\uff09\u3002</li> <li>\u5bf9\u6bd4\u57fa\u7ebf\u6a21\u578b\u6216\u73b0\u6709\u65b9\u6cd5\u7684\u6539\u8fdb\u70b9\u3002</li> </ul> </li> <li>\u95ee\u9898\u4e0e\u53cd\u601d<ul> <li>\u5b9e\u9a8c\u4e2d\u9047\u5230\u7684\u6311\u6218\u53ca\u89e3\u51b3\u65b9\u6848\u3002</li> <li>\u9879\u76ee\u5c40\u9650\u6027\u53ca\u672a\u6765\u6539\u8fdb\u65b9\u5411\u3002</li> </ul> </li> </ul>"},{"location":"final/%E7%AD%94%E8%BE%A9%E7%9B%B8%E5%85%B3%E5%AE%89%E6%8E%92/#3","title":"3.\u73b0\u573a\u6f14\u793a\uff08\u53ef\u9009\uff09\uff1a","text":"<ul> <li>\u5efa\u8bae\u63d0\u524d\u5f55\u53d6\u89c6\u9891\uff0c\u622a\u53d6\u4ee3\u7801\u56fe\u7247</li> <li>\u53ef\u7b80\u8981\u5c55\u793a\u5173\u952e\u4ee3\u7801\u7247\u6bb5\u6216\u6a21\u578b\u8fd0\u884c\u6548\u679c\uff08\u5982\u6587\u6863\u6392\u5e8f\u3001\u56fe\u50cf\u751f\u6210\u3001\u6e38\u620fAI\u884c\u4e3a\uff09\u3002</li> </ul>"},{"location":"final/%E7%AD%94%E8%BE%A9%E7%9B%B8%E5%85%B3%E5%AE%89%E6%8E%92/#_3","title":"\u4e09\u3001\u7b54\u8fa9\u987a\u5e8f","text":"\u5e8f\u53f7 \u7ec4\u5458 \u9009\u9898 1 \u674e\u541b \u53c2\u6570\u9ad8\u6548\u5fae\u8c03\uff08PEFT\uff09 2 \u5468\u7199 \u53c2\u6570\u9ad8\u6548\u5fae\u8c03\uff08PEFT\uff09 3 \u9ec4\u626c\u660a \u53c2\u6570\u9ad8\u6548\u5fae\u8c03\uff08PEFT\uff09 4 \u738b\u667a\u9e4f\u3001\u5362\u58eb\u6770\u3001\u9a86\u8446\u6e90 \u53c2\u6570\u9ad8\u6548\u5fae\u8c03\uff08PEFT\uff09 5 \u90b5\u607a\u6587 \u53c2\u6570\u9ad8\u6548\u5fae\u8c03\uff08PEFT\uff09 6 \u5415\u4e00\u5e06\u3001\u53f2\u52ad\u54f2 \u53c2\u6570\u9ad8\u6548\u5fae\u8c03\uff08PEFT\uff09 7 \u5b59\u6d69\u7fd4\u3001\u5218\u7ee7\u5143 \u53c2\u6570\u9ad8\u6548\u5fae\u8c03\uff08PEFT\uff09 8 \u8d75\u6d5b\u535a \u53c2\u6570\u9ad8\u6548\u5fae\u8c03\uff08PEFT\uff09 9 \u6731\u6a1f\u94ed \u53c2\u6570\u9ad8\u6548\u5fae\u8c03\uff08PEFT\uff09 10 \u674e\u6d77\u5f18 \u53c2\u6570\u9ad8\u6548\u5fae\u8c03\uff08PEFT\uff09 11 \u4e8e\u6d0b \u53c2\u6570\u9ad8\u6548\u5fae\u8c03\uff08PEFT\uff09 12 \u6885\u5929\u8c6a\u3001\u6f58\u667a\u6770 \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 13 \u5b59\u4f73\u742a \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 14 \u8521\u6587\u741b \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 15 \u7530\u9e4f\u5b87\u3001\u5f20\u7a0b\u6db5 \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 16 \u5f6d\u5e0c\u9633\u3001\u6c6a\u5929\u6210 \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 17 \u90ed\u6c38\u7855\u3001\u718a\u9047\u8f89 \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 18 \u7eaa\u6cfd\u64cd \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 19 \u4e07\u9e4f\u4e3e \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 20 \u9ec4\u6d77\u950b \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 21 \u8096\u626c \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 22 \u5173\u5b87\u806a\u3001\u848b\u5148\u5a01\u3001\u8881\u552f\u701a \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 23 \u7941\u5b87\u8f69 \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 24 \u8e47\u9f50\u777f\u3001\u827e\u777f \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 25 \u6768\u4e00\u660e\u3001\u9a6c\u94ed\u6d69 \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 26 \u6bdb\u4e5d\u5f22\u3001\u6c5f\u5343\u94b0 \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 27 \u6c64\u6613\u51e1 \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 28 \u738b\u5b50\u8d5f \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 29 \u738b\u601d\u9f50 \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 30 \u738b\u6862\u8fea\u3001\u9ec4\u590f\u5b87\u3001\u8c22\u5e86\u8f69 \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 31 \u5468\u5e1b\u5c91 \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0 32 \u53f6\u601d\u8fdc\u3001\u5434\u715c \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u2f29\u6e38\u620f\u5b9e\u73b0 33 \u5218\u946b\u5b87\u3001\u6c6a\u4e9a\u7537 \u57fa\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\u7684\u96f6\u6837\u672c\u6587\u6863\u6392\u5e8f 34 \u7f57\u51ef\u8000\u3001\u738b\u7ef4\u6e90 \u57fa\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\u7684\u96f6\u6837\u672c\u6587\u6863\u6392\u5e8f 35 \u97e9\u5b50\u7693 \u57fa\u4e8e\u2f24\u8bed\u2f94\u6a21\u578b\u7684\u96f6\u6837\u672c\u2f42\u6863\u6392\u5e8f 36 \u5218\u5b9c\u676d \u57fa\u4e8e\u2f24\u8bed\u2f94\u6a21\u578b\u7684\u96f6\u6837\u672c\u2f42\u6863\u6392\u5e8f 37 \u5415\u806a\u6770 \u57fa\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\u7684\u96f6\u6837\u672c\u6587\u6863\u6392\u5e8f 38 \u5f90\u5f66\u6db5\u3001\u738b\u660a\u3001\u8306\u6ea2\u8f69 \u591a\u6a21\u6001\u8c23\u8a00\u68c0\u6d4b 39 \u738b\u6db5 \u591a\u6a21\u6001\u8c23\u8a00\u68c0\u6d4b 40 \u5218\u7ef4\u680b \u591a\u6a21\u6001\u8c23\u8a00\u68c0\u6d4b 41 \u5f6d\u5b50\u4e91 \u591a\u6a21\u6001\u8c23\u8a00\u68c0\u6d4b 42 \u90b5\u5b87\u8f69 \u591a\u6a21\u6001\u8c23\u8a00\u68c0\u6d4b 43 \u8c22\u6613\u3001\u5f20\u8000\u8d85 \u591a\u6a21\u6001\u8c23\u8a00\u68c0\u6d4b 44 \u66f9\u4f73\u8bfa\u3001\u4e01\u806a LLM\u8f93\u51fa\u957f\u5ea6\u9884\u6d4b 45 \u5218\u7545\u3001\u5e9e\u9e3f\u535a LLM\u8f93\u51fa\u957f\u5ea6\u9884\u6d4b 46 \u9648\u5e8f\u9633 KV cache\u7f13\u5b58\u7b56\u7565\u63a2\u7d22 47 \u6d82\u6b23\u8d8a\u3001\u6bb5\u9ad8\u7fd4 KV cache\u7f13\u5b58\u7b56\u7565\u63a2\u7d22 48 \u4f55\u660a\u5b87\u3001\u5468\u6cab\u3001\u9648\u2fac\u6db5 KV cache\u7f13\u5b58\u7b56\u7565\u63a2\u7d22 49 \u536b\u4f73\u7533\u3001\u9ec4\u4e50\u5ca9\u3001\u8303\u6210 KV cache\u7f13\u5b58\u7b56\u7565\u63a2\u7d22 50 \u5f90\u8d24\u535a KV cache\u7f13\u5b58\u7b56\u7565\u63a2\u7d22 51 \u9648\u5b87\u822a\u3001\u674e\u601d\u94b0 \u5927\u6a21\u578b\u8bad\u7ec3\u6027\u80fdProfiling\u548c\u4f18\u5316 52 \u848b\u9e4f \u5927\u6a21\u578b\u8bad\u7ec3\u6027\u80fdProfiling\u548c\u4f18\u5316 53 \u738b\u94c3\u3001\u6bb7\u5609\u6b23\u3001\u51af\u53ef \u5927\u6a21\u578b\u8bad\u7ec3\u6027\u80fdProfiling\u548c\u4f18\u5316 54 \u848b\u5ea0\u3001\u90ed\u6b23\u6b23\u3001\u949f\u51e4\u9e23 MoE Offloading\uff1a\u6df7\u5408\u4e13\u5bb6\u6a21\u578b\u63a8\u7406\u663e\u5b58\u6362\u5165\u6362\u51fa 55 \u4f55\u6d77\u8273\u3001\u7f57\u7199\u73a5 \u57fa\u4e8e\u5f15\u5bfc\u7684\u5927\u8bed\u8a00\u6a21\u578b\u5e7b\u89c9\u7f13\u89e3 56 \u738b\u701a\u5b87\u3001\u5f20\u6ce2\u3001\u674e\u5f66\u54f2 \u667a\u80fd\u5de5\u5177\u8c03\u7528\u4ee3\u7406\u7cfb\u7edf 57 \u7518\u601d\u6bc5 \u8f7b\u91cf\u7ea7\u591a Agent \u534f\u4f5c\u7cfb\u7edf 58 \u5468\u79b9\u5929\u3001\u9648\u9a90\u3001\u5bc7\u51a0\u6743 \u8f7b\u91cf\u7ea7\u591aAgent\u534f\u4f5c\u7cfb\u7edf 59 \u5f20\u79d1\u9e4f\u3001\u53f2\u2f94 \u8f7b\u91cf\u7ea7\u591aAgent\u534f\u4f5c\u7cfb\u7edf 60 \u5d14\u97e9\u6bc5\u3001\u9ec4\u5bb6\u8c6a \u8f7b\u91cf\u7ea7\u591aAgent\u534f\u4f5c\u7cfb\u7edf 61 \u4efb\u76ca\u9a70 \u8f7b\u91cf\u7ea7\u591aAgent\u534f\u4f5c\u7cfb\u7edf 62 \u9648\u9e4f\u65ed \u8f7b\u91cf\u7ea7\u591aAgent\u534f\u4f5c\u7cfb\u7edf 63 \u738b\u6893\u748b \u8f7b\u91cf\u7ea7\u591aAgent\u534f\u4f5c\u7cfb\u7edf 64 \u8c22\u9038\u51e1 \u57fa\u4e8e\u6269\u6563\u6a21\u578b\u7684\u4e2a\u6027\u5316\u56fe\u50cf\u751f\u6210 65 \u5f90\u9f0e \u57fa\u4e8e\u6269\u6563\u6a21\u578b\u7684\u4e2a\u6027\u5316\u56fe\u50cf\u751f\u6210 66 \u51af\u601d\u8fdc\u3001\u8d75\u707f\u8bed\u3001\u827e\u739b\u4e3d \u57fa\u4e8e\u6269\u6563\u6a21\u578b\u7684\u4e2a\u6027\u5316\u56fe\u50cf\u751f\u6210 67 \u738b\u5b87\u7fd4\u3001\u8303\u5bb6\u78ca\u3001\u80e1\u6768 \u57fa\u4e8e\u6269\u6563\u6a21\u578b\u7684\u4e2a\u6027\u5316\u56fe\u50cf\u751f\u6210 68 \u767d\u4fe1\u7fbd\u3001\u6881\u5353\u9896\u3001\u9ad8\u5eb7 \u57fa\u4e8e\u6269\u6563\u6a21\u578b\u7684\u4e2a\u6027\u5316\u56fe\u50cf\u751f\u6210 69 \u738b\u8bd7\u7476\u3001\u8bb8\u6881\u8d85\u3001\u5f20\u6df3\u7693 \u57fa\u4e8e\u6269\u6563\u6a21\u578b\u7684\u4e2a\u6027\u5316\u56fe\u50cf\u2f63\u6210 70 \u5468\u5b8f\u5b87\u3001\u9b4f\u660e\u73ae \u57fa\u4e8e\u6269\u6563\u6a21\u578b\u7684\u4e2a\u6027\u5316\u56fe\u50cf\u2f63\u6210"},{"location":"final/%E8%AF%BE%E7%A8%8B%E5%A4%A7%E4%BD%9C%E4%B8%9A/","title":"\u8bfe\u7a0b\u5927\u4f5c\u4e1a","text":"<p>\u540c\u5b66\u4eec\u53ef\u4ee5\u6311\u9009\u4ee5\u4e0b\u7684\u9898\u76ee\u8fdb\u884c\u5927\u4f5c\u4e1a\u7684\u7f16\u5199\uff0c\u4e5f\u53ef\u4ee5\u81ea\u5df1\u63d0\u51fa\u9898\u76ee\uff0c\u4f46\u662f\u9700\u8981\u7ecf\u8fc7\u8001\u5e08\u7684\u5ba1\u6838\u3002 \u70b9\u51fb\u5c31\u53ef\u4ee5\u8df3\u8f6c\u5bf9\u5e94\u9879\u76ee\u7684\u8be6\u7ec6\u8bf4\u660e\u3002</p>"},{"location":"final/%E8%AF%BE%E7%A8%8B%E5%A4%A7%E4%BD%9C%E4%B8%9A/#_2","title":"\u7ec4\u961f\u89c4\u5219","text":"<p>1-3\u4eba\u7ec4\u961f</p>"},{"location":"final/%E8%AF%BE%E7%A8%8B%E5%A4%A7%E4%BD%9C%E4%B8%9A/#_3","title":"\u65f6\u95f4\u70b9","text":"<ul> <li>Proposal\uff1a<ul> <li>\u622a\u6b62\u65f6\u95f4\uff1a2025.4.21</li> <li>\u63d0\u4ea4\u5185\u5bb9\uff1a\u9009\u9898\u3001\u7814\u7a76\u8ba1\u5212\u3001\u7ec4\u961f\u60c5\u51b5</li> </ul> </li> <li>Milestone:<ul> <li>\u622a\u6b62\u65f6\u95f4\uff1a2025.5.16</li> <li>\u63d0\u4ea4\u5185\u5bb9\uff1a\u8fdb\u5c55\u62a5\u544a\uff08\u8dd1\u4e86\u54ea\u4e9b\u5b9e\u9a8c\u3001\u83b7\u5f97\u4e86\u54ea\u4e9b\u521d\u6b65\u6210\u679c\u3001\u5269\u4e0b\u7684\u65f6\u95f4\u6709\u4ec0\u4e48\u8ba1\u5212\uff09</li> </ul> </li> <li>Final:<ul> <li>\u7b54\u8fa9\u65e5\u671f\uff1a2025.5.30</li> <li>\u63d0\u4ea4\u5185\u5bb9:\u7b54\u8fa9PPT\u3001\u4ee3\u7801\u3001\u8bba\u6587</li> <li>\u63d0\u4ea4\u622a\u6b62\u65f6\u95f4:6\u67089\u65e5(\u6682\u5b9a)</li> </ul> </li> </ul>"},{"location":"final/%E8%AF%BE%E7%A8%8B%E5%A4%A7%E4%BD%9C%E4%B8%9A/#_4","title":"\u62a5\u544a\u63d0\u4ea4\u8981\u6c42","text":"<p>\u4f7f\u7528NeurIPS 2024\u7684\u6a21\u677f\uff0c\u6700\u7ec8\u63d0\u4ea4pdf\u7248\u672c\u3002</p> <p>overleaf\u4e0a\u7684\u6a21\u677f</p> <p>\u6b63\u65878-9\u9875\uff0creference\u548cappendix\u4e0d\u9650\u5236\u9875\u6570\u3002</p>"},{"location":"final/%E8%AF%BE%E7%A8%8B%E5%A4%A7%E4%BD%9C%E4%B8%9A/#_5","title":"\u7b54\u8fa9\u8981\u6c42","text":"<p>\u8be6\u89c1 \u7b54\u8fa9\u76f8\u5173\u5b89\u6392</p>"},{"location":"final/%E8%AF%BE%E7%A8%8B%E5%A4%A7%E4%BD%9C%E4%B8%9A/#_6","title":"\u9879\u76ee\u9898\u76ee","text":""},{"location":"final/%E8%AF%BE%E7%A8%8B%E5%A4%A7%E4%BD%9C%E4%B8%9A/#_7","title":"\u57fa\u7840\u9898","text":"<ol> <li> <p>\u53c2\u6570\u9ad8\u6548\u5fae\u8c03\uff08PEFT\uff09</p> </li> <li> <p>\u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0</p> </li> <li> <p>\u57fa\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\u7684\u96f6\u6837\u672c\u6587\u6863\u6392\u5e8f</p> </li> <li> <p>\u591a\u6a21\u6001\u8c23\u8a00\u68c0\u6d4b</p> </li> </ol>"},{"location":"final/%E8%AF%BE%E7%A8%8B%E5%A4%A7%E4%BD%9C%E4%B8%9A/#_8","title":"\u8fdb\u9636\u9898","text":"<ol> <li> <p>LLM\u8f93\u51fa\u957f\u5ea6\u9884\u6d4b</p> </li> <li> <p>KV cache\u7f13\u5b58\u7b56\u7565\u63a2\u7d22</p> </li> <li> <p>\u5927\u6a21\u578b\u8bad\u7ec3\u6027\u80fdProfiling\u548c\u4f18\u5316</p> </li> <li> <p>\u5927\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u663e\u5b58\u6362\u51fa\u6362\u5165\u63a2\u7d22</p> </li> <li> <p>MoE Offloading\uff1a\u6df7\u5408\u4e13\u5bb6\u6a21\u578b\u63a8\u7406\u663e\u5b58\u6362\u5165\u6362\u51fa</p> </li> <li> <p>\u6295\u673a\u89e3\u7801\u7684draft\u7b56\u7565\u5206\u6790</p> </li> <li> <p>\u57fa\u4e8e\u5f15\u5bfc\u7684\u5927\u8bed\u8a00\u6a21\u578b\u5e7b\u89c9\u7f13\u89e3</p> </li> <li> <p>\u667a\u80fd\u5de5\u5177\u8c03\u7528\u4ee3\u7406\u7cfb\u7edf</p> </li> <li> <p>\u8f7b\u91cf\u7ea7\u591aAgent\u534f\u4f5c\u7cfb\u7edf</p> </li> <li> <p>\u57fa\u4e8e\u6269\u6563\u6a21\u578b\u7684\u4e2a\u6027\u5316\u56fe\u50cf\u751f\u6210</p> </li> </ol>"},{"location":"final/projects/Caching-Strategy/","title":"KV cache\u7f13\u5b58\u7b56\u7565\u63a2\u7d22","text":""},{"location":"final/projects/Caching-Strategy/#_1","title":"\u4e00\u3001\u4efb\u52a1\u8bf4\u660e","text":""},{"location":"final/projects/Caching-Strategy/#11","title":"1.1 \u80cc\u666f\u8981\u6c42","text":"<p>\u57fa\u4e8eTransformer\u7684\u5927\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u5728\u63a8\u7406\u8fc7\u7a0b\u4e2d\u901a\u8fc7KV Cache\u7f13\u5b58\u5386\u53f2token\u7684K\u548cV\u6295\u5f71\uff0c\u4ee5\u7a7a\u95f4\u6362\u65f6\u95f4\u7684\u65b9\u5f0f\u52a0\u901f\u81ea\u56de\u5f52\u751f\u6210\u3002\u5728\u8bf7\u6c42\u751f\u6210\u7ed3\u675f\u540e\uff0c\u8fd9\u4e9bKV Cache\u5728\u663e\u5b58\u4e2d\u9a7b\u7559\uff0c\u672a\u6765\u53ef\u80fd\u88ab\u76f8\u540c\u524d\u7f00\u7684\u8bf7\u6c42\u590d\u7528\u6765\u52a0\u901f\u751f\u6210\uff0c\u51cf\u5c11\u91cd\u8ba1\u7b97\u3002</p> <p>\u540c\u6240\u6709\u7f13\u5b58\u4e00\u6837\uff0c\u663e\u5b58\u5bb9\u91cf\u9650\u5236\u4e86\u53ef\u7f13\u5b58\u7684KV\u5e8f\u5217\u7684\u5927\u5c0f\u3002\u5728\u672c\u5b9e\u9a8c\u4e2d\uff0c\u4f60\u5c06\u63a2\u7d22\u663e\u5b58\u4e2d\u7684KV Cache\u91cd\u7528\u673a\u5236\uff08\u4e5f\u5c31\u662f\u524d\u7f00\u7f13\u5b58\uff0cPrefix Cache\uff09\uff0c\u8bbe\u8ba1\u9ad8\u6548\u7684\u524d\u7f00\u7f13\u5b58\u9a71\u9010\u7b56\u7565\uff0c\u5728\u6709\u9650\u663e\u5b58\u4e0b\uff0c\u9488\u5bf9\u76f8\u540c\u7684trace\u6700\u5927\u5316\u524d\u7f00\u7f13\u5b58\u547d\u4e2d\u7387\u3002</p> <p>\u6838\u5fc3\u6311\u6218\uff1a</p> <ul> <li>\u663e\u5b58\u52a8\u6001\u5206\u914d\uff1a \u8fd0\u884c\u4e2d\u7684\u8bf7\u6c42\uff08\u6d3b\u8dc3\u8bf7\u6c42\uff09\u7684KV Cache\u9700\u4e0eprefix cache\u7ade\u4e89\u663e\u5b58\u7a7a\u95f4</li> <li>\u524d\u7f00\u5339\u914d\u4f18\u5316\uff1a \u8bc6\u522b\u65b0\u8bf7\u6c42\u4e0e\u5386\u53f2\u7f13\u5b58\u7684\u524d\u7f00\u91cd\u53e0\u90e8\u5206\uff08\u5982\u7cfb\u7edf\u63d0\u793a\u8bcd\u3001\u5171\u4eab\u77e5\u8bc6\u5e93\u5185\u5bb9\uff09</li> <li>\u7b56\u7565\u591a\u6837\u6027\uff1a \u7f13\u5b58\u7b56\u7565\u6709\u591a\u79cd\u9009\u62e9\uff0c\u9700\u8bbe\u8ba1\u591a\u79cd\u7b56\u7565\u5e76\u8fdb\u884c\u5bf9\u6bd4</li> </ul>"},{"location":"final/projects/Caching-Strategy/#12","title":"1.2 \u6570\u636e\u96c6\u8bf4\u660e","text":"\u6570\u636e\u96c6\u7c7b\u578b \u5185\u5bb9\u63cf\u8ff0 \u5907\u6ce8 dataset.json \u5305\u542b10,000\u6761\u8bf7\u6c42prompt\uff0c\u6bcf\u6761\u6570\u636e\u5305\u542b\uff1a- request_id: \u552f\u4e00\u6807\u8bc6\u7b26- input_text: \u8f93\u5165\u6587\u672c\uff08\u542b\u7cfb\u7edf\u63d0\u793a\u8bcd\u548c\u7528\u6237query\uff09- output_length: \u8be5\u8bf7\u6c42\u7684\u8f93\u51fa\u957f\u5ea6\uff08\u89c6\u4e3a\u5b9a\u503c\uff09 \u7528\u4e8e\u9a8c\u8bc1\u7f13\u5b58\u7b56\u7565 trace.csv \u542b10,000\u6761\u8bf7\u6c42request_id\u548c\u5230\u8fbe\u65f6\u95f4time \u7528\u4e8e\u6700\u7ec8\u8bc4\u4f30\uff0c\u9700\u63d0\u4ea4\u7f13\u5b58\u547d\u4e2d\u7ed3\u679c <p>\u6ce8\u610f: \u6570\u636e\u96c6\u8bf7\u6267\u884c<code>git clone https://www.modelscope.cn/datasets/gliang1001/ShareGPT_V3_unfiltered_cleaned_split.git</code>\u83b7\u53d6\uff0c\u6bcf\u8f6e\u5bf9\u8bdd\u4ec5\u53d6\u7b2c\u4e00\u4e2a\u56de\u5408\u5373\u53ef\uff08\u4e5f\u5c31\u662f\uff0c\u4e00\u4e2a\u7528\u6237\u63d0\u51fa\u7684\u95ee\u9898 + \u4e00\u6b21LLM\u7684\u56de\u7b54</p> <p>\u6570\u636e\u7279\u6027\uff1a</p> <ul> <li>40%\u8bf7\u6c42\u5305\u542b\u76f8\u540c\u7cfb\u7edf\u63d0\u793a\u8bcd\u524d\u7f00</li> <li>75%\u8bf7\u6c42\u6d89\u53ca\u5171\u4eab\u77e5\u8bc6\u5e93\uff08\u5982\u6587\u5b66/\u533b\u7597/\u6cd5\u5f8b/\u5de5\u5177/\u6587\u6863\uff09\uff0c\u6a21\u62df\u771f\u5b9e\u573a\u666f\u7684\u6587\u672c\u91cd\u53e0</li> </ul>"},{"location":"final/projects/Caching-Strategy/#_2","title":"\u4e8c\u3001\u65b9\u6cd5\u8bbe\u8ba1\u89c4\u8303","text":""},{"location":"final/projects/Caching-Strategy/#21","title":"2.1 \u6838\u5fc3\u7b56\u7565\u8bbe\u8ba1\uff08\u5fc5\u9009\uff09","text":"<p>\u9700\u5b9e\u73b0\u81f3\u5c11\u4e24\u79cd\u9a71\u9010\u7b56\u7565\u5e76\u8fdb\u884c\u5bf9\u6bd4\uff1a</p> <ul> <li> <p>\u7ecf\u5178\u7b97\u6cd5\u79fb\u690d</p> <ul> <li>LRU\uff08Least Recently Used\uff09\uff1a\u4f18\u5148\u9a71\u9010\u6700\u4e45\u672a\u4f7f\u7528\u7684\u7f13\u5b58\u5757</li> <li>LFU\uff08Least Frequently Used\uff09\uff1a\u7edf\u8ba1\u7f13\u5b58\u5757\u88ab\u547d\u4e2d\u6b21\u6570\uff0c\u6dd8\u6c70\u4f4e\u9891\u5757</li> <li>FIFO\uff08First-In-First-Out\uff09\uff1a\u6309\u7f13\u5b58\u52a0\u8f7d\u987a\u5e8f\u9a71\u9010</li> </ul> </li> <li> <p>\u81ea\u5b9a\u4e49\u7b56\u7565\uff08\u9700\u5305\u542b\u4ee5\u4e0b\u81f3\u5c11\u4e00\u9879\uff09\uff1a</p> <ul> <li>Prefix-Aware\u7b56\u7565\uff1a XXX</li> <li>Cost-Benefit\u6a21\u578b\uff1a XXX</li> <li>Hybrid\u7b56\u7565\uff1a XXX</li> </ul> </li> </ul>"},{"location":"final/projects/Caching-Strategy/#22","title":"2.2 \u53ef\u9009\u4f18\u5316\u65b9\u5411","text":"<ul> <li>Swap\uff1a\u5c06\u4e0d\u6d3b\u8dc3\u7684KV Cache\u7f6e\u6362</li> <li>\u5bf9\u9ad8\u9891\u524d\u7f00\uff08\u5982\u7cfb\u7edf\u63d0\u793a\u8bcd\uff09\u8fdb\u884c\u9884\u7f13\u5b58</li> </ul>"},{"location":"final/projects/Caching-Strategy/#_3","title":"\u4e09\u3001\u5b9e\u9a8c\u5b9e\u65bd\u8981\u6c42","text":""},{"location":"final/projects/Caching-Strategy/#31","title":"3.1 \u8bc4\u4f30\u6307\u6807","text":"\u6307\u6807\u7c7b\u578b \u8ba1\u7b97\u516c\u5f0f \u6743\u91cd \u7f13\u5b58\u547d\u4e2d\u7387 HitRate = \u2211(HitCount) / \u2211(TotalRequest) 100%"},{"location":"final/projects/Caching-Strategy/#32","title":"3.2 \u5fc5\u505a\u5b9e\u9a8c","text":"<ul> <li>\u57fa\u7ebf\u5bf9\u6bd4\uff1a \u5bf9\u6bd4\u65e0\u7f13\u5b58\uff08ReCompute\uff09\u548c\u7406\u60f3\u7f13\u5b58\uff08Oracle\uff09\u7684\u6781\u7aef\u60c5\u51b5</li> <li>\u5206\u5e03\u654f\u611f\u6027\uff1a \u5728\u9ad8/\u4f4e\u524d\u7f00\u91cd\u53e0\u7387\uff0840% vs 90%\uff09\u573a\u666f\u4e0b\u7684\u7b56\u7565\u8868\u73b0\u5dee\u5f02</li> </ul>"},{"location":"final/projects/Caching-Strategy/#_4","title":"\u56db\u3001\u63d0\u4ea4\u8981\u6c42","text":""},{"location":"final/projects/Caching-Strategy/#41","title":"4.1 \u63d0\u4ea4\u5185\u5bb9","text":"<p>\u4ee3\u7801\u5305\u7ed3\u6784\u793a\u4f8b\uff1a</p> <pre><code>bash\n\u251c\u2500\u2500 strategy/            # \u7b56\u7565\u5b9e\u73b0  \n\u2502   \u251c\u2500\u2500 lru.py  \n\u2502   \u251c\u2500\u2500 lfu.py\n\u2502   \u251c\u2500\u2500 hybrid.py        # \u81ea\u5b9a\u4e49\u7b56\u7565\u793a\u4f8b  \n\u251c\u2500\u2500 evaluator/           # \u8bc4\u4f30\u6a21\u5757  \n&lt;!-- \u8fd9\u90e8\u5206\u9700\u8981\u8865\u5168 --&gt;\n\u251c\u2500\u2500 results/             # \u8f93\u51fa\u7ed3\u679c  \n\u2502   \u251c\u2500\u2500 test_hits.csv    # \u683c\u5f0f\uff1arequest_id, hit_flag(0/1), hit_ratio(%)  \n\u2514\u2500\u2500 report.pdf           # \u5b9e\u9a8c\u5206\u6790\u62a5\u544a\n</code></pre> <p>\u62a5\u544a\u5185\u5bb9\uff1a</p> <ul> <li>\u7b56\u7565\u8bbe\u8ba1\u539f\u7406\u4e0e\u590d\u6742\u5ea6\u5206\u6790</li> <li>\u4e0d\u540c\u8d1f\u8f7d\u4e0b\u7684\u547d\u4e2d\u7387\u66f2\u7ebf\uff08\u5982\u56fe1\uff09</li> <li>\u8bf7\u6c42prefix cache\u547d\u4e2d\u60c5\u51b5</li> </ul>"},{"location":"final/projects/Caching-Strategy/#5","title":"5 \u6ce8\u610f\u4e8b\u9879","text":"<p>\u53c2\u8003\u6587\u732e\uff1a \u5982\u679c\u4f60\u5728\u5b9e\u9a8c\u548c\u62a5\u544a\u4e2d\u53c2\u8003\u4e86\u5df2\u53d1\u8868\u7684\u6587\u732e\uff0c\u8bf7\u5217\u51fa\u4f60\u6240\u53c2\u8003\u7684\u76f8\u5173\u6587\u732e\u3002</p> <p>\u5982\u6709\u7591\u95ee\uff0c\u8bf7\u8054\u7cfb wzbwangzhibin@gmail.com \u6216 spli161006@gmail.com\u3002</p>"},{"location":"final/projects/Caching-Strategy/#_5","title":"\u9644\uff1a\u793a\u4f8b\u7b56\u7565\u4f2a\u4ee3\u7801","text":"<pre><code># LFU\u7b56\u7565\u793a\u4f8b  \nclass LFUCache:  \n        def __init__(self, capacity):  \n                self.capacity = capacity  \n                self.cache = {}  # key: request_id, value: {\"hit_count\": int}  \n\n        def access(self, request_id):  \n                if request_id in self.cache:  \n                        self.cache[request_id][\"hit_count\"] += 1  \n                        return True  \n                return False  \n\n        def evict(self):  \n                if sum(v[\"size\"] for v in self.cache.values()) &gt; self.capacity:  \n                        # \u6309 hit_count \u5347\u5e8f\u3001size \u964d\u5e8f\u6392\u5e8f  \n                        candidates = sorted(self.cache.items(), key=lambda x: (x[1][\"hit_count\"], -x[1][\"size\"]))  \n                        victim_id = candidates[0][0]  \n                        del self.cache[victim_id]\n</code></pre>"},{"location":"final/projects/Generation_Length_Prediction/","title":"LLM\u8f93\u51fa\u957f\u5ea6\u9884\u6d4b","text":""},{"location":"final/projects/Generation_Length_Prediction/#_1","title":"\u4e00\u3001\u4efb\u52a1\u8bf4\u660e","text":""},{"location":"final/projects/Generation_Length_Prediction/#11","title":"1.1 \u80cc\u666f\u8981\u6c42","text":"<p>\u57fa\u4e8e Transformer \u7684\u5927\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u5728\u63a8\u7406\u8fc7\u7a0b\u4e2d\u5177\u6709\u81ea\u56de\u5f52\u7684\u7279\u6027\uff0c\u5373\u751f\u6210\u8fc7\u7a0b\u662f\u9010\u8bcd\uff08token-by-token\uff09\u8fdb\u884c\u7684\u3002\u5728\u6bcf\u4e00\u6b65\u751f\u6210\u4e2d\uff0c\u6a21\u578b\u6839\u636e\u5148\u524d\u751f\u6210\u7684 token \u6765\u9884\u6d4b\u4e0b\u4e00\u4e2a token\uff0c\u76f4\u5230\u751f\u6210\u7ed3\u675f\u6807\u5fd7\uff08\u5982  \u6216\u8fbe\u5230\u6700\u5927\u957f\u5ea6\u9650\u5236\uff09\u3002\u8fd9\u79cd\u65b9\u5f0f\u5e26\u6765\u4e86\u4e00\u4e2a\u5173\u952e\u95ee\u9898\u2014\u2014\u751f\u6210\u957f\u5ea6\u7684\u4e0d\u786e\u5b9a\u6027\u3002\u8fd9\u610f\u5473\u7740\u65e0\u6cd5\u63d0\u524d\u9884\u77e5\u8ba1\u7b97\u548c\u5b58\u50a8\u9700\u6c42\u3002\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u5c06\u63a2\u8ba8\u5982\u4f55\u901a\u8fc7\u63d0\u793a\u8bcd\uff08prompt\uff09\u6765\u9884\u6d4b\u751f\u6210\u7684\u957f\u5ea6 / \u9884\u6d4b\u8bf7\u6c42\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\u662f\u5426\u4f1a\u7ed3\u675f\u3002 <ul> <li>\u65b9\u6cd5\u4e00\uff08\u72ec\u7acb\u6a21\u578b\uff09\uff1a\u4f7f\u7528BERT\u6784\u5efa\u5206\u7c7b\u5668\uff0c\u4ec5\u901a\u8fc7\u8f93\u5165\u6587\u672c\u9884\u6d4b\u8f93\u51fa\u957f\u5ea6\u533a\u95f4</li> <li>\u65b9\u6cd5\u4e8c\uff08\u67b6\u6784\u4fee\u6539\uff09\uff1a\u4fee\u6539Llama-3.2-1B-Instruct\u6a21\u578b\u7ed3\u6784\u5b9e\u73b0\u7aef\u5230\u7aef\u9884\u6d4b\uff0c\u4e0d\u4f7f\u7528\u4efb\u4f55\u5916\u90e8\u7684\u8f85\u52a9\u6a21\u578b\u8fdb\u884c\u9884\u6d4b</li> </ul>"},{"location":"final/projects/Generation_Length_Prediction/#12","title":"1.2 \u6570\u636e\u96c6\u8bf4\u660e","text":"\u6570\u636e\u96c6\u7c7b\u578b \u5185\u5bb9\u63cf\u8ff0 \u5907\u6ce8 \u63d0\u4f9b\u7684\u6570\u636e\u96c6 <code>dataset.csv</code> \u5728\u9644\u4ef6\u4e2d\u7684\u6587\u4ef6\u3002\u5305\u542bprompt\u548c\u4f7f\u7528Llama-3.2-1B-Instruct\u8fdb\u884c5\u6b21\u5b9e\u9a8c\u7684\u8f93\u51fa\u957f\u5ea6\u5747\u503c \u8bc4\u5206\u6570\u636e\u96c6 <code>judge.csv</code> \u9700\u8981\u63d0\u4ea4\u7684\u6587\u4ef6\u3002\u4ec5\u5305\u542bprompt\u3002"},{"location":"final/projects/Generation_Length_Prediction/#_2","title":"\u4e8c\u3001\u65b9\u6cd5\u8bbe\u8ba1\u89c4\u8303","text":""},{"location":"final/projects/Generation_Length_Prediction/#21-bert","title":"2.1 BERT\u5206\u7c7b\u65b9\u6848\uff08\u65b9\u6cd5\u4e00\uff09","text":""},{"location":"final/projects/Generation_Length_Prediction/#_3","title":"\u6838\u5fc3\u8981\u6c42","text":"<ol> <li> <p>\u7279\u5f81\u7f16\u7801\uff1a</p> <pre><code># \u4f7f\u7528CLS\u5411\u91cf\u4f5c\u4e3a\u8bed\u4e49\u8868\u5f81\ninputs = tokenizer(text, return_tensors='pt', padding='max_length', max_length=512)\noutputs = model(**inputs)\ncls_embedding = outputs.last_hidden_state[:,0,:]  # [batch_size, 768]\n</code></pre> </li> <li> <p>\u957f\u5ea6\u5206\u6876\u7b56\u7565\uff1a</p> <ul> <li>\u7c7b\u522b0: ([0, 200)) tokens</li> <li>\u7c7b\u522b1: ([200, 400)) tokens</li> <li>\u7c7b\u522b2: ([400, 600)) tokens</li> <li>\u7c7b\u522b3: ([600, 800)) tokens</li> <li>\u7c7b\u522b4: (\u2265800) tokens</li> </ul> </li> <li> <p>\u6a21\u578b\u7ea6\u675f\uff1a</p> <ul> <li>\u5728\u8be5\u5b9e\u9a8c\u4e2d\uff0c\u4f60\u4e0d\u9700\u8981\u5b9e\u9645\u4f7f\u7528LLM\u8fdb\u884c\u63a8\u7406\uff0c\u8be5\u5b9e\u9a8c\u7684\u9884\u6d4b\u8fc7\u7a0b\u4e0eLLM\u751f\u6210\u8fc7\u7a0b\u5b8c\u5168\u89e3\u8026\u3002</li> </ul> </li> </ol>"},{"location":"final/projects/Generation_Length_Prediction/#22-llm","title":"2.2 LLM\u7ed3\u6784\u4fee\u6539\uff08\u65b9\u6cd5\u4e8c\uff09","text":""},{"location":"final/projects/Generation_Length_Prediction/#_4","title":"\u67b6\u6784\u4fee\u6539","text":"<ol> <li> <p>\u6a21\u578b\u67b6\u6784\u8bbe\u8ba1\u3002</p> <pre><code>- \u5728Llama-3.2-1B-Instruct\u7684\u57fa\u7840\u4e0a\uff0c\u4fee\u6539\u6a21\u578b\u7ed3\u6784\u5b9e\u73b0\u8f93\u51fa\u957f\u5ea6\u9884\u6d4b\u3002\u9700\u8981\u8003\u8651\u6a21\u578b\u8bbe\u8ba1\u3002\n</code></pre> </li> <li> <p>\u8bad\u7ec3\u7b56\u7565\u3002</p> <pre><code>- \u9700\u8981\u8003\u8651\u4f18\u5316\u957f\u5ea6\u9884\u6d4b\u4efb\u52a1\u3002\n</code></pre> </li> <li> <p>\u9632\u5e72\u6270\u673a\u5236\u3002</p> <ul> <li>\u4e0d\u4f7f\u7528\u4efb\u4f55\u5916\u90e8\u7684\u8f85\u52a9\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\uff0c\u4e14\u4e0d\u4f1a\u5f71\u54cd\u5b9e\u9645\u8f93\u51fa\u5185\u5bb9\u8d28\u91cf\u548c\u957f\u5ea6\u3002</li> </ul> </li> </ol>"},{"location":"final/projects/Generation_Length_Prediction/#_5","title":"\u4e09\u3001\u5b9e\u9a8c\u5b9e\u65bd\u8981\u6c42","text":""},{"location":"final/projects/Generation_Length_Prediction/#31","title":"3.1 \u6570\u636e\u9884\u5904\u7406","text":"<ul> <li>\u7edf\u4e00\u4f7f\u7528Llama-3\u7684SentencePiece\u5206\u8bcd\u5668\u5904\u7406</li> </ul>"},{"location":"final/projects/Generation_Length_Prediction/#32","title":"3.2 \u8bc4\u4f30\u6307\u6807","text":"<p>\u672c\u5b9e\u9a8c\u4e0d\u9650\u5236\u5177\u4f53\u7684\u8bc4\u4f30\u6307\u6807\u3002\u4f60\u9700\u8981\u786e\u4fdd\u8bc4\u4f30\u6307\u6807\u80fd\u591f\u5408\u9002\u5730\u8861\u91cf\u957f\u5ea6\u9884\u6d4b\u7684\u51c6\u786e\u6027\uff0c\u4f8b\u5982\uff1a\u5982\u679c\u91c7\u7528\u5206\u7c7b\u4efb\u52a1\uff0c\u53ef\u80fd\u91c7\u7528\u5206\u7c7b\u4efb\u52a1\u7684\u5e38\u7528\u8bc4\u4f30\u6307\u6807\u3002\u4f60\u8fd8\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u5176\u4ed6\u5408\u9002\u4efb\u52a1\u3002</p>"},{"location":"final/projects/Generation_Length_Prediction/#33","title":"3.3 \u5fc5\u505a\u5b9e\u9a8c","text":"<ul> <li>\u57fa\u7ebf\u5bf9\u6bd4\uff1a\u5bf9\u6bd4\u63d0\u793a\u8bcd\u65b9\u6cd5\uff08\"\u8bf7\u5148\u9884\u6d4b\u56de\u7b54\u957f\u5ea6\"\uff09\u7684\u9884\u6d4b\u8bef\u5dee</li> <li>\u6d88\u878d\u5b9e\u9a8c\uff1a\u9a8c\u8bc1\u8054\u5408\u8bad\u7ec3\u7b56\u7565\u7684\u6709\u6548\u6027\uff08\u5173\u95edMSE_Loss\uff09</li> </ul>"},{"location":"final/projects/Generation_Length_Prediction/#_6","title":"\u56db\u3001\u63d0\u4ea4\u8981\u6c42","text":""},{"location":"final/projects/Generation_Length_Prediction/#41","title":"4.1 \u63d0\u4ea4\u5185\u5bb9","text":"<ol> <li> <p>\u4ee3\u7801\u5305\uff1a</p> <pre><code>\u251c\u2500\u2500 bert_predict/       # \u65b9\u6cd5\u4e00\u5b9e\u73b0\n\u2502   \u251c\u2500\u2500 preprocess.py\n\u2502   \u2514\u2500\u2500 train.py\n\u251c\u2500\u2500 llama_modify/       # \u65b9\u6cd5\u4e8c\u5b9e\u73b0\n\u2502   \u251c\u2500\u2500 modeling_llama.py\n\u2502   \u2514\u2500\u2500 finetune.py\n\u251c\u2500\u2500 judge.csv           # \u9884\u6d4b\u6570\u636e\u96c6\uff0c\u7528\u4e8e\u8bc4\u5206\n\u2514\u2500\u2500 requirements.txt\n</code></pre> </li> <li> <p>\u5b9e\u9a8c\u7ed3\u679c\uff1a</p> <ul> <li>\u6d4b\u8bd5\u96c6\u9884\u6d4b\u7ed3\u679cCSV\u6587\u4ef6\uff08\u542bID\u3001\u9884\u6d4b\u957f\u5ea6\u3001\u771f\u5b9e\u957f\u5ea6\u4e09\u5217\uff09</li> <li>\u5404\u5b9e\u9a8c\u7684\u8bc4\u4f30\u6307\u6807\u5bf9\u6bd4\u8868\u683c\uff08Markdown\u683c\u5f0f\uff09</li> </ul> </li> </ol>"},{"location":"final/projects/Generation_Length_Prediction/#42","title":"4.2 \u8bc4\u5206\u6807\u51c6","text":"\u8bc4\u5206\u7ef4\u5ea6 \u7ec6\u5219\u8bf4\u660e \u5360\u6bd4 \u65b9\u6cd5\u521b\u65b0\u6027 BERT\u7279\u5f81\u5de5\u7a0b/LLM\u4fee\u6539\u8bbe\u8ba1\u7684\u5408\u7406\u6027 25% \u7ed3\u679c\u51c6\u786e\u6027 \u6d4b\u8bd5\u96c6MAE \u2264 100 tokens 40% \u4ee3\u7801\u8d28\u91cf PEP8\u89c4\u8303\u3001\u6a21\u5757\u5316\u8bbe\u8ba1\u3001\u6ce8\u91ca\u5b8c\u6574\u6027 20% \u62a5\u544a\u8d28\u91cf \u5b9e\u9a8c\u5206\u6790\u6df1\u5ea6\u3001\u53ef\u89c6\u5316\u5448\u73b0\u6548\u679c 15%"},{"location":"final/projects/Generation_Length_Prediction/#_7","title":"\u4e94\u3001\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li> <p>\u786c\u4ef6\u9650\u5236\uff1a</p> <ul> <li>\u65b9\u6cd5\u4e00\u5141\u8bb8\u5728CPU\u73af\u5883\u8fd0\u884c</li> <li>\u65b9\u6cd5\u4e8c\u9700\u63d0\u4f9b\u7b80\u8981\u7684GPU\u5185\u5b58\u5360\u7528\u5206\u6790\uff08\u4f7f\u7528nvidia-smi\u8bb0\u5f55\uff09</li> </ul> </li> <li> <p>\u5b9e\u9a8c\u8981\u6c42\uff1a</p> <ul> <li>\u4e0d\u8981\u901a\u8fc7\u4efb\u4f55\u65b9\u5f0f\u5e72\u9884\u548c\u5f15\u5bfc\u6a21\u578b\u7684\u751f\u6210\u957f\u5ea6\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a\u9884\u8bbeprompt\u5f15\u5bfc\u751f\u6210\u957f\u5ea6\u3001\u622a\u65ad\u6a21\u578b\u751f\u6210\u7b49\u3002</li> <li>\u9700\u63d0\u4ea4\u8bad\u7ec3\u8fc7\u7a0b\u7684loss\u66f2\u7ebf\u622a\u56fe</li> </ul> </li> <li> <p>\u53c2\u8003\u6587\u732e\uff1a</p> <ul> <li>\u5982\u679c\u4f60\u5728\u5b9e\u9a8c\u548c\u62a5\u544a\u4e2d\u53c2\u8003\u4e86\u5df2\u53d1\u8868\u7684\u6587\u732e\uff0c\u8bf7\u5217\u51fa\u4f60\u6240\u53c2\u8003\u7684\u76f8\u5173\u6587\u732e\u3002</li> </ul> </li> <li> <p>\u5982\u6709\u7591\u95ee\uff0c\u8bf7\u8054\u7cfb wzbwangzhibin@gmail.com \u6216 spli161006@gmail.com\u3002</p> </li> </ol>"},{"location":"final/projects/NJUProject_MoE_Offloading/","title":"MoE Offloading\uff1a\u6df7\u5408\u4e13\u5bb6\u6a21\u578b\u63a8\u7406\u663e\u5b58\u6362\u5165\u6362\u51fa","text":""},{"location":"final/projects/NJUProject_MoE_Offloading/#_1","title":"\u4e00\u3001\u4efb\u52a1\u8bf4\u660e","text":""},{"location":"final/projects/NJUProject_MoE_Offloading/#11","title":"1.1 \u80cc\u666f","text":"<p>\u968f\u7740\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7684\u89c4\u6a21\u4e0d\u65ad\u589e\u52a0\uff0c\u6a21\u578b\u7684\u8ba1\u7b97\u9700\u6c42\u4e5f\u968f\u4e4b\u53d8\u5f97\u66f4\u52a0\u5e9e\u5927\u3002\u4e3a\u4e86\u4f18\u5316\u8ba1\u7b97\u6027\u80fd\u5e76\u964d\u4f4e\u663e\u5b58\u6d88\u8017\uff0c\u6df7\u5408\u4e13\u5bb6\u6a21\u578b(Mixture of Experts, MoE)\u5df2\u6210\u4e3a\u4e00\u4e2a\u91cd\u8981\u7684\u7814\u7a76\u65b9\u5411\u3002\u5b83\u901a\u8fc7\u5c06\u6a21\u578b\u5212\u5206\u4e3a\u591a\u4e2a\u4e13\u5bb6(expert)\u5e76\u52a8\u6001\u8def\u7531\u8f93\u5165token\u5230\u7279\u5b9a\u4e13\u5bb6\uff0c\u80fd\u591f\u5728\u4fdd\u6301\u8ba1\u7b97\u91cf\u76f8\u5bf9\u6052\u5b9a\u7684\u60c5\u51b5\u4e0b\u5927\u5e45\u589e\u52a0\u6a21\u578b\u53c2\u6570\u91cf\u3002DeepSeek-V2-Lite-Chat\u5c31\u662f\u8fd9\u6837\u4e00\u4e2aMoE\u6a21\u578b\uff0c\u5176\u5927\u90e8\u5206\u53c2\u6570\u96c6\u4e2d\u5728expert\u4e2d\u3002</p> <p>\u7136\u800c\uff0cMoE\u6a21\u578b\u901a\u5e38\u53c2\u6570\u91cf\u975e\u5e38\u5927\uff0c\u96be\u4ee5\u5728\u5355\u5f20GPU\u5361\u4e0a\u5b8c\u6574\u52a0\u8f7d\u548c\u8fd0\u884c\u3002\u672c\u9879\u76ee\u65e8\u5728\u901a\u8fc7offloading\u6280\u672f\uff0c\u5728\u6709\u9650\u663e\u5b58\u7684\u5355\u5361\u73af\u5883\u4e0b\u6210\u529f\u8fd0\u884cDeepSeek-V2-Lite-Chat\u6a21\u578b\u3002</p>"},{"location":"final/projects/NJUProject_MoE_Offloading/#12-offloading","title":"1.2 Offloading\u63a8\u7406\u7cfb\u7edf","text":"<p>Offloading\u63a8\u7406\u7cfb\u7edf\u662f\u4e00\u79cd\u5c06\u6a21\u578b\u90e8\u5206\u53c2\u6570\u6216\u8ba1\u7b97\u4e34\u65f6\u4eceGPU\u663e\u5b58\u5378\u8f7d\u5230\u4e3b\u673a\u5185\u5b58\u6216\u5b58\u50a8\u8bbe\u5907\u7684\u6280\u672f\uff0c\u5f53\u9700\u8981\u65f6\u624d\u52a8\u6001\u52a0\u8f7d\u56de\u663e\u5b58\u3002</p> <p>\u5bf9\u4e8eMoE\u6a21\u578b\uff0c\u7531\u4e8e\u6bcf\u4e2a\u8f93\u5165token\u901a\u5e38\u53ea\u6fc0\u6d3b\u5c11\u91cf\u4e13\u5bb6\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u7a00\u758f\u7279\u6027\uff0c\u53ea\u5c06\u5f53\u524d\u9700\u8981\u7684\u4e13\u5bb6\u52a0\u8f7d\u5230\u663e\u5b58\u4e2d\uff0c\u5176\u4ed6\u4e13\u5bb6\u6682\u65f6\u5378\u8f7d\u5230\u4e3b\u673a\u5185\u5b58\uff0c\u4ece\u800c\u5927\u5e45\u51cf\u5c11\u663e\u5b58\u5360\u7528\u3002</p>"},{"location":"final/projects/NJUProject_MoE_Offloading/#13-deepseek-v2-lite-chat","title":"1.3 DeepSeek-V2-Lite-Chat\u6a21\u578b","text":"<p>DeepSeek-V2-Lite-Chat\u6a21\u578b\u7684\u8d44\u6599\u5982\u4e0b\u3002\u4e00\u517127\u5c42\uff0c\u6bcf\u5c42\u670964\u4e2a\u4e13\u5bb6\uff0c\u4e00\u4e2atoken\u6fc0\u6d3b6\u4e2a\u4e13\u5bb6\uff0c\u67092\u4e2ashared\u4e13\u5bb6\u3002</p> <p></p> <p></p> <p>deepseek-ai/DeepSeek-V2: DeepSeek-V2: A Strong, Economical, and Efficient Mixture-of-Experts Language Model</p> <p>deepseek-ai/DeepSeek-V2-Lite-Chat \u00b7 Hugging Face</p>"},{"location":"final/projects/NJUProject_MoE_Offloading/#_2","title":"\u4e8c\u3001\u65b9\u6cd5\u8bbe\u8ba1\u89c4\u8303","text":""},{"location":"final/projects/NJUProject_MoE_Offloading/#21","title":"2.1 \u7cfb\u7edf\u5b9e\u73b0\uff08\u5fc5\u9009\uff09","text":"<p>\u4f60\u9700\u8981\u5b9e\u73b0DeepSeek-V2-Lite-Chat\u6a21\u578b\u5728\u5355\u5361\u4e0a\u7684\u63a8\u7406\u3002\u5728\u8fd9\u4e00\u90e8\u5206\u53ea\u5b9e\u73b0expert\u53c2\u6570\u7684\u5378\u8f7d\u3002</p> <ul> <li>Epxert\u53c2\u6570\u5b58\u653e\u5728CPU\u5185\u5b58\u4e2d\uff0c\u5176\u4ed6\u53c2\u6570\uff08shared expert\u3001attention....\uff09\u653e\u5728GPU\u663e\u5b58\u4e2d\u3002</li> <li>\u8ba1\u7b97\u5728GPU\u4e0a\u8fdb\u884c\uff0c\u5f53\u76ee\u524dlayer\u9700\u8981\u4f7f\u7528expert\u65f6\uff0c\u5c06expert\u52a0\u8f7d\u5230GPU\u4e2d\u8fdb\u884c\u8ba1\u7b97\u3002</li> </ul>"},{"location":"final/projects/NJUProject_MoE_Offloading/#22","title":"2.2 \u4f18\u5316\uff08\u81f3\u5c11\u5b8c\u6210\u7b2c\u4e00\u4e2a\uff09","text":"<p>\u9996\u5148\u8981\u5b8c\u6210\u201c\u4e13\u5bb6\u7f13\u5b58\u201d\uff0c\u5728\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u8fdb\u884c\u201c\u4e13\u5bb6\u6fc0\u6d3b\u9884\u6d4b\u4e0e\u9884\u53d6\u201d\u548c\u201c\u4e13\u5bb6\u8ba1\u7b97\u5378\u8f7d\u201d\u7684\u4f18\u5316\u3002</p> <ol> <li> <p>\u4e13\u5bb6\u7f13\u5b58</p> </li> <li> <p>GPU\u663e\u5b58\u5982\u679c\u6709\u989d\u5916\u7a7a\u95f4\uff0c\u53ef\u4ee5\u7f13\u5b58\u4e00\u90e8\u5206expert\u5728GPU\u4e2d\uff0c\u79f0\u4e3a\u4e13\u5bb6\u7f13\u5b58\uff0c\u907f\u514d\u9700\u8981\u65f6\u518d\u8017\u8d39\u65f6\u95f4\u52a0\u8f7d\u3002\uff08\u4f8b\u5982\u7f13\u5b58\u90a3\u4e9b\u6700\u5e38\u88ab\u6fc0\u6d3b\u7684expert\uff09</p> </li> <li> <p>\u53ef\u4ee5\u63a2\u7d22\u4e13\u5bb6\u7f13\u5b58\u7b56\u7565\uff1a\u5f53\u52a0\u8f7d\u65b0\u7684\u4e13\u5bb6\u8fdbGPU\u65f6\uff0c\u9700\u8981\u9a71\u9010\u4e13\u5bb6\u7f13\u5b58\u4e2d\u7684\u4e13\u5bb6\uff0c\u4f8b\u5982\u7528LRU\u3001LFU\u7b49\u7b56\u7565\u8fdb\u884c\u4e13\u5bb6\u9a71\u9010\u3002</p> </li> <li> <p>\u4e13\u5bb6\u6fc0\u6d3b\u9884\u6d4b\u4e0e\u9884\u53d6</p> </li> <li> <p>\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u6280\u5de7\u9884\u6d4b\u4e0b\u4e00\u5c42\u6fc0\u6d3b\u7684\u4e13\u5bb6\uff0c\u7136\u540e\u63d0\u524d\u5c06\u8fd9\u4e9b\u4e13\u5bb6\u52a0\u8f7d\u5230GPU\u4e2d\uff0c\u907f\u514d\u9700\u8981\u65f6\u518d\u8017\u8d39\u65f6\u95f4\u52a0\u8f7d\u3002</p> <ol> <li>\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b\uff08\u4f8b\u5982\u7b80\u5355\u7684MLP\uff09\u8fdb\u884c\u4e13\u5bb6\u6fc0\u6d3b\u7684\u9884\u6d4b\uff0c\u5728layer i\u65f6\u9884\u6d4blayer i+k\u7684\u4e13\u5bb6\u6fc0\u6d3b</li> <li>\u5728layer i\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528layer i+1\u7684gate\u8fdb\u884clayer i+1\u7684\u4e13\u5bb6\u6fc0\u6d3b\u9884\u6d4b</li> </ol> </li> <li> <p>\u4e13\u5bb6\u8ba1\u7b97\u5378\u8f7d</p> </li> <li>\u5f53\u6240\u9700\u4e13\u5bb6\u4e0d\u5728\u4e13\u5bb6\u7f13\u5b58\u4e2d\u65f6\uff0c\u76f4\u63a5\u5c06\u4e2d\u95f4\u6fc0\u6d3b\u503c\u4f20\u5230CPU\u4e0a\uff0c\u5728CPU\u4e0a\u8fdb\u884cexpert\u8ba1\u7b97\uff08\u56e0\u4e3a\u4f20\u8f93expert\u975e\u5e38\u8017\u65f6\uff0c\u4e0d\u5982\u5728CPU\u4e2d\u8fdb\u884c\u8ba1\u7b97\uff09</li> </ol> <p>\u53c2\u8003\u8d44\u6599:</p> <ul> <li>[ICLR'25] Fast Inference of MoE Models with CPU-GPU Orchestration</li> <li>[efeslab/fiddler: ICLR'25] Fast Inference of MoE Models with CPU-GPU Orchestration</li> <li>Fast Inference of Mixture-of-Experts Language Models with Offloading</li> <li>dvmazur/mixtral-offloading: Run Mixtral-8x7B models in Colab or consumer desktops</li> </ul>"},{"location":"final/projects/NJUProject_MoE_Offloading/#_3","title":"\u4e09\u3001\u5b9e\u9a8c\u8981\u6c42","text":""},{"location":"final/projects/NJUProject_MoE_Offloading/#31","title":"3.1 \u8bc4\u4f30\u6307\u6807","text":"<ul> <li>latency\uff1a\u6bcf\u4e2a\u8f93\u51fatoken\u95f4\u9694</li> <li>throughput\uff1atokens per second</li> </ul>"},{"location":"final/projects/NJUProject_MoE_Offloading/#32","title":"3.2 \u9700\u8981\u505a\u7684\u5b9e\u9a8c","text":"<p>\u81ea\u5df1\u9009\u5b9a\u6570\u636e\u96c6\u3002</p> <p>\u5728\u4e0d\u540c\u914d\u7f6e\u4e0b\u6d4b\u91cf\u6027\u80fd\uff1a</p> <ol> <li>Batch Size\uff1a1, 4, 8, 16</li> <li>Sequence Length\uff1a128, 256, 512</li> </ol>"},{"location":"final/projects/NJUProject_MoE_Offloading/#_4","title":"\u56db\u3001\u63d0\u4ea4\u5185\u5bb9","text":"<ol> <li> <p>\u4ee3\u7801</p> </li> <li> <p>\u4ee3\u7801\u7ed3\u6784\u4e0d\u505a\u8981\u6c42</p> </li> <li>\u8981\u7ed9\u51fa\u80fd\u591f\u8fd0\u884c\u7684python\u73af\u5883\uff08requirement.txt\uff09</li> <li> <p>\u8981\u7ed9\u51fa\u80fd\u6210\u529f\u8fd0\u884c\u4ee3\u7801\u7684\u811a\u672c</p> </li> <li> <p>\u62a5\u544a</p> </li> <li> <p>\u5b9e\u73b0\u65b9\u6cd5\uff1a\u8be6\u7ec6\u63cf\u8ff0\u7cfb\u7edf\u67b6\u6784\u548c\u5b9e\u73b0\u65b9\u6cd5</p> </li> <li> <p>\u4f18\u5316\u65b9\u6cd5\uff1a\u8bf4\u660e\u91c7\u7528\u7684\u4f18\u5316\u7b56\u7565\u53ca\u5176\u5b9e\u73b0\u65b9\u6cd5</p> </li> <li>\u5b9e\u9a8c\u7ed3\u679c\uff1a\u5c55\u793a\u4e0d\u540c\u914d\u7f6e\u4e0b\u7684\u5ef6\u8fdf\u548c\u541e\u5410\u91cf\u6570\u636e\uff0c\u5e76\u5bf9\u7ed3\u679c\u8fdb\u884c\u5206\u6790</li> </ol>"},{"location":"final/projects/NJUProject_MoE_Offloading/#_5","title":"\u4e94\u3001\u6ce8\u610f\u4e8b\u9879","text":"<p>\u53c2\u8003\u6587\u732e\uff1a \u5982\u679c\u4f60\u5728\u5b9e\u9a8c\u548c\u62a5\u544a\u4e2d\u53c2\u8003\u4e86\u5df2\u53d1\u8868\u7684\u6587\u732e\uff0c\u8bf7\u5217\u51fa\u4f60\u6240\u53c2\u8003\u7684\u76f8\u5173\u6587\u732e\u3002</p> <p>\u5982\u6709\u7591\u95ee\uff0c\u8bf7\u8054\u7cfb wzbwangzhibin@gmail.com \u6216 zzhbrr@gmail.com\u3002</p>"},{"location":"final/projects/NJUProject_MultimodalRumorDetection/","title":"\u591a\u6a21\u6001\u8c23\u8a00\u68c0\u6d4b","text":""},{"location":"final/projects/NJUProject_MultimodalRumorDetection/#_2","title":"\u4efb\u52a1\u8bf4\u660e","text":"<p>\u5728\u5f53\u4eca\u4fe1\u606f\u7206\u70b8\u7684\u65f6\u4ee3\uff0c\u793e\u4ea4\u5a92\u4f53\u5e73\u53f0\u4e0a\u5145\u65a5\u7740\u5927\u91cf\u7684\u4fe1\u606f\uff0c\u5176\u4e2d\u4e0d\u4e4f\u8c23\u8a00\u548c\u865a\u5047\u4fe1\u606f\u3002\u8fd9\u4e9b\u8c23\u8a00\u53ef\u80fd\u4f1a\u5bf9\u793e\u4f1a\u4ea7\u751f\u8d1f\u9762\u5f71\u54cd\uff0c\u56e0\u6b64\uff0c\u5982\u4f55\u6709\u6548\u5730\u68c0\u6d4b\u548c\u8bc6\u522b\u8c23\u8a00\u6210\u4e3a\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u7814\u7a76\u8bfe\u9898\u3002\u591a\u6a21\u6001\u8c23\u8a00\u68c0\u6d4b\u5229\u7528\u6587\u672c\u3001\u56fe\u50cf\u3001\u89c6\u9891\u7b49\u591a\u79cd\u6570\u636e\u6e90\uff0c\u7ed3\u5408\u591a\u6a21\u6001\u4fe1\u606f\u8fdb\u884c\u8c23\u8a00\u8bc6\u522b\uff0c\u80fd\u591f\u63d0\u9ad8\u68c0\u6d4b\u7684\u51c6\u786e\u6027\u548c\u9c81\u68d2\u6027\u3002</p>"},{"location":"final/projects/NJUProject_MultimodalRumorDetection/#_3","title":"\u4efb\u52a1\u8981\u6c42","text":"<ol> <li>\u7814\u7a76\u76ee\u6807\uff1a\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e00\u4e2a\u591a\u6a21\u6001\u8c23\u8a00\u68c0\u6d4b\u7cfb\u7edf\uff0c\u80fd\u591f\u4ece\u7ed9\u5b9a\u7684\u6570\u636e\u96c6\u4e2d\u8bc6\u522b\u51fa\u8c23\u8a00\u4fe1\u606f\u3002</li> <li>\u6570\u636e\u9884\u5904\u7406\uff1a\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u6e05\u6d17\u548c\u9884\u5904\u7406\uff0c\u5305\u62ec\u6587\u672c\u7684\u5206\u8bcd\u3001\u53bb\u505c\u7528\u8bcd\uff0c\u56fe\u50cf\u7684\u6807\u51c6\u5316\u5904\u7406\u7b49\u3002</li> <li>\u6a21\u578b\u8bbe\u8ba1\uff1a\u8bbe\u8ba1\u4e00\u4e2a\u591a\u6a21\u6001\u878d\u5408\u6a21\u578b\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\uff08\u5982CNN, LSTM, Transormer\u7b49\u6a21\u578b\uff09\u8fdb\u884c\u8c23\u8a00\u68c0\u6d4b\u3002</li> <li>\u6a21\u578b\u8bad\u7ec3\u4e0e\u8bc4\u4f30\uff1a\u4f7f\u7528\u8bad\u7ec3\u96c6\u5bf9\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\uff0c\u5e76\u5728\u6d4b\u8bd5\u96c6\u4e0a\u8fdb\u884c\u8bc4\u4f30\u3002</li> <li>\u7ed3\u679c\u5206\u6790\uff1a\u5206\u6790\u6a21\u578b\u7684\u68c0\u6d4b\u7ed3\u679c\uff0c\u627e\u51fa\u6a21\u578b\u7684\u4f18\u7f3a\u70b9\uff0c\u5e76\u63d0\u51fa\u6539\u8fdb\u5efa\u8bae\u3002</li> <li>\u62a5\u544a\u64b0\u5199\uff1a\u64b0\u5199\u4e00\u4efd\u8be6\u7ec6\u7684\u62a5\u544a\uff0c\u4ecb\u7ecd\u7814\u7a76\u80cc\u666f\u3001\u65b9\u6cd5\u3001\u5b9e\u9a8c\u7ed3\u679c\u548c\u7ed3\u8bba\u3002</li> </ol>"},{"location":"final/projects/NJUProject_MultimodalRumorDetection/#_4","title":"\u4f7f\u7528\u7684\u6570\u636e\u96c6","text":"<p>\u672c\u6b21\u5927\u4f5c\u4e1a\u5c06\u4f7f\u7528\u516c\u5f00\u7684\u591a\u6a21\u6001\u8c23\u8a00\u68c0\u6d4b\u6570\u636e\u96c6\uff0c\u5305\u542b\uff1a</p> <ul> <li>Weibo Rumor Dataset\uff1a\u4e0b\u8f7d\u5730\u5740, \u63d0\u53d6\u7801\uff1a4j7p</li> <li>Twitter MediaEval Dataset\uff1a\u4e0b\u8f7d\u5730\u5740\uff0c \u63d0\u53d6\u7801\uff1anei5</li> </ul> <p>\u8bc4\u4f30\u6307\u6807\u9700\u8981\u5305\u62ec\u8c23\u8a00\u548c\u975e\u8c23\u8a00\u7684\u7cbe\u786e\u7387\uff08Precision\uff09\u3001\u53ec\u56de\u7387\uff08Recall\uff09\u548cF1-score\u3002</p>"},{"location":"final/projects/NJUProject_MultimodalRumorDetection/#_5","title":"\u62a5\u544a\u64b0\u5199","text":"<ul> <li>\u62a5\u544a\u5e94\u81f3\u5c11\u5305\u542b\u4ee5\u4e0b\u90e8\u5206\uff1a</li> <li>\u6458\u8981\uff1a\u7b80\u8981\u6982\u8ff0\u7814\u7a76\u7684\u80cc\u666f\u3001\u76ee\u7684\u3001\u65b9\u6cd5\u3001\u4e3b\u8981\u7ed3\u679c\u548c\u7ed3\u8bba\u3002</li> <li>\u5f15\u8a00\uff1a\u4ecb\u7ecd\u7814\u7a76\u80cc\u666f\u548c\u610f\u4e49\u3002</li> <li>\u76f8\u5173\u5de5\u4f5c\uff1a\u7efc\u8ff0\u4e0e\u591a\u6a21\u6001\u8c23\u8a00\u68c0\u6d4b\u76f8\u5173\u7684\u5df2\u6709\u7814\u7a76\uff0c\u5206\u6790\u73b0\u6709\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9\u3002</li> <li>\u65b9\u6cd5\uff1a\u8be6\u7ec6\u63cf\u8ff0\u6570\u636e\u9884\u5904\u7406\u3001\u6a21\u578b\u8bbe\u8ba1\u548c\u8bad\u7ec3\u8fc7\u7a0b\u3002</li> <li>\u5b9e\u9a8c\uff1a\u8be6\u7ec6\u5c55\u793a\u548c\u5206\u6790\u5b9e\u9a8c\u7ed3\u679c\u3002</li> <li>\u7ed3\u8bba\uff1a\u603b\u7ed3\u7814\u7a76\u6210\u679c\uff0c\u5e76\u63d0\u51fa\u672a\u6765\u5de5\u4f5c\u65b9\u5411\u3002</li> </ul>"},{"location":"final/projects/NJUProject_MultimodalRumorDetection/#_6","title":"\u53c2\u8003\u65b9\u6848","text":"<p>\u8bf7\u81f3\u5c11\u4f7f\u7528\u4ee5\u4e0b\u6587\u7ae0\u4f5c\u4e3abaseline\uff0c\u5e76\u5728\u62a5\u544a\u4e2d\u8fdb\u884c\u5bf9\u6bd4\u5206\u6790\uff1a    - Multimodal Fusion with Recurrent Neural Networks for Rumor Detection on Microblogs \u8bba\u6587\u5730\u5740</p> <p>\u6b64\u5916\uff0c\u9f13\u52b1\u540c\u5b66\u4eec\u5728\u7814\u7a76\u8fc7\u7a0b\u4e2d\u5c3d\u53ef\u80fd\u53c2\u8003\u548c\u5bf9\u6bd4\u66f4\u65b0\u7684\u6a21\u578b\u548c\u65b9\u6cd5\u3002\u6700\u7ec8\u8bc4\u5206\u5c06\u7efc\u5408\u8003\u8651\u62a5\u544a\u7684\u5b8c\u6574\u6027\u548c\u6a21\u578b\u7684\u521b\u65b0\u6027\u4ee5\u53ca\u5728\u8c23\u8a00\u68c0\u6d4b\u4efb\u52a1\u4e2d\u7684\u5b9e\u9645\u6027\u80fd\u8868\u73b0\u3002</p>"},{"location":"final/projects/NJUProject_PEFT/","title":"\u53c2\u6570\u9ad8\u6548\u5fae\u8c03\uff08PEFT\uff09","text":""},{"location":"final/projects/NJUProject_PEFT/#_1","title":"\u4efb\u52a1\u80cc\u666f","text":"<p>\u8fd1\u5e74\u6765\uff0c\u968f\u7740\u5927\u89c4\u6a21\u9884\u8bad\u7ec3\u6a21\u578b\uff08\u5982BERT\u3001GPT\u7b49\uff09\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406\u4efb\u52a1\u4e2d\u53d6\u5f97\u663e\u8457\u6210\u529f\uff0c\u53c2\u6570\u9ad8\u6548\u5fae\u8c03\uff08Parameter-Efficient Fine-Tuning, PEFT\uff09\u9010\u6e10\u6210\u4e3a\u70ed\u95e8\u7814\u7a76\u65b9\u5411\u3002\u672c\u4efb\u52a1\u65e8\u5728\u8ba9\u540c\u5b66\u4eec\u5728\u638c\u63e1Transformer\u548c\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u7684\u57fa\u7840\u4e0a\uff0c\u6df1\u5165\u7406\u89e3\u5e76\u5b9e\u8df5\u4e3b\u6d41PEFT\u65b9\u6cd5\uff0c\u901a\u8fc7\u5b9e\u9a8c\u5bf9\u6bd4\u5b83\u4eec\u5728\u7279\u5b9a\u4efb\u52a1\u4e0a\u7684\u6027\u80fd\u3001\u6548\u7387\u4e0e\u9002\u7528\u6027\u3002</p>"},{"location":"final/projects/NJUProject_PEFT/#_2","title":"\u4efb\u52a1\u76ee\u6807","text":"<ul> <li>\u9605\u8bfb\u5e76\u7406\u89e3\u4e3b\u6d41PEFT\u65b9\u6cd5\u7684\u6838\u5fc3\u539f\u7406\u4e0e\u5b9e\u73b0\u673a\u5236\u3002</li> <li>\u9009\u62e9\u81f3\u5c11\u4e09\u79cdPEFT\u65b9\u6cd5\u8fdb\u884c\u5b9e\u73b0\u6216\u8c03\u7528\u73b0\u6709\u5f00\u6e90\u5de5\u5177\u3002</li> <li>\u5728\u7edf\u4e00\u7684\u4e0b\u6e38\u4efb\u52a1\uff08\u5982\u6587\u672c\u5206\u7c7b\u3001\u60c5\u611f\u5206\u6790\u3001\u95ee\u7b54\u7b49\uff09\u4e0a\u8fdb\u884c\u8bad\u7ec3\u548c\u8bc4\u4f30\u3002</li> <li>\u6bd4\u8f83\u5b83\u4eec\u7684\u6027\u80fd\uff08\u51c6\u786e\u7387\u3001F1\u5206\u6570\u7b49\uff09\u3001\u53c2\u6570\u91cf\u3001\u8bad\u7ec3\u65f6\u95f4\u3001\u663e\u5b58\u5360\u7528\u7b49\u6307\u6807\u3002</li> <li>\u64b0\u5199\u5b9e\u9a8c\u62a5\u544a\uff0c\u5206\u6790\u5404\u65b9\u6cd5\u7684\u4f18\u52a3\u548c\u9002\u7528\u573a\u666f\u3002</li> </ul>"},{"location":"final/projects/NJUProject_PEFT/#_3","title":"\u4efb\u52a1\u5185\u5bb9","text":""},{"location":"final/projects/NJUProject_PEFT/#1","title":"1. \u9009\u9898\u4e0e\u51c6\u5907","text":"<ul> <li>\u53ef\u9009\u4efb\u52a1\uff08\u4efb\u9009\u5176\u4e00\uff09\uff1a</li> <li>\u60c5\u611f\u5206\u7c7b\uff08\u5982IMDb / SST-2\uff09</li> <li>\u65b0\u95fb\u5206\u7c7b\uff08\u5982AG News\uff09</li> <li>\u53e5\u5b50\u5bf9\u5339\u914d\u4efb\u52a1\uff08\u5982MRPC / QQP\uff09</li> <li>\uff08\u8fdb\u9636\uff09\u95ee\u7b54\u4efb\u52a1\uff08\u5982SQuAD v1.1\uff09</li> <li>\u6a21\u578b\u57fa\u7ebf\uff1a\u5efa\u8bae\u4f7f\u7528BERT-base\u6216RoBERTa-base</li> </ul>"},{"location":"final/projects/NJUProject_PEFT/#2","title":"2. \u65b9\u6cd5\u5b9e\u73b0\uff08\u81f3\u5c11\u9009\u62e9\u4e09\u79cd\uff0c\u9700\u8986\u76d6\u4e0d\u540c\u673a\u5236\u7c7b\u522b\uff09\uff1a","text":"<ul> <li>\u63d0\u793a\u5de5\u7a0b\u7c7b\uff1aPrompt Tuning, Prefix Tuning</li> <li>\u53c2\u6570\u6ce8\u5165\u7c7b\uff1aLoRA, IA^3</li> <li>\u7ed3\u6784\u4fee\u6539\u7c7b\uff1aAdapter, BitFit</li> </ul> <p>\u53ef\u4ee5\u4f7f\u7528Hugging Face PEFT\u5e93\u3001AdapterHub\u3001\u6216\u81ea\u884c\u5b9e\u73b0\u3002</p>"},{"location":"final/projects/NJUProject_PEFT/#3","title":"3. \u5b9e\u9a8c\u4e0e\u8bc4\u4f30","text":"<ul> <li>\u5728\u76f8\u540c\u4efb\u52a1\u548c\u6a21\u578b\u521d\u59cb\u5316\u4e0b\uff0c\u5206\u522b\u8bad\u7ec3\u5404PEFT\u65b9\u6cd5</li> <li>\u8bc4\u4f30\u5e76\u8bb0\u5f55\u4ee5\u4e0b\u6307\u6807\uff1a</li> <li>\u5fae\u8c03\u540e\u7684\u6027\u80fd\u6307\u6807\uff08Accuracy / F1-score \u7b49\uff09</li> <li>\u8bad\u7ec3\u65f6\u95f4</li> <li>\u663e\u5b58\u4f7f\u7528</li> <li>\u53ef\u8bad\u7ec3\u53c2\u6570\u6bd4\u4f8b\uff08\u4e0efull fine-tuning\u5bf9\u6bd4\uff09</li> </ul>"},{"location":"final/projects/NJUProject_PEFT/#_4","title":"\u8fdb\u9636\u65b9\u5411","text":"<ul> <li>\u5c1d\u8bd5\u7ed3\u5408\u591a\u4e2aPEFT\u65b9\u6cd5\uff08\u5982Prompt+LoRA\uff09</li> <li>\u6269\u5c55\u4efb\u52a1\u5230\u591a\u8bed\u8a00 / \u591a\u4efb\u52a1\u573a\u666f</li> <li>\u5206\u6790\u5728\u5c0f\u6837\u672c/\u4f4e\u8d44\u6e90\u60c5\u5883\u4e0b\u7684PEFT\u6548\u679c</li> <li>\u53ef\u89c6\u5316\u6bcf\u79cd\u65b9\u6cd5\u5bf9Transformer\u5c42\u7684\u5e72\u9884\u7a0b\u5ea6\uff08\u4f8b\u5982\u68af\u5ea6\u3001\u6fc0\u6d3b\uff09</li> </ul>"},{"location":"final/projects/NJUProject_PEFT/#_5","title":"\u8bc4\u5206\u6807\u51c6","text":"\u8bc4\u5206\u9879 \u5206\u503c \u5b9e\u73b0\u5b8c\u6574\u6027\uff08\u22653\u79cd\u65b9\u6cd5\uff09 30% \u5b9e\u9a8c\u8bbe\u8ba1\u79d1\u5b66\u6027\uff08\u63a7\u5236\u53d8\u91cf\u3001\u590d\u73b0\u6027\uff09 20% \u7ed3\u679c\u5206\u6790\u4e0e\u5bf9\u6bd4\u6df1\u5ea6 20% \u62a5\u544a\u89c4\u8303\u6027\u4e0e\u8868\u8fbe\u6e05\u6670\u5ea6 20% \u521b\u65b0\u70b9\uff08\u878d\u5408\u65b9\u6cd5\u3001\u53ef\u89c6\u5316\u7b49\uff09 10%"},{"location":"final/projects/NJUProject_PEFT/#_6","title":"\u53c2\u8003\u8d44\u6e90","text":"<ul> <li>HuggingFace PEFT: https://github.com/huggingface/peft</li> <li>AdapterHub: https://adapterhub.ml/</li> <li>LoRA \u539f\u8bba\u6587: https://arxiv.org/abs/2106.09685</li> <li>Prefix Tuning: https://arxiv.org/abs/2101.00190</li> <li>BitFit: https://arxiv.org/abs/2106.10199</li> <li>IA^3: https://arxiv.org/abs/2205.05638</li> </ul>"},{"location":"final/projects/NJUProject_Speculative_Decoding_Draft_Strategy/","title":"\u6295\u673a\u89e3\u7801\u7684draft\u7b56\u7565\u5206\u6790","text":""},{"location":"final/projects/NJUProject_Speculative_Decoding_Draft_Strategy/#_1","title":"\u4e00\u3001\u4efb\u52a1\u8bf4\u660e","text":""},{"location":"final/projects/NJUProject_Speculative_Decoding_Draft_Strategy/#11","title":"1.1 \u80cc\u666f","text":"<p>Speculative Decoding\uff08\u63a8\u6d4b\u89e3\u7801\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u52a0\u901f\u5927\u578b\u8bed\u8a00\u6a21\u578b\u63a8\u7406\u7684\u6280\u672f\uff0c\u901a\u8fc7\u4f7f\u7528\u4e00\u4e2a\u5c0f\u578b\u7684draft\u6a21\u578b\u9884\u5148\u751f\u6210\u5019\u9009token\u5e8f\u5217\uff08draft tree\uff09\uff0c\u7136\u540e\u7531\u5927\u578b\u76ee\u6807\u6a21\u578b\u8fdb\u884c\u9a8c\u8bc1\u548c\u4fee\u6b63\u3002\u5176\u4e2d\uff0cdraft model\u751f\u6210\u7684draft tree\u7684\u6784\u5efa\u7b56\u7565\u5bf9\u6574\u4e2a\u89e3\u7801\u8fc7\u7a0b\u7684\u6548\u7387\u81f3\u5173\u91cd\u8981\uff0c\u4e0d\u540c\u7684\u6784\u5efa\u7b56\u7565\u4f1a\u5bfc\u81f4\u4e0d\u540c\u7684\u63a5\u53d7\u957f\u5ea6\u548c\u63a5\u53d7\u7387\uff0c\u4ece\u800c\u5f71\u54cd\u6574\u4f53\u63a8\u7406\u901f\u5ea6\u3002</p>"},{"location":"final/projects/NJUProject_Speculative_Decoding_Draft_Strategy/#12","title":"1.2 \u63a8\u6d4b\u89e3\u7801","text":"<p>Speculative Decoding\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a</p> <ol> <li>\u4f7f\u7528\u4e00\u4e2a\u5c0f\u578b\u3001\u5feb\u901f\u7684draft\u6a21\u578b\u9884\u5148\u751f\u6210\u591a\u4e2a\u5019\u9009token\u5e8f\u5217\uff08draft tree\uff09</li> <li>\u7136\u540e\u4f7f\u7528\u5927\u578b\u76ee\u6807\u6a21\u578b\u5e76\u884c\u9a8c\u8bc1\u8fd9\u4e9b\u5019\u9009\u5e8f\u5217</li> <li>\u63a5\u53d7\u90a3\u4e9b\u4e0e\u76ee\u6807\u6a21\u578b\u9884\u6d4b\u4e00\u81f4\u7684token\uff0c\u62d2\u7edd\u4e0d\u4e00\u81f4\u7684\u5e76\u91cd\u65b0\u751f\u6210</li> <li>\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u51cf\u5c11\u76ee\u6807\u6a21\u578b\u7684\u8c03\u7528\u6b21\u6570\uff0c\u4ece\u800c\u52a0\u901f\u63a8\u7406\u8fc7\u7a0b</li> </ol> <p>\u5927\u6a21\u578b\u63a8\u7406\u5999\u62db\u2014\u6295\u673a\u91c7\u6837\uff08Speculative Decoding\uff09 - \u77e5\u4e4e</p>"},{"location":"final/projects/NJUProject_Speculative_Decoding_Draft_Strategy/#13-draft","title":"1.3 \u63a8\u6d4b\u89e3\u7801\u7684draft\u7b56\u7565","text":"<p>\u5c0f\u6a21\u578b\u751f\u6210\u7684draft\u53ef\u4ee5\u662f\u4e00\u4e2a\u5e8f\u5217\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u6811\u3002</p> <p>\u4f8b\u5982\u8f93\u5165ABCDE\uff0c\u53ef\u4ee5\u6784\u5efaabcde\u8fd9\u6837\u7684\u987a\u5e8fdraft\u3002</p> <p></p> <p>\u4e5f\u53ef\u4ee5\u6784\u5efa\u4ee5\u4e0b\u8fd9\u6837\u7684\u6811\u5f62draft\u3002</p> <p></p> <p></p> <p>draft\u7b56\u7565\u4f1a\u5f71\u54cd\u6700\u7ec8\u6709\u591a\u5c11token\u4f1a\u88abtarget model\u6210\u529f\u9a8c\u8bc1\u3002\u672c\u9879\u76ee\u5c31\u662f\u5206\u6790\u4e0d\u540cdraft\u5f62\u5f0f\u4e0b\u7684token\u63a5\u53d7\u7387\u3002</p>"},{"location":"final/projects/NJUProject_Speculative_Decoding_Draft_Strategy/#_2","title":"\u4e8c\u3001\u65b9\u6cd5\u8bbe\u8ba1\u89c4\u8303","text":""},{"location":"final/projects/NJUProject_Speculative_Decoding_Draft_Strategy/#21-draft","title":"2.1 draft\u6548\u7387\u5206\u6790\uff08\u5fc5\u9009\uff09","text":"<ul> <li>draft model\u9009\u62e9\u5c0f\u6a21\u578b\uff0c\u4f8b\u5982Llama-160M\uff08Felladrin/Llama-160M-Chat-v1 \u00b7 Hugging Face\uff09\u3001Llama-1B(meta-llama/Llama-3.2-1B \u00b7 Hugging Face).</li> <li>target model\u9009\u62e9\u8f83\u5927\u6a21\u578b\uff0c\u4f8b\u5982Llama-3B\uff0c\u6216\u8005\u66f4\u5927\u7684Llama-7B\uff08\u53ef\u4ee5\u4f7f\u7528google colab\uff0cLLM\u5b9e\u8df5-Colab T4 GPU\u63a8\u7406Chinese-Llama-2-7b-4bit - \u77e5\u4e4e\uff09</li> <li>\u9700\u8981\u63d0\u51fa\u4e00\u4e9bdraft tree\u7684\u53ef\u80fd\u5f62\u72b6\uff0c\u5e76\u586b\u5145\u4e0d\u540c\u6570\u91cf\u7684draft tokens\uff0c\u5728\u4e0d\u540cdraft-target model\u7ec4\u5408\u4e0b\uff0c\u6d4b\u91cfdraft token\u63a5\u53d7\u7387\u548c\u63a5\u53d7\u957f\u5ea6\u3002</li> </ul>"},{"location":"final/projects/NJUProject_Speculative_Decoding_Draft_Strategy/#22-tree-attention","title":"2.2 tree-attention\u8ba1\u7b97\u6548\u7387\uff08\u53ef\u9009\uff09","text":"<p>\u5728target model verified\u7684\u65f6\u5019\uff0cattention\u90e8\u5206\u9700\u8981\u6267\u884ctree-attention\u3002</p> <p>\u5982\u4e0b\u56fe\uff0c\u5982\u679c\u6bcf\u4e2asequence\u987a\u5e8f\u5730\u8ba1\u7b97attention\uff0c\u9700\u8981\u6267\u884c\u591a\u6b21attention kernel\uff1b\u4f46\u5982\u679c\u50cf\u53f3\u8fb9\u4e00\u6837\uff0c\u901a\u8fc7\u5408\u7406\u914d\u7f6eattention causal mask\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e00\u6b21attention\u8ba1\u7b97\u6240\u6709sequence\u3002</p> <p></p> <p>\u4f60\u9700\u8981\u5b9e\u73b0tree-attention\uff0c\u5e76\u5206\u6790tree-attention\u5728\u4e0d\u540c\u7684batchsize\u3001sequence length\u3001draft length\u60c5\u51b5\u4e0b\u7684\u6267\u884c\u65f6\u95f4\u3002</p> <p>\u53c2\u8003\u8d44\u6599\uff1a</p> <p>Xupeng Miao, Gabriele Oliaro, Zhihao Zhang, Xinhao Cheng, Zeyu Wang, Zhengxin Zhang, Rae Ying Yee Wong, Alan Zhu, Lijie Yang, Xiaoxiang Shi, Chunan Shi, Zhuoming Chen, Daiyaan Arfeen, Reyna Abhyankar, and Zhihao Jia. 2024. SpecInfer: Accelerating Large Language Model Serving with Tree-based Speculative Inference and Verification. In Proceedings of the 29th ACM International Conference on Architectural Support for Programming Languages and Operating Systems, Volume 3 (ASPLOS '24), Vol. 3. Association for Computing Machinery, New York, NY, USA, 932\u2013949. https://doi.org/10.1145/3620666.3651335</p>"},{"location":"final/projects/NJUProject_Speculative_Decoding_Draft_Strategy/#_3","title":"\u4e09\u3001\u5b9e\u9a8c\u8981\u6c42","text":"<ol> <li>draft\u6548\u7387\u5206\u6790(\u5fc5\u9009)</li> <li>\u63d0\u51fa\u4e00\u4e9bdraft tree\u7684\u53ef\u80fd\u5f62\u72b6</li> <li>\u586b\u5145\u4e0d\u540c\u6570\u91cf\u7684draft tokens\uff0c\u5728\u4e0d\u540cdraft-target model\u7ec4\u5408\u4e0b\uff0c\u6d4b\u91cfdraft token\u63a5\u53d7\u7387\u548c\u63a5\u53d7\u957f\u5ea6\u3002<ul> <li>\u63a5\u53d7\u7387\uff1a\u88ab\u6210\u529f\u9a8c\u8bc1\u7684token\u6570\u91cf/\u603b\u4f53draft token\u6570\u91cf</li> <li>\u63a5\u53d7\u957f\u5ea6\uff1a\u88ab\u6210\u529f\u9a8c\u8bc1\u7684token\u6570\u91cf</li> </ul> </li> <li>tree-attention\u8ba1\u7b97\u6548\u7387\uff08\u53ef\u9009\uff09</li> <li>tree-attention\u5728\u4e0d\u540c\u7684batchsize\u3001sequence length\u3001draft length\u60c5\u51b5\u4e0b\u7684\u6267\u884c\u65f6\u95f4</li> </ol>"},{"location":"final/projects/NJUProject_Speculative_Decoding_Draft_Strategy/#_4","title":"\u56db\u3001\u63d0\u4ea4\u5185\u5bb9","text":"<ol> <li> <p>\u4ee3\u7801</p> </li> <li> <p>\u4ee3\u7801\u7ed3\u6784\u4e0d\u505a\u8981\u6c42</p> </li> <li>\u8981\u7ed9\u51fa\u80fd\u591f\u8fd0\u884c\u7684python\u73af\u5883\uff08requirement.txt\uff09</li> <li> <p>\u8981\u7ed9\u51fa\u80fd\u6210\u529f\u8fd0\u884c\u4ee3\u7801\u7684\u811a\u672c</p> </li> <li> <p>\u62a5\u544a</p> </li> <li> <p>\u5b9e\u73b0\u65b9\u6cd5\uff1a\u8be6\u7ec6\u63cf\u8ff0\u5b9e\u73b0\u65b9\u6cd5</p> </li> <li> <p>\u5b9e\u9a8c\u7ed3\u679c\uff1a\u5c55\u793a\u4e0d\u540c\u914d\u7f6e\u4e0bdraft token\u63a5\u53d7\u7387\u548c\u63a5\u53d7\u957f\u5ea6\uff08\u4ee5\u53catree-attention\u5728\u4e0d\u540c\u914d\u7f6e\u4e0b\u7684\u6267\u884c\u65f6\u95f4\uff09</p> </li> <li>\u7ed3\u679c\u5206\u6790\uff1a\u5bf9\u4ee5\u4e0a\u5b9e\u9a8c\u7ed3\u679c\u8fdb\u884c\u5206\u6790</li> </ol>"},{"location":"final/projects/NJUProject_Speculative_Decoding_Draft_Strategy/#_5","title":"\u4e94\u3001\u6ce8\u610f\u4e8b\u9879","text":"<p>\u53c2\u8003\u6587\u732e\uff1a \u5982\u679c\u4f60\u5728\u5b9e\u9a8c\u548c\u62a5\u544a\u4e2d\u53c2\u8003\u4e86\u5df2\u53d1\u8868\u7684\u6587\u732e\uff0c\u8bf7\u5217\u51fa\u4f60\u6240\u53c2\u8003\u7684\u76f8\u5173\u6587\u732e\u3002</p> <p>\u5982\u6709\u7591\u95ee\uff0c\u8bf7\u8054\u7cfb wzbwangzhibin@gmail.com \u6216 zzhbrr@gmail.com\u3002</p>"},{"location":"final/projects/NJUProject_multiagent/","title":"\u8f7b\u91cf\u7ea7\u591aAgent\u534f\u4f5c\u7cfb\u7edf","text":""},{"location":"final/projects/NJUProject_multiagent/#_1","title":"\u4e00\u3001\u4efb\u52a1\u8bf4\u660e","text":""},{"location":"final/projects/NJUProject_multiagent/#11","title":"1.1 \u6838\u5fc3\u76ee\u6807","text":"<p>\u5f00\u53d1\u652f\u63013\u4e2a\u4ee5\u4e0aAgent\u534f\u4f5c\u7684\u7cfb\u7edf\u6846\u67b6\uff0c\u8981\u6c42\u5b9e\u73b0\uff1a \u2022 \u57fa\u672c\u89d2\u8272\u5206\u5de5\u673a\u5236 \u2022 \u7b80\u5355\u901a\u4fe1\u534f\u8bae\uff08HTTP/WebSocket\uff09 \u2022 \u4efb\u52a1\u534f\u540c\u6267\u884c \u2022 \u57fa\u672c\u6545\u969c\u5904\u7406  </p>"},{"location":"final/projects/NJUProject_multiagent/#12","title":"1.2 \u7b80\u5316\u573a\u666f\u793a\u4f8b","text":"<ol> <li>\u8ba2\u9910\u52a9\u624b\uff1a\u7528\u6237Agent + \u9910\u5385\u67e5\u8be2Agent + \u652f\u4ed8Agent  </li> <li>\u5929\u6c14\u670d\u52a1\uff1a\u8bf7\u6c42\u89e3\u6790Agent + \u6570\u636e\u83b7\u53d6Agent + \u901a\u77e5\u751f\u6210Agent  </li> <li>\u667a\u80fd\u95ee\u7b54\uff1a\u95ee\u9898\u5206\u7c7bAgent + \u77e5\u8bc6\u5e93Agent + \u7b54\u6848\u6821\u9a8cAgent  </li> </ol>"},{"location":"final/projects/NJUProject_multiagent/#_2","title":"\u4e8c\u3001\u6846\u67b6\u8bbe\u8ba1\u8981\u6c42","text":""},{"location":"final/projects/NJUProject_multiagent/#21","title":"2.1 \u6838\u5fc3\u7ec4\u4ef6\uff08\u7b80\u5316\u7248\uff09","text":"\u6a21\u5757 \u57fa\u7840\u529f\u80fd\u8981\u6c42 \u5b9e\u73b0\u5efa\u8bae Agent\u7ba1\u7406\u5668 \u7ba1\u7406\u5df2\u6ce8\u518cAgent\u57fa\u672c\u4fe1\u606f \u4f7f\u7528\u5b57\u5178/\u7b80\u5355\u6570\u636e\u5e93\u5b58\u50a8 \u901a\u4fe1\u6a21\u5757 \u5b9e\u73b0\u57fa\u4e8eHTTP\u7684\u8bf7\u6c42-\u54cd\u5e94\u901a\u4fe1 \u4f7f\u7528Flask/FastAPI\u6846\u67b6 \u4efb\u52a1\u534f\u8c03\u5668 \u6839\u636e\u4efb\u52a1\u7c7b\u578b\u5206\u914dAgent \u5b9e\u73b0\u7b80\u5355\u8def\u7531\u89c4\u5219 \u65e5\u5fd7\u8bb0\u5f55\u5668 \u8bb0\u5f55\u5173\u952e\u64cd\u4f5c\u4e0e\u901a\u4fe1\u65e5\u5fd7 \u8f93\u51fa\u5230\u6587\u4ef6/\u63a7\u5236\u53f0"},{"location":"final/projects/NJUProject_multiagent/#22","title":"2.2 \u5fc5\u9009\u5b9e\u73b0\u8981\u6c42","text":"<ol> <li>\u81f3\u5c11\u5b9e\u73b02\u79cd\u534f\u4f5c\u6a21\u5f0f\uff08\u987a\u5e8f\u6267\u884c/\u5e76\u884c\u6267\u884c\uff09  </li> <li>\u5f00\u53d13\u4e2a\u4ee5\u4e0a\u5177\u6709\u660e\u786e\u5206\u5de5\u7684Agent  </li> <li>\u5efa\u7acb\u4e00\u4e2a\u6d4b\u8bd5\u96c6\u4e0a\u5b8c\u6210\u57fa\u7840\u9a8c\u8bc1  </li> </ol>"},{"location":"final/projects/NJUProject_multiagent/#_3","title":"\u4e09\u3001\u5b9e\u9a8c\u5b9e\u65bd\u8981\u6c42","text":""},{"location":"final/projects/NJUProject_multiagent/#31","title":"3.1 \u5fc5\u505a\u5b9e\u9a8c","text":"<ol> <li> <p>\u57fa\u7840\u529f\u80fd\u9a8c\u8bc1\uff1a    \u2022 \u6210\u529f\u5b8c\u62103\u4e2a\u7aef\u5230\u7aef\u4efb\u52a1\u6d41\u7a0b    \u2022 \u8f93\u51fa\u901a\u4fe1\u65e5\u5fd7\u4e0e\u6267\u884c\u7ed3\u679c  </p> </li> <li> <p>\u7b80\u5355\u5bf9\u6bd4\u5b9e\u9a8c\uff1a    \u2022 \u5bf9\u6bd4\u987a\u5e8f\u6267\u884c\u4e0e\u5e76\u884c\u6267\u884c\u7684\u8017\u65f6\u5dee\u5f02  </p> </li> <li> <p>\u5bb9\u9519\u6d4b\u8bd5\uff1a    \u2022 \u6a21\u62df\u5355\u4e2aAgent\u6545\u969c\u65f6\u7684\u7cfb\u7edf\u8868\u73b0  </p> </li> </ol>"},{"location":"final/projects/NJUProject_multiagent/#32","title":"3.2 \u53ef\u9009\u4f18\u5316\u65b9\u5411","text":"<ol> <li>\u5b9e\u73b0\u7b80\u6613\u7684Agent\u72b6\u6001\u76d1\u63a7\u754c\u9762  </li> <li>\u6dfb\u52a0\u57fa\u4e8e\u89c4\u5219\u7684\u81ea\u52a8\u91cd\u8bd5\u673a\u5236  </li> <li>\u5f00\u53d1\u7b80\u5355\u7684\u8d1f\u8f7d\u5747\u8861\u7b56\u7565  </li> </ol>"},{"location":"final/projects/NJUProject_multiagent/#_4","title":"\u56db\u3001\u63d0\u4ea4\u8981\u6c42","text":""},{"location":"final/projects/NJUProject_multiagent/#41","title":"4.1 \u7b80\u5316\u63d0\u4ea4\u5185\u5bb9","text":"<pre><code>\u251c\u2500\u2500 core/                 # \u6838\u5fc3\u6a21\u5757\n\u2502   \u251c\u2500\u2500 agent_manager.py  \n\u2502   \u2514\u2500\u2500 task_router.py    \n\u251c\u2500\u2500 agents/               # \u5404\u4e2aAgent\u5b9e\u73b0\n\u2502   \u251c\u2500\u2500 agent_A.py  \n\u2502   \u2514\u2500\u2500 agent_B.py        \n\u251c\u2500\u2500 demo/                 \n\u2502   \u251c\u2500\u2500 demo_video.mp4    # \u6f14\u793a\u89c6\u9891  \n\u2502   \u2514\u2500\u2500 test_cases.md     # \u6d4b\u8bd5\u7528\u4f8b      \n\u2514\u2500\u2500 report.pdf           # \u7cbe\u7b80\u62a5\u544a\uff08\u542b\u67b6\u6784\u56fe\uff09\n</code></pre>"},{"location":"final/projects/NJUProject_multiagent/#42","title":"4.2 \u5bbd\u677e\u6027\u80fd\u6307\u6807","text":"\u6307\u6807\u7c7b\u578b \u5408\u683c\u6807\u51c6 \u4efb\u52a1\u5b8c\u6210\u7387 \u226590% \u5e73\u5747\u54cd\u5e94\u65f6\u95f4 \u226460s \u57fa\u7840\u5bb9\u9519 \u4e0d\u5d29\u6e83"},{"location":"final/projects/NJUProject_multiagent/#_5","title":"\u4e94\u3001\u8bc4\u5206\u6807\u51c6","text":"\u8bc4\u5206\u7ef4\u5ea6 \u7ec6\u5219\u8bf4\u660e \u5360\u6bd4 \u529f\u80fd\u5b8c\u6574\u6027 \u57fa\u7840\u534f\u4f5c\u673a\u5236\u5b9e\u73b0\u60c5\u51b5 40% \u4ee3\u7801\u53ef\u8bfb\u6027 \u6a21\u5757\u5212\u5206\u4e0e\u6ce8\u91ca\u8d28\u91cf 30% \u5b9e\u9a8c\u5b8c\u6210\u5ea6 \u57fa\u7840\u6d4b\u8bd5\u4e0e\u5bf9\u6bd4\u5b9e\u9a8c 20% \u62a5\u544a\u8d28\u91cf \u903b\u8f91\u6e05\u6670\u5ea6\u4e0e\u6f14\u793a\u6548\u679c 10%"},{"location":"final/projects/NJUProject_multiagent/#_6","title":"\u516d\u3001\u5b9e\u73b0\u652f\u6301","text":""},{"location":"final/projects/NJUProject_multiagent/#61","title":"6.1 \u793a\u4f8b\u573a\u666f\u5b9e\u73b0\u6b65\u9aa4\uff08\u8ba2\u9910\u52a9\u624b\uff09\uff1a","text":"<ol> <li> <p>\u7528\u6237Agent\uff1a\u63a5\u6536\u7528\u6237\u8f93\u5165\"\u6211\u60f3\u8ba2\u62ab\u8428\"</p> </li> <li> <p>\u9910\u5385Agent\uff1a\u8c03\u7528\u6a21\u62dfAPI\u83b7\u53d6\u9910\u5385\u5217\u8868</p> </li> <li> <p>\u652f\u4ed8Agent\uff1a\u751f\u6210\u6a21\u62df\u652f\u4ed8\u94fe\u63a5</p> </li> <li> <p>\u534f\u540c\u6d41\u7a0b\uff1a  </p> </li> </ol> <pre><code>\u7528\u6237Agent \u2192 \u9910\u5385Agent \u2192 \u652f\u4ed8Agent \u2192 \u7ed3\u679c\u6c47\u603b\n</code></pre>"},{"location":"final/projects/NJUProject_multiagent/#62","title":"6.2 \u8c03\u8bd5\u6280\u5de7","text":"<p>\u2022 \u4f7f\u7528<code>logging</code>\u6a21\u5757\u8bb0\u5f55\u8be6\u7ec6\u901a\u4fe1\u8fc7\u7a0b \u2022 \u5bf9\u6bcf\u4e2aAgent\u5355\u72ec\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5</p>"},{"location":"final/projects/NJUProject_toolagent/","title":"\u667a\u80fd\u5de5\u5177\u8c03\u7528\u4ee3\u7406\u7cfb\u7edf","text":""},{"location":"final/projects/NJUProject_toolagent/#_2","title":"\u4e00\u3001\u4efb\u52a1\u8bf4\u660e","text":""},{"location":"final/projects/NJUProject_toolagent/#11","title":"1.1 \u80cc\u666f\u8981\u6c42","text":"<p>\u5f00\u53d1\u4e00\u4e2a\u5177\u5907\u591a\u5de5\u5177\u534f\u540c\u8c03\u7528\u80fd\u529b\u7684\u667a\u80fd\u4ee3\u7406\u7cfb\u7edf\uff0c\u8981\u6c42\u80fd\u591f\u6839\u636e\u7528\u6237\u9700\u6c42\u81ea\u4e3b\u9009\u62e9\u5e76\u8c03\u7528\u4e0d\u540c\u529f\u80fd\u5de5\u5177\u5b8c\u6210\u590d\u6742\u4efb\u52a1\u3002\u4ee3\u7406\u7cfb\u7edf\u9700\u8981\u5177\u5907\u4ee5\u4e0b\u6838\u5fc3\u80fd\u529b\uff1a</p> <p>\u2022 \u5de5\u5177\u53d1\u73b0\u4e0e\u9009\u62e9</p> <p>\u2022 \u591a\u6b65\u6267\u884c\u89c4\u5212</p> <p>\u2022 \u5f02\u5e38\u5904\u7406\u4e0e\u91cd\u8bd5\u673a\u5236</p> <p>\u2022 \u6267\u884c\u7ed3\u679c\u7efc\u5408\u5904\u7406</p>"},{"location":"final/projects/NJUProject_toolagent/#12","title":"1.2 \u5e94\u7528\u573a\u666f\u793a\u4f8b","text":"<ol> <li>\u5ba2\u670d\u573a\u666f\uff1a\u8c03\u7528\u77e5\u8bc6\u5e93\u68c0\u7d22+\u5de5\u5355\u751f\u6210+\u77ed\u4fe1\u901a\u77e5</li> <li>\u6570\u636e\u5206\u6790\uff1a\u8c03\u7528\u6570\u636e\u5e93\u67e5\u8be2+\u53ef\u89c6\u5316\u751f\u6210+\u62a5\u544a\u6458\u8981</li> <li>\u667a\u80fd\u529e\u516c\uff1a\u90ae\u4ef6\u89e3\u6790+\u65e5\u7a0b\u5b89\u6392+\u4f1a\u8bae\u7eaa\u8981\u751f\u6210</li> </ol>"},{"location":"final/projects/NJUProject_toolagent/#_3","title":"\u4e8c\u3001\u65b9\u6cd5\u8bbe\u8ba1\u8981\u6c42","text":""},{"location":"final/projects/NJUProject_toolagent/#21","title":"2.1 \u6838\u5fc3\u7ec4\u4ef6","text":"\u6a21\u5757 \u529f\u80fd\u8981\u6c42 \u5b9e\u73b0\u5efa\u8bae \u5de5\u5177\u7ba1\u7406\u6a21\u5757 \u652f\u6301\u52a8\u6001\u52a0\u8f7d\u5de5\u5177\u63cf\u8ff0\u6587\u4ef6\uff08JSON Schema\u683c\u5f0f\uff09 \u5b9e\u73b0\u5de5\u5177\u6ce8\u518c/\u6ce8\u9500\u63a5\u53e3 \u8c03\u7528\u51b3\u7b56\u6a21\u5757 \u57fa\u4e8e\u8bed\u4e49\u5339\u914d\u7684\u5de5\u5177\u4f53\u9a8c\u9009\u62e9 \u53ef\u7ed3\u5408Embedding\u68c0\u7d22+\u89c4\u5219\u8fc7\u6ee4 \u6267\u884c\u5f15\u64ce \u652f\u6301\u540c\u6b65/\u5f02\u6b65\u8c03\u7528\u6a21\u5f0f \u5b9e\u73b0\u8c03\u7528\u961f\u5217\u7ba1\u7406 \u7ed3\u679c\u5904\u7406\u5668 \u591a\u5de5\u5177\u8f93\u51fa\u7ed3\u679c\u6574\u5408 \u652f\u6301\u6a21\u7248\u5316\u7ed3\u679c\u751f\u6210"},{"location":"final/projects/NJUProject_toolagent/#22","title":"2.2 \u5fc5\u9009\u5b9e\u73b0\u8981\u6c42","text":"<ol> <li>\u81f3\u5c11\u96c6\u62105\u79cd\u4e0d\u540c\u7c7b\u578b\u5de5\u5177</li> <li>\u5b9e\u73b0\u57fa\u4e8e\u81ea\u7136\u8bed\u8a00\u7684\u5de5\u5177\u8c03\u7528\u53c2\u6570\u81ea\u52a8\u586b\u5145</li> <li>\u652f\u6301\u6267\u884c\u8fc7\u7a0b\u4e2d\u7684\u4e0a\u4e0b\u6587\u8bb0\u5fc6\u673a\u5236</li> </ol>"},{"location":"final/projects/NJUProject_toolagent/#_4","title":"\u4e09\u3001\u5b9e\u9a8c\u5b9e\u65bd\u8981\u6c42","text":""},{"location":"final/projects/NJUProject_toolagent/#31","title":"3.1 \u6d4b\u8bc4\u57fa\u51c6\u8981\u6c42","text":"<p>\u5728\u4ee5\u4e0b\u5f00\u6e90benchmark\u4e2d\u4efb\u9009\u5176\u4e00\u8fdb\u884c\u6d4b\u8bd5\u4f60\u5f00\u53d1\u7684\u7cfb\u7edf\uff1a \u2022 ToolBench\uff08\u5de5\u5177\u8c03\u7528\u51c6\u786e\u6027\u6d4b\u8bc4\uff09 \u2022 AgentBench\uff08\u591a\u6b65\u4efb\u52a1\u5b8c\u6210\u5ea6\u6d4b\u8bc4\uff09 \u2022 API-Bank\uff08\u590d\u6742API\u8c03\u7528\u6d4b\u8bc4\uff09</p>"},{"location":"final/projects/NJUProject_toolagent/#32","title":"3.2 \u5fc5\u505a\u5b9e\u9a8c","text":"<ol> <li>\u57fa\u7ebf\u5bf9\u6bd4\uff1a\u5bf9\u6bd4\u666e\u901aprompt\u4e0e\u601d\u7ef4\u94fe\uff08Chain-of-Thought\uff09\u7684\u8c03\u7528\u6210\u529f\u7387</li> <li>\u5f02\u5e38\u5904\u7406\u5b9e\u9a8c\uff1a\u6a21\u62df\u7f51\u7edc\u8d85\u65f6/API\u9650\u6d41\u7b49\u573a\u666f\u7684\u6062\u590d\u6210\u529f\u7387</li> <li>\u6548\u7387\u6d4b\u8bc4\uff1a\u7edf\u8ba1\u5355\u4efb\u52a1\u5e73\u5747\u8c03\u7528\u6b21\u6570\u4e0e\u8017\u65f6\u5206\u5e03</li> </ol>"},{"location":"final/projects/NJUProject_toolagent/#33","title":"3.3 \u53ef\u9009\u4f18\u5316\u65b9\u5411","text":"<ol> <li>\u57fa\u4e8e\u5de5\u5177\u8c03\u7528\u65e5\u5fd7\u5408\u6210\u8bad\u7ec3\u6570\u636e\uff0c\u5fae\u8c03\u57fa\u7840\u6a21\u578b</li> <li>\u5b9e\u73b0\u5206\u5c42\u7f13\u5b58\u673a\u5236\u4f18\u5316\u8c03\u7528\u5ef6\u8fdf</li> <li>\u8bbe\u8ba1\u5f3a\u5316\u5b66\u4e60\u8bad\u7ec3\u4ee5\u4f18\u5316\u5de5\u5177\u9009\u62e9\u7b56\u7565</li> <li>\u81ea\u5b9a\u4e49</li> </ol>"},{"location":"final/projects/NJUProject_toolagent/#_5","title":"\u56db\u3001\u63d0\u4ea4\u8981\u6c42","text":""},{"location":"final/projects/NJUProject_toolagent/#41","title":"4.1 \u63d0\u4ea4\u5185\u5bb9","text":"<pre><code>\u251c\u2500\u2500 agent_core/            # \u6838\u5fc3\u5b9e\u73b0\n\u251c\u2500\u2500 demo/                  # \u6f14\u793a\u6750\u6599\n\u2502   \u251c\u2500\u2500 demo_video.mp4     # \u529f\u80fd\u6f14\u793a\n\u2502   \u2514\u2500\u2500 test_cases.json    # \u81ea\u6d4b\u7528\u4f8b\u96c6\n\u251c\u2500\u2500 evaluation/            # \u6d4b\u8bc4\u7ed3\u679c\n\u2502   \u251c\u2500\u2500 benchmark_results.csv  \n\u2502   \u2514\u2500\u2500 latency_analysis.png\n\u2514\u2500\u2500 report.pdf             # \u5b9e\u9a8c\u5206\u6790\u62a5\u544a\n</code></pre>"},{"location":"final/projects/NJUProject_toolagent/#42","title":"4.2 \u6027\u80fd\u6307\u6807\u8981\u6c42","text":"\u6307\u6807\u7c7b\u578b \u5408\u683c\u6807\u51c6 \u4efb\u52a1\u5b8c\u6210\u7387 \u226570% \u975e\u6cd5\u8c03\u7528\u7387 \u22645% \u5e73\u5747\u54cd\u5e94\u65f6\u95f4 \u226430s"},{"location":"final/projects/NJUProject_toolagent/#_6","title":"\u4e94\u3001\u8bc4\u5206\u6807\u51c6","text":"\u8bc4\u5206\u7ef4\u5ea6 \u7ec6\u5219\u8bf4\u660e \u5360\u6bd4 \u5e94\u7528\u4ef7\u503c \u5de5\u5177\u96c6\u5b9e\u7528\u6027\u4e0e\u573a\u666f\u5408\u7406\u6027 20% \u6d4b\u8bc4\u7ed3\u679c \u57fa\u51c6\u6d4b\u8bd5\u6307\u6807\u8fbe\u6210\u5ea6 30% \u4ee3\u7801\u8d28\u91cf \u5f02\u5e38\u5904\u7406\u5b8c\u5907\u6027/\u6269\u5c55\u6027\u8bbe\u8ba1 20% \u62a5\u544a\u8d28\u91cf \u95ee\u9898\u5206\u6790\u6df1\u5ea6\u4e0e\u53ef\u89c6\u5316\u8d28\u91cf 20% \u7b97\u6cd5\u521b\u65b0 \u5b9e\u73b0\u53ef\u9009\u4f18\u5316\u65b9\u5411 10%"},{"location":"final/projects/NJUProject_toolagent/#_7","title":"\u516d\u3001\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li>\u5b9e\u73b0\u5efa\u8bae\uff1a</li> </ol> <p>\u2022 \u53ef\u4ee5\u57fa\u4e8e\u5df2\u6709LangChain/Transformers Agents\u7b49\u6846\u67b6\u6269\u5c55</p> <p>\u2022 \u5141\u8bb8\u4f7f\u7528OpenAI\u7b49\u5546\u4e1aAPI\uff0c\u4f46\u9700\u63d0\u4f9b\u672c\u5730\u5316\u66ff\u4ee3\u65b9\u6848</p> <ol> <li>\u786c\u4ef6\u8981\u6c42\uff1a</li> </ol> <p>\u2022 \u6d4b\u8bd5\u73af\u5883\u9700\u4fdd\u8bc1\u22658GB\u5185\u5b58</p> <p>\u2022 \u5141\u8bb8\u4f7f\u7528\u4e91API\u4f46\u9700\u6807\u6ce8\u8c03\u7528\u6210\u672c</p> <ol> <li> <p>\u622a\u6b62\u65e5\u671f\uff1a2025\u5e746\u670815\u65e5 23:59\uff08UTC+8\uff09</p> </li> <li> <p>\u53c2\u8003\u6846\u67b6\uff1a</p> </li> </ol> <p>\u2022 [ToolFormer: https://arxiv.org/abs/2302.04761]</p> <p>\u2022 [LangChain: https://python.langchain.com/]</p>"},{"location":"final/projects/NJU_2025spring_ragprojects/","title":"\u68c0\u7d22\u589e\u5f3a\u751f\u6210\uff08RAG\uff09","text":""},{"location":"final/projects/NJU_2025spring_ragprojects/#rag_1","title":"\u8bfe\u7a0b\u5927\u4f5c\u4e1a\uff1aRAG\u7cfb\u7edf\u5f00\u53d1\u4e0e\u5e94\u7528","text":""},{"location":"final/projects/NJU_2025spring_ragprojects/#_1","title":"\u4e00\u3001\u4efb\u52a1\u8bf4\u660e","text":""},{"location":"final/projects/NJU_2025spring_ragprojects/#11","title":"1.1 \u6838\u5fc3\u76ee\u6807","text":"<p>\u5f00\u53d1\u4e00\u4e2a \u7aef\u5230\u7aefRAG\u7cfb\u7edf\uff0c\u5b9e\u73b0\u4ee5\u4e0b\u529f\u80fd\uff1a - \u77e5\u8bc6\u5e93\u6784\u5efa\uff1a\u4ece\u6587\u672c\u6570\u636e\u4e2d\u63d0\u53d6\u4fe1\u606f\u5e76\u6784\u5efa\u7d22\u5f15\uff0c\u3002 - \u68c0\u7d22\u4e0e\u751f\u6210\uff1a\u7ed3\u5408\u68c0\u7d22\u7ed3\u679c\u4e0eLLM\u751f\u6210\u56de\u7b54\u3002 - \u52a8\u6001\u66f4\u65b0\uff1a\u652f\u6301\u77e5\u8bc6\u5e93\u5b9e\u65f6\u66f4\u65b0\uff08\u5982\u65b0\u589e\u6587\u6863\uff09\u3002 - \u8bc4\u4f30\u4e0e\u4f18\u5316\uff1a\u901a\u8fc7\u5b9e\u9a8c\u5bf9\u6bd4\u4e0d\u540c\u68c0\u7d22\u7b56\u7565\u7684\u6548\u679c\u3002  </p>"},{"location":"final/projects/NJU_2025spring_ragprojects/#12","title":"1.2 \u7b80\u5316\u573a\u666f\u793a\u4f8b","text":"<p>\u53ef\u9009\u533b\u7597\u95ee\u7b54\u3001\u7535\u5546\u5ba2\u670d\u3001\u6cd5\u5f8b\u987e\u95ee\u3001\u79d1\u5b66\u63a2\u7a76\u7b49\u7cfb\u7edf\uff0c\u53ef\u81ea\u884c\u641c\u7d22\u6570\u636e\u96c6\u3002</p>"},{"location":"final/projects/NJU_2025spring_ragprojects/#1","title":"\u573a\u666f1\uff1a\u533b\u7597\u95ee\u7b54\u7cfb\u7edf","text":"<ul> <li>\u7528\u6237\u8f93\u5165\uff1a <pre><code>\"\u6cbb\u7597\u9ad8\u8840\u538b\u7684\u4e00\u7ebf\u836f\u7269\u6709\u54ea\u4e9b\uff1f\"  \n</code></pre></li> <li>\u7cfb\u7edf\u6d41\u7a0b\uff1a  </li> <li>\u68c0\u7d22\u6a21\u5757\uff1a\u4ece\u533b\u5b66\u6307\u5357\u4e2d\u68c0\u7d22\u76f8\u5173\u6bb5\u843d\u3002  </li> <li>\u751f\u6210\u6a21\u5757\uff1a\u7ed3\u5408\u68c0\u7d22\u7ed3\u679c\uff0cLLM\u751f\u6210\u836f\u7269\u5217\u8868\uff08\u5982\u6c28\u6c2f\u5730\u5e73\u3001\u7f2c\u6c99\u5766\uff09\u3002  </li> </ul>"},{"location":"final/projects/NJU_2025spring_ragprojects/#2","title":"\u573a\u666f2\uff1a\u7535\u5546\u5ba2\u670d\u7cfb\u7edf","text":"<ul> <li>\u7528\u6237\u8f93\u5165\uff1a <pre><code>\"\u8fd9\u6b3e\u624b\u673a\u7684\u7535\u6c60\u5bb9\u91cf\u662f\u591a\u5c11\uff1f\"  \n</code></pre></li> <li>\u7cfb\u7edf\u6d41\u7a0b\uff1a  </li> <li>\u68c0\u7d22\u6a21\u5757\uff1a\u4ece\u4ea7\u54c1\u8bf4\u660e\u4e66\u68c0\u7d22\u8be5\u624b\u673a\u7684\u53c2\u6570\u3002  </li> <li>\u751f\u6210\u6a21\u5757\uff1a\u751f\u6210\u56de\u7b54\uff08\u5982\u201c4500mAh\u201d\uff09\u3002  </li> </ul>"},{"location":"final/projects/NJU_2025spring_ragprojects/#_2","title":"\u4e8c\u3001\u6846\u67b6\u8bbe\u8ba1\u8981\u6c42","text":""},{"location":"final/projects/NJU_2025spring_ragprojects/#21","title":"2.1 \u6838\u5fc3\u7ec4\u4ef6","text":"\u6a21\u5757 \u57fa\u7840\u529f\u80fd\u8981\u6c42 \u5b9e\u73b0\u5efa\u8bae \u77e5\u8bc6\u5e93\u7ba1\u7406 \u5b58\u50a8\u6587\u6863\u3001\u6784\u5efa\u5411\u91cf\u7d22\u5f15\u3001\u652f\u6301\u52a8\u6001\u66f4\u65b0\u3002 \u4f7f\u7528 FAISS/Milvus \u7b49\u5b58\u50a8\u5411\u91cf\uff0cSQLite \u8bb0\u5f55\u6587\u6863\u5143\u6570\u636e\u3002 \u68c0\u7d22\u6a21\u5757 \u6839\u636e\u7528\u6237\u67e5\u8be2\u68c0\u7d22\u76f8\u5173\u6587\u6863\u7247\u6bb5\u3002 \u5b9e\u73b0 BM25 \u6216 \u7a20\u5bc6\u5411\u91cf\u68c0\u7d22\uff08\u5982 Sentence-BERT\uff09\u3002 \u751f\u6210\u6a21\u5757 \u7ed3\u5408\u68c0\u7d22\u7ed3\u679c\u751f\u6210\u81ea\u7136\u8bed\u8a00\u56de\u7b54\u3002 \u4f7f\u7528 LLM\uff08\u5982 LLaMA3\u3001Qwen\uff09\uff0c\u53ef\u901a\u8fc7 API \u8c03\u7528\u3002 \u7528\u6237\u63a5\u53e3 \u63a5\u6536\u7528\u6237\u8f93\u5165\u5e76\u8fd4\u56de\u7ed3\u679c\uff0c\u652f\u6301\u547d\u4ee4\u884c\u6216Web\u754c\u9762\u3002 \u4f7f\u7528 FastAPI \u6784\u5efaREST API\uff0c\u6216 Flask \u5b9e\u73b0Web\u754c\u9762\u3002 \u65e5\u5fd7\u8bb0\u5f55\u5668 \u8bb0\u5f55\u67e5\u8be2\u3001\u68c0\u7d22\u7ed3\u679c\u3001\u751f\u6210\u5185\u5bb9\u53ca\u8017\u65f6\u3002 \u4f7f\u7528 Python logging \u7b49\u6a21\u5757\u8f93\u51fa\u5230\u6587\u4ef6\u6216\u63a7\u5236\u53f0\u3002"},{"location":"final/projects/NJU_2025spring_ragprojects/#22","title":"2.2 \u5fc5\u9009\u5b9e\u73b0\u8981\u6c42","text":"<ol> <li>\u77e5\u8bc6\u5e93\u6784\u5efa\uff1a  </li> <li>\u5305\u542b\u5fc5\u8981\u7684\u6587\u6863\uff08\u5982\u533b\u5b66\u6307\u5357\u3001\u4ea7\u54c1\u8bf4\u660e\u4e66\uff09\u3002  </li> <li>\u652f\u6301 PDF/Markdown/\u6587\u672c \u683c\u5f0f\u89e3\u6790\u3002  </li> <li>\u68c0\u7d22\u4e0e\u751f\u6210\uff1a  </li> <li>\u5b9e\u73b0 \u7a20\u5bc6\u5411\u91cf\u68c0\u7d22\uff08\u5982 Sentence-BERT\uff09\u3002  </li> <li>\u652f\u6301 \u751f\u6210\u6a21\u578b\u5fae\u8c03\uff08\u53ef\u9009\uff09\u3002  </li> <li>\u52a8\u6001\u66f4\u65b0\uff1a  </li> <li>\u65b0\u589e\u6587\u6863\u65f6\u81ea\u52a8\u66f4\u65b0\u7d22\u5f15\u3002  </li> </ol>"},{"location":"final/projects/NJU_2025spring_ragprojects/#_3","title":"\u4e09\u3001\u5b9e\u9a8c\u5b9e\u65bd\u8981\u6c42","text":""},{"location":"final/projects/NJU_2025spring_ragprojects/#31","title":"3.1 \u5fc5\u505a\u5b9e\u9a8c","text":""},{"location":"final/projects/NJU_2025spring_ragprojects/#1_1","title":"1. \u57fa\u7840\u529f\u80fd\u9a8c\u8bc1","text":"<ul> <li>\u81ea\u4e3b\u6784\u5efa\u6d4b\u8bd5\u7528\u4f8b\u793a\u4f8b\uff1a  </li> </ul> <p><pre><code>\u8f93\u5165\uff1a\"\u7cd6\u5c3f\u75c5\u7684\u5178\u578b\u75c7\u72b6\u6709\u54ea\u4e9b\uff1f\"  \n\u9884\u671f\u8f93\u51fa\uff1a\u68c0\u7d22\u5230\u6307\u5357\u7247\u6bb5 + LLM\u751f\u6210\u7684\u75c7\u72b6\u5217\u8868\uff08\u5982\u591a\u996e\u3001\u591a\u5c3f\u3001\u4f53\u91cd\u4e0b\u964d\uff09\u3002  \n</code></pre> - \u9a8c\u8bc1\u70b9\uff1a  </p> <ul> <li>\u68c0\u7d22\u7ed3\u679c\u662f\u5426\u76f8\u5173\u3002  </li> <li>\u751f\u6210\u56de\u7b54\u662f\u5426\u51c6\u786e\u3002  </li> </ul>"},{"location":"final/projects/NJU_2025spring_ragprojects/#2_1","title":"2. \u68c0\u7d22\u7b56\u7565\u5bf9\u6bd4\u5b9e\u9a8c","text":"<ul> <li>\u5bf9\u6bd4BM25\u4e0e\u5411\u91cf\u68c0\u7d22\uff1a  </li> <li>\u573a\u666f\uff1a\u540c\u4e00\u67e5\u8be2\u4e0b\uff0c\u7edf\u8ba1\u4e24\u79cd\u65b9\u6cd5\u7684 Top-5\u68c0\u7d22\u7ed3\u679c\u76f8\u5173\u6027\u3002  </li> <li>\u8f93\u51fa\u5bf9\u6bd4\u8868\u683c\uff08\u5982\u51c6\u786e\u7387\u3001\u8017\u65f6\uff09\u3002  </li> </ul>"},{"location":"final/projects/NJU_2025spring_ragprojects/#3","title":"3. \u77e5\u8bc6\u5e93\u66f4\u65b0\u5b9e\u9a8c","text":"<ul> <li>\u6a21\u62df\u573a\u666f\uff1a  </li> <li>\u65b0\u589e\u4e00\u7bc7\u6587\u6863\u540e\uff0c\u9a8c\u8bc1\u7cfb\u7edf\u80fd\u5426\u68c0\u7d22\u5230\u65b0\u5185\u5bb9\u3002  </li> </ul>"},{"location":"final/projects/NJU_2025spring_ragprojects/#32","title":"3.2 \u53ef\u9009\u4f18\u5316\u65b9\u5411","text":"<ol> <li>\u591a\u6a21\u6001\u652f\u6301\uff1a  </li> <li>\u6dfb\u52a0\u56fe\u50cf\u68c0\u7d22\uff08\u5982\u5206\u6790CT\u5f71\u50cf\uff0c\u9700\u8c03\u7528 CLIP \u6a21\u578b\uff09\u3002  </li> <li>\u7d22\u5f15\u4f18\u5316\uff1a  </li> <li>\u5b9e\u73b0\u589e\u91cf\u66f4\u65b0\uff08\u65e0\u9700\u91cd\u65b0\u6784\u5efa\u6574\u4e2a\u7d22\u5f15\uff09\u3002  </li> <li>\u751f\u6210\u8d28\u91cf\u63d0\u5347\uff1a  </li> <li>\u5bf9LLM\u8fdb\u884c\u5fae\u8c03\uff08\u5982\u533b\u7597\u9886\u57df\u6307\u4ee4\u5fae\u8c03\uff09\u3002  </li> </ol>"},{"location":"final/projects/NJU_2025spring_ragprojects/#_4","title":"\u56db\u3001\u63d0\u4ea4\u8981\u6c42","text":""},{"location":"final/projects/NJU_2025spring_ragprojects/#41","title":"4.1 \u76ee\u5f55\u7ed3\u6784","text":"<pre><code>\u251c\u2500\u2500 core/                 # \u6838\u5fc3\u6a21\u5757\n\u2502   \u251c\u2500\u2500 rag_engine.py     # RAG\u6838\u5fc3\u903b\u8f91\uff08\u68c0\u7d22+\u751f\u6210\uff09\n\u2502   \u251c\u2500\u2500 knowledge_base.py # \u77e5\u8bc6\u5e93\u7ba1\u7406\u4e0e\u7d22\u5f15\u6784\u5efa\n\u2502   \u2514\u2500\u2500 utils.py          # \u8f85\u52a9\u5de5\u5177\uff08\u5982\u6587\u6863\u89e3\u6790\u3001\u65e5\u5fd7\uff09\n\u251c\u2500\u2500 data/                 # \u77e5\u8bc6\u5e93\u6587\u4ef6\u5939\n\u2502   \u251c\u2500\u2500 medical_guidelines/ # \u533b\u5b66\u6307\u5357\n\u2502   \u2514\u2500\u2500 product_manuals/  # \u4ea7\u54c1\u8bf4\u660e\u4e66\n\u251c\u2500\u2500 demo/                 \n\u2502   \u251c\u2500\u2500 demo.mp4          # \u7cfb\u7edf\u6f14\u793a\u89c6\u9891\uff083\u5206\u949f\u5185\uff09\n\u2502   \u2514\u2500\u2500 test_cases.md     # \u6d4b\u8bd5\u7528\u4f8b\u4e0e\u7ed3\u679c\n\u251c\u2500\u2500 logs/                 # \u8fd0\u884c\u65e5\u5fd7\u6587\u4ef6\u5939\n\u2514\u2500\u2500 report.pdf            # \u62a5\u544a\uff08\u542b\u67b6\u6784\u56fe\u3001\u5b9e\u9a8c\u6570\u636e\u3001\u4ee3\u7801\u8bf4\u660e\uff09\n</code></pre>"},{"location":"final/projects/NJU_2025spring_ragprojects/#42","title":"4.2 \u6027\u80fd\u6307\u6807","text":"\u6307\u6807 \u5408\u683c\u6807\u51c6 \u77e5\u8bc6\u5e93\u68c0\u7d22\u51c6\u786e\u7387 \u226585%\uff08\u6d4b\u8bd5\u7528\u4f8b\u547d\u4e2d\u76f8\u5173\u6587\u6863\uff09 \u4efb\u52a1\u5b8c\u6210\u7387 \u226590%\uff08\u6d4b\u8bd5\u7528\u4f8b\u901a\u8fc7\u7387\uff09 \u5e73\u5747\u54cd\u5e94\u65f6\u95f4 \u226460\u79d2\uff08\u7aef\u5230\u7aef\u4efb\u52a1\uff09"},{"location":"final/projects/NJU_2025spring_ragprojects/#_5","title":"\u4e94\u3001\u8bc4\u5206\u6807\u51c6","text":"\u7ef4\u5ea6 \u7ec6\u5219\u8bf4\u660e \u5360\u6bd4 \u529f\u80fd\u5b8c\u6574\u6027 \u77e5\u8bc6\u5e93\u6784\u5efa\u3001\u68c0\u7d22\u4e0e\u751f\u6210\u3001\u52a8\u6001\u66f4\u65b0\u7b49\u6838\u5fc3\u529f\u80fd\u5b9e\u73b0\u3002 40% \u4ee3\u7801\u53ef\u8bfb\u6027 \u6a21\u5757\u5212\u5206\u6e05\u6670\u3001\u6ce8\u91ca\u89c4\u8303\u3001\u9075\u5faaPEP8\u89c4\u8303\u3002 30% \u5b9e\u9a8c\u5b8c\u6210\u5ea6 \u57fa\u7840\u6d4b\u8bd5\u3001\u68c0\u7d22\u7b56\u7565\u5bf9\u6bd4\u5b9e\u9a8c\u3001\u77e5\u8bc6\u5e93\u66f4\u65b0\u5b9e\u9a8c\u7684\u5b8c\u6574\u6027\u548c\u6570\u636e\u5408\u7406\u6027\u3002 20% \u62a5\u544a\u8d28\u91cf \u67b6\u6784\u56fe\u6e05\u6670\u3001\u5b9e\u9a8c\u5206\u6790\u903b\u8f91\u4e25\u8c28\u3001\u6f14\u793a\u89c6\u9891\u5b8c\u6574\u3002 10%"},{"location":"final/projects/NJU_2025spring_ragprojects/#_6","title":"\u516d\u3001\u5b9e\u73b0\u652f\u6301","text":""},{"location":"final/projects/NJU_2025spring_ragprojects/#_7","title":"\u5b9e\u73b0\u6b65\u9aa4\uff08\u533b\u7597\u95ee\u7b54\u7cfb\u7edf\u793a\u4f8b\uff09","text":"<ol> <li> <p>\u77e5\u8bc6\u5e93\u6784\u5efa\uff1a  </p> </li> <li> <p>\u6536\u96c6\u533b\u5b66\u6307\u5357\uff08\u5982\u300aWHO\u7cd6\u5c3f\u75c5\u8bca\u7597\u89c4\u8303\u300b\uff09\uff0c\u4f7f\u7528 PyPDF2 \u89e3\u6790PDF\u3002  </p> </li> <li>\u4f7f\u7528 Sentence-BERT \u6784\u5efa\u5411\u91cf\u7d22\u5f15\u5e76\u5b58\u50a8\u5230 FAISS\u3002  </li> <li>RAG\u6d41\u7a0b\uff1a <pre><code>class RAGSystem:\n    def __init__(self):\n        self.kb = KnowledgeBase()\n        self.llm = LLMClient()  # LLM API\u5ba2\u6237\u7aef\n\n    def query(self, user_input):\n        # \u68c0\u7d22\n        docs = self.kb.retrieve(user_input, top_k=5)\n        # \u751f\u6210\n        context = \"\\n\".join([doc.text for doc in docs])\n        prompt = f\"\u6839\u636e\u4ee5\u4e0b\u4fe1\u606f\u56de\u7b54\u95ee\u9898\uff1a\\n{context}\\n\\n\u95ee\u9898\uff1a{user_input}\"\n        response = self.llm.generate(prompt)\n        return response\n</code></pre></li> <li>\u52a8\u6001\u66f4\u65b0\uff1a <pre><code># \u65b0\u589e\u6587\u6863\u65f6\u81ea\u52a8\u66f4\u65b0\u7d22\u5f15\ndef add_document(self, doc_path):\n    text = parse_document(doc_path)\n    vectors = embedder.encode(text)\n    self.kb.add_to_index(vectors, text)\n</code></pre></li> </ol>"},{"location":"final/projects/NJU_2025spring_ranking/","title":"\u57fa\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\u7684\u96f6\u6837\u672c\u6587\u6863\u6392\u5e8f","text":"<p>\u672c\u6b21\u4f5c\u4e1a\u4efb\u52a1\u8981\u6c42\u5229\u7528\u5927\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u8fdb\u884c\u96f6\u6837\u672c\uff08zero-shot\uff09\u6587\u6863\u6392\u5e8f\uff0c\u8be5\u4efb\u52a1\u662f\u7ed9\u5b9a\u4e00\u4e2a\u6587\u6863\u5728\u4e00\u7cfb\u5217\u6587\u6863\u4e2d\u627e\u5230\u8ddf\u5176\u6700\u76f8\u4f3c\u7684\u3002\u5177\u4f53\u5730\uff0c\u4efb\u52a1\u4e3b\u8981\u662f\u5728BM25\u521d\u7b5b\u7ed3\u679c\u7684\u57fa\u7840\u4e0a\uff0c\u5229\u7528LLM\u8fdb\u884c\u96f6\u6837\u672c\u7684\u6392\u5e8f\u3002\u4f60\u9700\u8981\u5728\u63d0\u9ad8\u6392\u5e8f\u6548\u679c\u7684\u540c\u65f6\uff0c\u8003\u8651LLM\u63a8\u7406\u7684\u8ba1\u7b97\u5f00\u9500\u548c\u6210\u672c\u4e4b\u95f4\u7684\u5e73\u8861\u3002</p>"},{"location":"final/projects/NJU_2025spring_ranking/#_2","title":"\u4e00\u3001\u80cc\u666f\u8981\u6c42","text":"<p>\u968f\u7740\u4fe1\u606f\u68c0\u7d22\u9886\u57df\u7684\u53d1\u5c55\uff0c\u4f20\u7edf\u7684BM25\u867d\u7136\u5728\u6587\u672c\u5339\u914d\u65b9\u9762\u5177\u6709\u8f83\u9ad8\u6548\u7387\uff0c\u4f46\u5728\u6df1\u5c42\u8bed\u4e49\u7406\u89e3\u4e0a\u5b58\u5728\u4e00\u5b9a\u5c40\u9650\u3002\u5229\u7528LLM\u5bf9\u5019\u9009\u6587\u6863\u8fdb\u884c\u91cd\u6392\u5e8f\uff0c\u53ef\u4ee5\u6355\u6349\u6587\u6863\u4e0e\u67e5\u8be2\u4e4b\u95f4\u590d\u6742\u7684\u8bed\u4e49\u5173\u8054\uff0c\u4ece\u800c\u8fdb\u4e00\u6b65\u63d0\u5347\u6392\u5e8f\u6027\u80fd\u3002\u7136\u800c\uff0c\u7531\u4e8eLLM\u6a21\u578b\uff08\u4f8b\u5982flan-t5-large\uff09\u7684\u8ba1\u7b97\u6210\u672c\u8f83\u9ad8\uff0c\u5982\u4f55\u5728\u6392\u5e8f\u6548\u679c\u548c\u63a8\u7406\u5f00\u9500\u4e4b\u95f4\u8fdb\u884c\u5408\u7406\u6743\u8861\u6210\u4e3a\u672c\u4efb\u52a1\u7684\u7814\u7a76\u91cd\u70b9\u3002</p>"},{"location":"final/projects/NJU_2025spring_ranking/#_3","title":"\u4e8c\u3001\u6392\u5e8f\u65b9\u6cd5\u4ecb\u7ecd","text":"<p>\u672c\u4f5c\u4e1a\u4e2d\u4e3b\u8981\u8ba8\u8bbaListwise\u4e0ePairwise\u4e24\u7c7b\u6392\u5e8f\u65b9\u6cd5\uff0c\u8fd9\u4e24\u79cd\u65b9\u6cd5\u91c7\u7528\u4e0d\u540c\u7684\u63d0\u793a\u7b56\u7565\u6765\u6307\u5bfcLLM\u8f93\u51fa\u6bcf\u4e2a\u5019\u9009\u6587\u6863\u7684\u76f8\u5173\u6027\u4f30\u8ba1\uff0c\u5e76\u76f8\u5e94\u5730\u5bf9\u6587\u6863\u8fdb\u884c\u6392\u5e8f\u3002\u5176\u4e2dpairwise\u9700\u8981\u9010\u6b21\u5730\u505a\u4e24\u4e2a\u6587\u6863\u6216\u8005\u6bb5\u843d\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ece\u800c\u7ed9\u6240\u6709\u5019\u9009\u6587\u6863\u6216\u8005\u6bb5\u843d\u4e00\u4e2a\u5206\u6570\u3002\u7531\u4e8e\u5176\u8fdb\u884c\u4e86\u5e7f\u6cdb\u7684\u6bd4\u8f83\uff0c\u5f80\u5f80\u5177\u6709\u826f\u597d\u7684\u6027\u80fd\u4f46\u5f00\u9500\u8f83\u5927\u3002\u800clistwise\u628a\u6240\u6709\u6587\u6863\u6216\u8005\u6bb5\u843d\u4e00\u6b21\u6027\u8f93\u5165\uff0c\u4ece\u800c\u51cf\u8f7b\u4e86\u5f00\u9500\uff0c\u4f46\u5f80\u5f80\u6027\u80fd\u4e00\u822c\u3002</p>"},{"location":"final/projects/NJU_2025spring_ranking/#_4","title":"\u4e09\u3001\u4efb\u52a1\u63cf\u8ff0","text":"<p>\u672c\u6b21\u5b9e\u9a8c\u91c7\u7528 TREC DL19 Dataset\uff0c\u4f5c\u4e1a\u4efb\u52a1\u5206\u4e3a\u4e24\u4e2a\u4efb\u52a1\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a</p>"},{"location":"final/projects/NJU_2025spring_ranking/#31-604020","title":"3.1 \u7b80\u5355\u4efb\u52a1\uff0860\u5206=\u7ed3\u679c\u51c6\u786e\u602740\u5206+\u62a5\u544a\u8d28\u91cf20\u5206\uff09","text":"<ul> <li>\u4efb\u52a1\u5185\u5bb9\uff1a  </li> <li>Listwise\uff1a\u5b8c\u6210rerank\u51fd\u6570\uff0c\u5b9e\u73b0listwise\u65b9\u6cd5\u3002</li> <li>Pairwise\uff1a\u5b9e\u73b0Bubble\u3001Heapsort\u548cAllPair\u4e09\u79cd\u7b56\u7565\uff0c\u5176\u4e2dBubble\u548cHeapsort\u4f7f\u7528\u5927\u6a21\u578b\u7684<code>compare</code>\u51fd\u6570\u8fdb\u884c\u76f8\u90bb\u6587\u6863\u6216\u5806\u4e2d\u5143\u7d20\u7684\u6bd4\u8f83\uff1bAllPair\u65b9\u6cd5\u4e2d\uff0c\u5bf9\u6240\u6709\u6587\u6863\u4e24\u4e24\u8fdb\u884c\u6bd4\u8f83\uff0c\u7136\u540e\u4f7f\u7528\u7b80\u5355\u805a\u5408\u65b9\u5f0f\uff08\u80dc\u8005\u5f971\u5206\uff0c\u8d25\u8005\u4e0d\u5f97\u5206\uff0c\u5e73\u5c40\u5f970.5\u5206\uff09\u5f97\u5230\u6700\u7ec8\u6392\u5e8f\u7ed3\u679c\u3002</li> </ul>"},{"location":"final/projects/NJU_2025spring_ranking/#32-40201010","title":"3.2 \u8fdb\u9636\u4efb\u52a1 \uff0840\u5206=\u521b\u65b0\u602720\u5206+\u6027\u80fd10\u5206+\u62a5\u544a\u8d28\u91cf10\u5206\uff09","text":"<p>\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e00\u79cd\u521b\u65b0\u7684\u6587\u6863\u91cd\u6392\u5e8f\u7b97\u6cd5\uff0c\u8981\u6c42\uff1a   1. \u7b97\u6cd5\u5728\u6392\u5e8f\u6027\u80fd\u4e0a\u5fc5\u987b\u8d85\u8d8aAllPair\u65b9\u6cd5\uff0c\u6216\u5728\u4fdd\u6301\u8f83\u597d\u6392\u5e8f\u6548\u679c\u7684\u524d\u63d0\u4e0b\u663e\u8457\u964d\u4f4e\u8ba1\u7b97\u5f00\u9500\uff1b   2. \u7b97\u6cd5\u8bbe\u8ba1\u5fc5\u987b\u4e3a\u539f\u521b\uff0c\u4e25\u7981\u6284\u88ad\u5df2\u6709\u8bba\u6587\u65b9\u6cd5\u3002</p>"},{"location":"final/projects/NJU_2025spring_ranking/#_5","title":"\u56db\u3001\u63d0\u4ea4\u8981\u6c42","text":"<p>\u63d0\u4ea4\u5185\u5bb9\u5305\u62ec\uff1a</p> <ol> <li> <p>\u5b8c\u6574\u4ee3\u7801\u6587\u4ef6\uff1a\u5c06\u6240\u6709\u4ee3\u7801\u6587\u4ef6\u6253\u5305\u63d0\u4ea4\uff0c\u5305\u542b\u5b9e\u73b0Listwise\u4e0ePairwise\u65b9\u6cd5\u4ee5\u53ca\u8fdb\u9636\u4efb\u52a1\u7684\u4ee3\u7801\u3002</p> </li> <li> <p>\u5b9e\u9a8c\u62a5\u544a\uff08PDF\uff09</p> </li> </ol>"},{"location":"final/projects/NJU_2025spring_ranking/#_6","title":"\u4e94\u3001\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li> <p>\u53c2\u8003\u6587\u732e\uff1a</p> <ul> <li>\u5982\u679c\u4f60\u5728\u5b9e\u9a8c\u548c\u62a5\u544a\u4e2d\u53c2\u8003\u4e86\u5df2\u53d1\u8868\u7684\u6587\u732e\uff0c\u8bf7\u5217\u51fa\u4f60\u6240\u53c2\u8003\u7684\u76f8\u5173\u6587\u732e\u3002</li> </ul> </li> <li> <p>\u6211\u4eec\u63d0\u4f9b\u4e86\u90e8\u5206\u4ee3\u7801\u548c\u6570\u636e\uff0c\u53ef\u4ee5\u57fa\u4e8e\u6211\u4eec\u7684\u4ee3\u7801\u8fdb\u884c\u5b9e\u73b0\u3002</p> </li> <li> <p>\u5982\u6709\u7591\u95ee\uff0c\u8bf7\u8054\u7cfb chengzf@smail.nju.edu.cn\u3002</p> </li> </ol>"},{"location":"final/projects/NJU_DL2025_project_RL/","title":"\u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5c0f\u6e38\u620f\u5b9e\u73b0","text":"<p>\u672c\u5927\u4f5c\u4e1a\u65e8\u5728\u8ba9\u5927\u5bb6\u52a8\u624b\u5b9e\u73b0\u5e76\u6d4b\u8bd5\u6df1\u5ea6\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5\uff0c\u5728\u7ecf\u5178\u7684 Lunar Lander \u73af\u5883\u4e2d\u8fdb\u884c\u5b9e\u9a8c\u3002\u6587\u6863\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u4efb\u52a1\u8981\u6c42\u3001\u7b97\u6cd5\u8bbe\u8ba1\u89c4\u8303\u3001\u5b9e\u9a8c\u5b9e\u65bd\u8981\u6c42\u3001\u63d0\u4ea4\u8981\u6c42\u53ca\u6ce8\u610f\u4e8b\u9879\u3002</p>"},{"location":"final/projects/NJU_DL2025_project_RL/#1","title":"1. \u4efb\u52a1\u8bf4\u660e","text":"<p>\u672c\u6b21\u4f5c\u4e1a\u7684\u4e3b\u8981\u76ee\u6807\u662f\u8981\u6c42\u5927\u5bb6\u5b9e\u73b0\u4ee5\u4e0b\u4e24\u7c7b\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5\uff1a</p> <ul> <li>Policy Gradient (\u7b56\u7565\u68af\u5ea6) </li> <li> <p>\u57fa\u7840\u5b9e\u73b0\uff0c\u8981\u6c42\u5927\u5bb6\u5229\u7528\u7b56\u7565\u68af\u5ea6\u65b9\u6cd5\u6765\u83b7\u5f97\u57fa\u7840\u6210\u7ee9\u3002</p> </li> <li> <p>Actor-Critic (\u6f14\u5458-\u8bc4\u8bba\u5bb6) </p> </li> <li>\u8981\u6c42\u72ec\u7acb\u5b9e\u73b0\u6b64\u7b97\u6cd5\u4ee5\u4e89\u53d6\u66f4\u9ad8\u5206\u6570\u3002</li> </ul> <p>\u73af\u5883\u9009\u7528 OpenAI Gym \u7684 Lunar Lander-v2\u3002\u4efb\u52a1\u4e2d\u8981\u6c42\u5bf9\u72b6\u6001\u3001\u52a8\u4f5c\u548c\u5956\u52b1\u8fdb\u884c\u5408\u7406\u8bbe\u8ba1\u4e0e\u5904\u7406\uff0c\u5e76\u4e14\u6b63\u786e\u8ba1\u7b97\u6298\u6263\u5956\u52b1\u3002\u4f8b\u5982\uff0c\u5728\u7b56\u7565\u68af\u5ea6\u4e2d\uff0c\u6bcf\u4e2a\u65f6\u523b\u7684\u7d2f\u8ba1\u56de\u62a5\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a  </p> <p>\u00a0\u00a0\u00a0\u00a0R\u2081 = r\u2081 + \u03b3\u00b7r\u2082 + \u03b3\u00b2\u00b7r\u2083 \u00a0\u00a0\u00a0\u00a0R\u2082 = r\u2082 + \u03b3\u00b7r\u2083 \u00a0\u00a0\u00a0\u00a0R\u2083 = r\u2083 \u00a0\u00a0\u00a0\u00a0(\u5176\u4e2d \u03b3 = 0.99)</p>"},{"location":"final/projects/NJU_DL2025_project_RL/#2","title":"2. \u65b9\u6cd5\u8bbe\u8ba1\u89c4\u8303","text":"<p>\u9700\u5b9e\u73b0\u81f3\u5c11\u4e24\u79cd\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5\u5e76\u8fdb\u884c\u5bf9\u6bd4</p> <ul> <li>Policy Gradient</li> <li> <p>\u7b97\u6cd5\u6d41\u7a0b\u56fe\uff1a   </p> </li> <li> <p>Actor-Critic (\u6f14\u5458-\u8bc4\u8bba\u5bb6) </p> </li> <li> <p>\u7b97\u6cd5\u6d41\u7a0b\u56fe\uff1a   </p> </li> <li> <p>\u5176\u4ed6\u5148\u8fdb\u7684RL\u7b97\u6cd5</p> </li> <li>\u4f8b\u5982REINFORCE\u3001Q Actor-Critic\u3001A2C\u3001A3C \u7b49</li> </ul> <p>\u4e3a\u786e\u4fdd\u5927\u5bb6\u7684\u4ee3\u7801\u5177\u6709\u826f\u597d\u7684\u53ef\u8bfb\u6027\u548c\u6269\u5c55\u6027\uff0c\u8bf7\u6ce8\u610f\u4ee5\u4e0b\u8bbe\u8ba1\u89c4\u8303\uff1a</p> <ul> <li>\u4ee3\u7801\u7ed3\u6784\u89c4\u8303\uff1a</li> <li>\u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u5404\u4e2a\u529f\u80fd\u5c01\u88c5\u4e3a\u72ec\u7acb\u7684\u51fd\u6570\u6216\u7c7b\u3002</li> <li>\u6ce8\u91ca\u8981\u6e05\u6670\uff0c\u7279\u522b\u662f\u5728\u5173\u952e\u7b97\u6cd5\u90e8\u5206\uff08\u5982\u7b56\u7565\u66f4\u65b0\u3001\u503c\u51fd\u6570\u4f30\u8ba1\uff09\u7684\u903b\u8f91\u548c\u53c2\u6570\u542b\u4e49\u3002</li> </ul>"},{"location":"final/projects/NJU_DL2025_project_RL/#3","title":"3. \u5b9e\u9a8c\u5b9e\u65bd\u8981\u6c42","text":"<ul> <li>\u5b9e\u9a8c\u5e73\u53f0\u5efa\u8bae\uff1a</li> <li>\u63a8\u8350\u4f7f\u7528pytorch\u6846\u67b6\u548copenai gym\u73af\u5883\u8fdb\u884c\u5b9e\u9a8c\u3002  </li> <li> <p>\u6ce8\u610f\uff1a\u5982\u4f7f\u7528\u5176\u4ed6\u73af\u5883\uff0c\u8bf7\u81ea\u884c\u786e\u4fdd\u4ee3\u7801\u7ed3\u679c\u53ef\u590d\u73b0\u3002  </p> </li> <li> <p>\u5b9e\u9a8c\u65f6\u95f4\u9650\u5236\uff1a</p> </li> <li> <p>\u8bf7\u786e\u4fdd\u5b9e\u9a8c\u8bad\u7ec3\u8fc7\u7a0b\u80fd\u572830\u5206\u949f\u5185\u5b8c\u6210\u3002</p> </li> <li> <p>\u8bc4\u4f30\u6307\u6807\uff1a</p> </li> <li> <p>\u7d2f\u8ba1\u5956\u52b1 (Episode Reward)\uff1a\u6bcf\u4e2a episode \u7684\u603b\u5956\u52b1\u503c\u3002</p> </li> <li> <p>\u5e73\u5747\u5956\u52b1 (Average Reward)\uff1a\u5728\u82e5\u5e72 episode \u4e0a\u7684\u5e73\u5747\u5956\u52b1\uff0c\u7528\u4e8e\u53cd\u6620\u6574\u4f53\u6027\u80fd\u3002</p> </li> <li> <p>\u6210\u529f\u7387 (Success Rate)\uff1a\u8fbe\u5230\u4efb\u52a1\u6210\u529f\u72b6\u6001\uff08\u4f8b\u5982\u5b89\u5168\u7740\u9646\uff09\u7684\u6bd4\u4f8b\u3002</p> </li> <li> <p>\u6536\u655b\u901f\u5ea6 (Convergence Speed)\uff1a\u8fbe\u5230\u9884\u8bbe\u5956\u52b1\u6807\u51c6\u6240\u9700\u7684 episode \u6570\u76ee\u3002</p> </li> <li> <p>\u5956\u52b1\u6807\u51c6\u5dee (Reward Std)\uff1a\u5956\u52b1\u5206\u5e03\u7684\u79bb\u6563\u7a0b\u5ea6\uff0c\u53cd\u6620\u7b97\u6cd5\u7a33\u5b9a\u6027\u3002</p> </li> </ul>"},{"location":"final/projects/NJU_DL2025_project_RL/#4","title":"4. \u63d0\u4ea4\u8981\u6c42","text":"<p>\u4f5c\u4e1a\u9700\u8981\u6309\u7167\u4e0b\u5217\u8981\u6c42\u63d0\u4ea4\u5bf9\u5e94\u7684\u6587\u4ef6\u548c\u62a5\u544a\uff1a</p> <ul> <li>Python\u4ee3\u7801\u6587\u4ef6\uff0830%\uff09\uff1a</li> <li> <p>\u5b8c\u6574\u80fd\u8fd0\u884c\u7684\u4ee3\u7801\uff0c\u5305\u62ecPolicy Gradient\u4e0e\u8fdb\u9636\u7b97\u6cd5\u7684\u5b9e\u73b0\u3002</p> </li> <li> <p>\u5b9e\u9a8c\u62a5\u544a\uff0870%\uff09\uff1a</p> </li> <li> <p>\u62a5\u544a\u9700\u8981\u5305\u62ec\u5982\u4e0b\u5185\u5bb9\uff1a</p> <ul> <li>\u4f60\u6240\u9009\u62e9\u5e76\u5b9e\u73b0\u7684\u8fdb\u9636RL\u7b97\u6cd5\uff0c\u5bf9\u6bd4\u57fa\u7840Policy Gradient\u65b9\u6cd5\u7684\u4e0d\u540c\u4e4b\u5904\uff1b</li> <li>\u5bf9\u4f60\u7b97\u6cd5\u5b9e\u73b0\u7ec6\u8282\u7684\u8be6\u7ec6\u63cf\u8ff0\uff1b</li> <li>\u4f60\u6240\u5b9e\u73b0\u7684\u7b97\u6cd5\u57285\u79cd\u8bc4\u4f30\u6307\u6807\u4e0b\u7684\u6027\u80fd\uff1b</li> <li>\u9605\u8bfb InstructGPT \u8bba\u6587\uff0c\u56de\u7b54\u4ee5\u4e0b\u95ee\u9898\uff1a</li> <li>\u5728RL\u8bad\u7ec3\u4e2d\uff0c\u201cPPO-ptx\u201d\u4e0e\u201cPPO\u201d\u7684\u76ee\u6807\u51fd\u6570\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f</li> <li>\u76f8\u6bd4\u4e8e\u201cPPO\u201d\uff0c\u4f7f\u7528\u201cPPO-ptx\u201d\u7684\u6f5c\u5728\u4f18\u52bf\u662f\u4ec0\u4e48\uff1f</li> <li>\u8bf7\u4ece\u76ee\u6807\u51fd\u6570\u7684\u89d2\u5ea6\uff0c\u5bf9\u201cPPO-ptx\u201d\u4e0e\u201cPPO\u201d\u7b97\u6cd5\u8fdb\u884c\u8be6\u7ec6\u5206\u6790\u3002</li> </ul> </li> <li> <p>\u622a\u6b62\u65e5\u671f\uff1a</p> </li> <li> <p>\u4ee5\u8bfe\u7a0b\u7f51\u7ad9\u4e0a\u7684\u65e5\u671f\u4e3a\u51c6</p> </li> <li> <p>\u53c2\u8003\u8d44\u6599\u4e0e\u94fe\u63a5\uff1a</p> </li> <li>OpenAI Gym - LunarLander-v2</li> <li>InstructGPT \u8bba\u6587</li> </ul> <p>\u5e0c\u671b\u5927\u5bb6\u901a\u8fc7\u672c\u6b21\u5927\u4f5c\u4e1a\u80fd\u5bf9\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5\u6709\u66f4\u6df1\u5165\u7684\u7406\u89e3\uff0c\u671f\u5f85\u4f60\u4eec\u51fa\u8272\u7684\u5b9e\u73b0\u548c\u521b\u65b0\uff01 \u5982\u6709\u7591\u95ee\uff0c\u6b22\u8fce\u968f\u65f6\u5728\u8ba8\u8bbaqq\u7fa4\u63d0\u95ee\u6216\u53d1\u9001\u90ae\u4ef6\u81f3554872480@qq.com\u3002</p> <p>Happy Reinforcement Learning!</p>"},{"location":"final/projects/NJU_DL2025_project_diffusion/","title":"\u57fa\u4e8e\u6269\u6563\u6a21\u578b\u7684\u4e2a\u6027\u5316\u56fe\u50cf\u751f\u6210","text":""},{"location":"final/projects/NJU_DL2025_project_diffusion/#_2","title":"\u4e00\u3001\u4efb\u52a1\u8bf4\u660e","text":"<p>\u672c\u6b21\u8bfe\u7a0b\u5927\u4f5c\u4e1a\u8981\u6c42\u4f60\u9009\u53d6 Hugging Face \u4e0a\u5df2\u6709\u7684\u4e00\u4e2a\u6269\u6563\u6a21\u578b\uff08Diffusion Model\uff09\uff0c\u5b8c\u6210\u4e00\u4e2a\u4e2a\u6027\u5316\u751f\u6210\u4efb\u52a1\uff08Personalized Image Generation\uff09\u3002\u4f8b\u5982\uff1a</p> <ul> <li>Prompt 1: a man with a beard and a white shirt.</li> <li>Prompt 2: a man wears a tank top and blazer.</li> </ul> <p>\u5728\u9ed8\u8ba4\u8bbe\u7f6e\u4e0b\uff0c\u8fd9\u4e24\u4e2a\u63d0\u793a\u8bed\u53ef\u80fd\u4f1a\u751f\u6210\u4e24\u4e2a\u968f\u673a\u7684\u7537\u6027\u9762\u5b54\u3002\u4f46\u5982\u679c\u4f60\u8fdb\u884c\u4e2a\u6027\u5316\u5efa\u6a21\uff0c\u4f8b\u5982\u5c06\u76ee\u6807\u4eba\u7269\u8bbe\u5b9a\u4e3a\u5e03\u62c9\u5fb7\u00b7\u76ae\u7279\uff08Brad Pitt\uff09\uff0c\u90a3\u4e48\u751f\u6210\u7684\u56fe\u50cf\u4e2d\uff0c\u65e0\u8bba\u7a7f\u7740\u548c\u573a\u666f\u5982\u4f55\uff0c\u751f\u6210\u7684\u4eba\u7269\u5e94\u59cb\u7ec8\u4fdd\u6301\u5e03\u62c9\u5fb7\u00b7\u76ae\u7279\u7684\u9762\u90e8\u7279\u5f81\u3002</p>"},{"location":"final/projects/NJU_DL2025_project_diffusion/#_3","title":"\ud83d\udd0d \u4f60\u9700\u8981\u5b8c\u6210\u7684\u6838\u5fc3\u76ee\u6807\uff1a","text":"<ul> <li>\u5b9e\u73b0\u5c06\u7279\u5b9a\u4eba\u7269\uff08\u5982 Brad Pitt\uff09\u878d\u5165\u5230\u751f\u6210\u6a21\u578b\u4e2d\u3002</li> <li>\u4f7f\u751f\u6210\u56fe\u50cf\u5728\u4e0d\u540c prompt \u4e0b\u4ecd\u4fdd\u6301\u4eba\u7269\u4e00\u81f4\u6027\u3002</li> </ul>"},{"location":"final/projects/NJU_DL2025_project_diffusion/#_4","title":"\u4e8c\u3001\u65b9\u6cd5\u8bbe\u8ba1\u89c4\u8303","text":"<p>\u5efa\u8bae\u6309\u7167\u4ee5\u4e0b\u6d41\u7a0b\u8fdb\u884c\uff1a</p>"},{"location":"final/projects/NJU_DL2025_project_diffusion/#1","title":"1. \u6570\u636e\u6536\u96c6","text":"<ul> <li>\u6536\u96c6\u76ee\u6807\u4eba\u7269\u7684\u7167\u7247\uff08\u5efa\u8bae 5\uff5e10 \u5f20\uff0c\u6db5\u76d6\u591a\u4e2a\u89d2\u5ea6\u548c\u5149\u7167\u6761\u4ef6\uff09\u3002</li> <li>\u53ef\u53c2\u8003\u516c\u5f00\u56fe\u50cf\u6570\u636e\u5e93\uff0c\u6216\u4f7f\u7528\u7f51\u7edc\u722c\u866b\u83b7\u53d6\u3002</li> </ul>"},{"location":"final/projects/NJU_DL2025_project_diffusion/#2","title":"2. \u4e2a\u6027\u5316\u5fae\u8c03","text":"<p>\u63a8\u8350\u4ee5\u4e0b\u4e2a\u6027\u5316\u65b9\u6cd5\uff1a - LoRA \u5fae\u8c03\uff08\u53c2\u6570\u9ad8\u6548\uff09 - Textual Inversion\uff08\u901a\u8fc7\u5d4c\u5165\u5b66\u4e60\uff09 - DreamBooth\uff08\u8bad\u7ec3\u76ee\u6807\u4eba\u7269\u5728\u7279\u5b9a\u4e0a\u4e0b\u6587\u4e2d\uff09 - Custom Token \u6216 Prompt-Tuning \u7b49\u8f7b\u91cf\u65b9\u6cd5</p> <p>\u4f60\u53ef\u4ee5\u6839\u636e\u6570\u636e\u91cf\u3001\u8bad\u7ec3\u8d44\u6e90\u7075\u6d3b\u9009\u62e9\u3002</p>"},{"location":"final/projects/NJU_DL2025_project_diffusion/#3","title":"3. \u56fe\u50cf\u751f\u6210","text":"<ul> <li>\u4f7f\u7528\u81ea\u5b9a\u4e49 prompt\uff0c\u786e\u4fdd\u751f\u6210\u56fe\u7247\u4e2d\u7684\u4eba\u7269\u4fdd\u6301\u4e0e\u8bad\u7ec3\u4eba\u7269\u4e00\u81f4\u3002</li> <li>\u5efa\u8bae\u4f7f\u7528\u591a\u6837 prompt \u9a8c\u8bc1\u6cdb\u5316\u80fd\u529b\uff0c\u5982\u6dfb\u52a0\u52a8\u4f5c\u3001\u80cc\u666f\u3001\u8863\u670d\u7b49\u63cf\u8ff0\u3002</li> </ul>"},{"location":"final/projects/NJU_DL2025_project_diffusion/#4","title":"4. \u7ed3\u679c\u8bc4\u4f30","text":"<ul> <li>\u4f7f\u7528\u91cf\u5316\u6307\u6807\u8bc4\u4f30\u4e2a\u6027\u5316\u7a0b\u5ea6\u3001\u4fdd\u771f\u5ea6\u4e0e prompt \u4e00\u81f4\u6027\uff08\u89c1\u4e0b\u6587\u8bc4\u4f30\u6807\u51c6\uff09\u3002</li> </ul>"},{"location":"final/projects/NJU_DL2025_project_diffusion/#_5","title":"\u4e09\u3001\u5b9e\u9a8c\u5b9e\u65bd\u8981\u6c42","text":""},{"location":"final/projects/NJU_DL2025_project_diffusion/#_6","title":"\ud83e\uddea \u5b9e\u9a8c\u5e73\u53f0","text":"<ul> <li>\u63a8\u8350\u4f7f\u7528 Google Colab Pro\uff0c\u53ef\u63d0\u4f9b GPU \u73af\u5883\u3002</li> <li>\u652f\u6301\u4f7f\u7528 <code>diffusers</code>, <code>transformers</code>, <code>accelerate</code>, <code>peft</code> \u7b49 Hugging Face \u5e93\u3002</li> </ul>"},{"location":"final/projects/NJU_DL2025_project_diffusion/#_7","title":"\ud83e\uddea \u8bc4\u4f30\u6307\u6807","text":"<p>\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u6307\u6807\u8861\u91cf\u4e2a\u6027\u5316\u6548\u679c\uff1a</p> \u6307\u6807 \u8bf4\u660e Face Distance Score \u4eba\u8138\u7279\u5f81\u5411\u91cf\u8ddd\u79bb\uff0c\u8d8a\u4f4e\u4ee3\u8868\u4e0e\u76ee\u6807\u4eba\u7269\u8d8a\u63a5\u8fd1 CLIP Score \u56fe\u50cf\u4e0e\u6587\u672c\u7684\u4e00\u81f4\u6027\u5f97\u5206 Number of Faceless Images \u65e0\u6cd5\u8bc6\u522b\u4eba\u8138\u6216\u4e0d\u7b26\u5408\u76ee\u6807\u9762\u5b54\u7684\u56fe\u50cf\u6570\u91cf"},{"location":"final/projects/NJU_DL2025_project_diffusion/#_8","title":"\ud83d\udd01 \u8d85\u53c2\u6570\u5b9e\u9a8c","text":"<ul> <li>\u5fc5\u505a\uff1a<code>learning_rate</code></li> <li>\u53ef\u9009\uff1a<code>lora_rank</code>, <code>lora_alpha</code>, <code>max_train_steps</code>, <code>prompt token count</code> \u7b49</li> </ul> <p>\u9f13\u52b1\u4f60\u5c1d\u8bd5\u4e0d\u540c\u7684\u53c2\u6570\u914d\u7f6e\uff0c\u5e76\u8fdb\u884c\u5206\u6790\u5bf9\u6bd4\u3002</p>"},{"location":"final/projects/NJU_DL2025_project_diffusion/#_9","title":"\u56db\u3001\u63d0\u4ea4\u8981\u6c42","text":"<p>\u8bf7\u5728\u622a\u6b62\u65f6\u95f4\u524d\u4e0a\u4f20\u4ee5\u4e0b\u6750\u6599\uff1a</p> <ol> <li>\u2705 \u5b8c\u6574\u53ef\u8fd0\u884c\u7684\u4ee3\u7801</li> <li>\u5305\u542b\u8bad\u7ec3\u4e0e\u751f\u6210\u8fc7\u7a0b\uff0c\u786e\u4fdd\u53ef\u5728 Colab \u4e0a\u590d\u73b0\u3002</li> <li>\ud83d\udcc4 \u5b9e\u9a8c\u62a5\u544a\uff08PDF\uff09</li> <li>\u5185\u5bb9\u5305\u62ec\uff1a<ul> <li>\u65b9\u6cd5\u9009\u62e9\u4e0e\u8bbe\u8ba1\u7406\u7531</li> <li>\u6570\u636e\u5904\u7406\u65b9\u5f0f</li> <li>\u8bad\u7ec3\u65e5\u5fd7\u4e0e\u635f\u5931\u66f2\u7ebf</li> <li>\u751f\u6210\u56fe\u50cf\u5c55\u793a\uff08\u5bf9\u6bd4\u539f\u59cb vs \u4e2a\u6027\u5316\uff09</li> <li>\u5b9a\u91cf\u8bc4\u4f30\uff08\u6307\u6807\u8868\u683c + \u5206\u6790\uff09</li> <li>\u8d85\u53c2\u6570\u5bf9\u6bd4\u5b9e\u9a8c\u7ed3\u679c</li> </ul> </li> </ol>"},{"location":"final/projects/NJU_DL2025_project_diffusion/#_10","title":"\u4e94\u3001\u6ce8\u610f\u4e8b\u9879","text":"<ul> <li>\u4e25\u7981\u76f4\u63a5\u8c03\u7528 GPT-4o\u3001DALL\u00b7E \u7b49\u5546\u7528 API \u8fdb\u884c\u751f\u6210\uff0c\u5fc5\u987b\u5b8c\u6210\u4e2a\u6027\u5316\u8bad\u7ec3\u8fc7\u7a0b\u3002</li> <li>\u6a21\u578b\u5fae\u8c03\u90e8\u5206\u53ef\u4f7f\u7528\u516c\u5f00\u9884\u8bad\u7ec3\u6743\u91cd\uff08\u5982 stable-diffusion-v1-5\uff09\u3002</li> <li>\u6570\u636e\u96c6\u82e5\u6d89\u53ca\u7248\u6743\uff0c\u8bf7\u5728\u62a5\u544a\u4e2d\u6807\u6ce8\u6765\u6e90\u3002</li> <li>\u6240\u6709\u63d0\u4ea4\u6750\u6599\u5fc5\u987b\u4e3a\u539f\u521b\uff0c\u5982\u53d1\u73b0\u6284\u88ad\u884c\u4e3a\uff0c\u5c06\u53d6\u6d88\u6210\u7ee9\u5e76\u901a\u62a5\u5904\u7406\u3002</li> <li>\u5efa\u8bae\u4fdd\u7559\u4ee3\u7801\u8fd0\u884c\u8bb0\u5f55\uff08\u5982 Colab Notebook\uff09\uff0c\u4ee5\u4fbf\u67e5\u9a8c\u590d\u73b0\u3002</li> </ul>"},{"location":"final/projects/NJU_DL2025_project_diffusion/#100","title":"\u516d\u3001\u8bc4\u5206\u6807\u51c6\uff08\u5171 100 \u5206\uff09","text":"\u6a21\u5757 \u5206\u503c \u8bc4\u5206\u7ec6\u5219 \u4efb\u52a1\u5b8c\u6210\u5ea6 20 \u5206 \u6b63\u786e\u5b9e\u73b0\u4e2a\u6027\u5316\u751f\u6210\u6d41\u7a0b\uff0c\u5b8c\u6210\u6570\u636e\u6536\u96c6\u3001\u6a21\u578b\u8bad\u7ec3\u4e0e\u56fe\u50cf\u751f\u6210 \u65b9\u6cd5\u8bbe\u8ba1\u4e0e\u5b9e\u73b0 20 \u5206 \u9009\u7528\u5408\u7406\u7684\u4e2a\u6027\u5316\u65b9\u6cd5\u5e76\u51c6\u786e\u5b9e\u73b0\uff08\u5982 LoRA\u3001Textual Inversion \u7b49\uff09\u7ed3\u6784\u6e05\u6670\u3001\u8bad\u7ec3\u4ee3\u7801\u53ef\u590d\u73b0 \u5b9e\u9a8c\u8bbe\u8ba1\u4e0e\u591a\u7ec4\u5bf9\u6bd4 15 \u5206 \u81f3\u5c11\u8fdb\u884c 3 \u7ec4\u8d85\u53c2\u6570\u5bf9\u6bd4\u5b9e\u9a8c\uff0c\u7ed3\u679c\u660e\u786e\u3001\u8ba8\u8bba\u5145\u5206 \u751f\u6210\u8d28\u91cf\u8bc4\u4f30\u6307\u6807 25 \u5206 \u8be6\u89c1\u4e0b\u65b9\u8bc4\u4f30\u6307\u6807\u8bc4\u5206\u7ec6\u5219 \u5b9e\u9a8c\u62a5\u544a\u8d28\u91cf 15 \u5206 \u5185\u5bb9\u5b8c\u6574\u3001\u8bed\u8a00\u6e05\u6670\u3001\u6709\u6761\u7406\u3001\u6709\u5bf9\u7ed3\u679c\u7684\u5b9a\u6027/\u5b9a\u91cf\u5206\u6790 \u521b\u65b0\u6027\u4e0e\u6269\u5c55\u6027 5 \u5206 \u5c1d\u8bd5\u878d\u5408\u65b0\u65b9\u6cd5\u3001\u63a2\u7d22\u65b0 prompt \u5de5\u7a0b\u3001\u6784\u5efa demo \u6216\u4f7f\u7528 ControlNet \u7b49\u65b9\u6cd5"},{"location":"final/projects/NJU_DL2025_project_diffusion/#25","title":"\ud83d\udd2c \u8bc4\u4f30\u6307\u6807\u8bc4\u5206\u7ec6\u5219\uff0825 \u5206\uff09","text":"\u6307\u6807 \u5206\u503c \u8bc4\u5206\u65b9\u5f0f Face Distance Score 10 \u5206 \u5e73\u5747\u8ddd\u79bb &lt; 0.8\uff1a10 \u52060.8\u20131.0\uff1a8 \u52061.0\u20131.2\uff1a6 \u5206\u22651.2\uff1a3 \u5206\u6216\u4ee5\u4e0b CLIP Score 8 \u5206 \u5e73\u5747\u5f97\u5206 \u2265 0.30\uff1a8 \u52060.25\u20130.30\uff1a6 \u52060.20\u20130.25\uff1a4 \u5206&lt;0.20\uff1a2 \u5206\u6216\u4ee5\u4e0b Faceless Images \u6570\u91cf 7 \u5206 \u2264 2 \u5f20\uff1a7 \u52063\u20134 \u5f20\uff1a5 \u52065\u20136 \u5f20\uff1a3 \u5206\u2265 7 \u5f20\uff1a0 \u5206 <p>\u6ce8\uff1a\u8bf7\u62a5\u544a\u4e2d\u9644\u4e0a\u6bcf\u4e2a\u8bc4\u4f30\u6307\u6807\u7684\u8ba1\u7b97\u811a\u672c\u6216\u7ed3\u679c\u622a\u56fe\uff0c\u4ee5\u4fbf\u8bc4\u5206\u7ec4\u5ba1\u6838\u3002</p>"},{"location":"final/projects/NJU_DL2025_project_diffusion/#_11","title":"\u2757 \u6263\u5206\u8bf4\u660e","text":"<ul> <li>\u4f7f\u7528 GPT-4o / Bing Copilot \u7b49\u76f4\u63a5\u751f\u6210\u56fe\u50cf\u4e14\u672a\u8bad\u7ec3\u6a21\u578b\uff1a\u8bc4\u4f30\u90e8\u5206\u8ba1 0 \u5206</li> <li>\u62a5\u544a\u7f3a\u5931\u5173\u952e\u5185\u5bb9\uff08\u65b9\u6cd5/\u56fe\u50cf/\u8bc4\u4f30\uff09\u6216\u6570\u636e\u9020\u5047\uff1a\u6263\u9664 20 \u5206\u53ca\u4ee5\u4e0a</li> <li>\u6284\u88ad\u4ee3\u7801\u6216\u4f7f\u7528\u4ed6\u4eba\u8bad\u7ec3\u6743\u91cd\uff1a\u914c\u60c5\u964d\u7ea7\u6216\u53d6\u6d88\u6210\u7ee9</li> </ul>"},{"location":"final/projects/NJU_DL2025_project_diffusion/#100_1","title":"\u2705 \u52a0\u5206\u9879\uff08\u603b\u5206\u4e0d\u8d85\u8fc7 100 \u5206\uff09","text":"\u9879\u76ee \u52a0\u5206 \u4f7f\u7528 ControlNet\u3001Token Merging\u3001Prompt Mixing \u7b49\u8fdb\u9636\u6280\u672f +2\uff5e5 \u5206 \u63d0\u4ea4\u53ef\u4ea4\u4e92\u5f0f Web Demo\uff08\u5982 Gradio\uff09 +2 \u5206 \u4e2a\u6027\u5316\u591a\u4e2a\u89d2\u8272\u5e76\u5b9e\u73b0\u5408\u7167 +3 \u5206 <p>\u5982\u6709\u95ee\u9898\u8bf7\u53ca\u65f6\u8054\u7cfb\u52a9\u6559\u6216\u5728\u6559\u5b66\u5e73\u53f0\u7559\u8a00\uff0c\u795d\u5927\u5bb6\u63a2\u7d22\u6109\u5feb\uff01</p>"},{"location":"final/projects/NJU_steer/","title":"\u57fa\u4e8e\u5f15\u5bfc\u7684\u5927\u8bed\u8a00\u6a21\u578b\u5e7b\u89c9\u7f13\u89e3","text":""},{"location":"final/projects/NJU_steer/#_2","title":"\u4e00\u3001\u4efb\u52a1\u8bf4\u660e","text":""},{"location":"final/projects/NJU_steer/#11","title":"1.1 \u80cc\u666f\u4ecb\u7ecd","text":"<p>\u5927\u578b\u8bed\u8a00\u6a21\u578b(LLM)\u6709\u65f6\u4f1a\u4ea7\u751f\u5e7b\u89c9\uff0c\u7279\u522b\u662fLLM\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e0d\u771f\u5b9e\u7684\u53cd\u5e94\uff0c\u5c3d\u7ba1\u77e5\u9053\u6b63\u786e\u7684\u77e5\u8bc6\u3002\u6fc0\u6d3bLLM\u4e2d\u7684\u771f\u5b9e\u6027\u662f\u5145\u5206\u91ca\u653eLLM\u77e5\u8bc6\u6f5c\u80fd\u7684\u5173\u952e\uff0c\u53ef\u4ee5\u901a\u8fc7\u5bf9LLM\u5185\u90e8\u8868\u793a\u8fdb\u884c\u5e72\u9884\uff0c\u8fbe\u5230\u7f13\u89e3\u5e7b\u89c9\u7684\u76ee\u7684\u3002</p>"},{"location":"final/projects/NJU_steer/#12","title":"1.2 \u6570\u636e\u96c6\u8bf4\u660e","text":"\u6570\u636e\u96c6 \u4efb\u52a1 \u5907\u6ce8 TruthfulQA Multiple-choice \u7ed9\u5b9a\u95ee\u9898\u4ee5\u53ca\u9009\u9879\uff0c\u4ece\u4e2d\u9009\u51fa\u6b63\u786e\u7b54\u6848"},{"location":"final/projects/NJU_steer/#_3","title":"\u4e8c\u3001\u65b9\u6cd5\u8bbe\u8ba1\u89c4\u8303","text":"<p>\u53c2\u7167\u300aInference time intervention: Eliciting truthful answers from a language model\u300b\uff0c\u5b9e\u73b0\u5bf9\u5927\u8bed\u8a00\u6a21\u578b\u7684\u5e72\u9884\uff0c\u8ba8\u8bba\u5e72\u9884\u5bf9\u4e8e\u6a21\u578b\u7684\u5f71\u54cd</p> <p>\u6838\u5fc3\u8981\u6c42\uff1a</p> <ul> <li>\u57fa\u7ebf\u5bf9\u6bd4</li> <li>\u4e0d\u540clayer\u5b9e\u9a8c\u5206\u6790</li> <li>\u4e0d\u540c\u4f4d\u7f6e\u7684\u5185\u90e8\u8868\u793a\u5b9e\u9a8c\u5206\u6790</li> </ul> <p>\u6ce8\uff1a\u4f7f\u7528QWEN-0.5B\u6216\u5176\u4ed6\u5408\u9002\u6a21\u578b\u5747\u53ef</p>"},{"location":"final/projects/NJU_steer/#_4","title":"\u53c2\u8003\u6587\u732e\uff1a","text":"<ol> <li> <p>Kenneth Li, Oam Patel, Fernanda Vi\u00e9gas, Hanspeter Pfister, and Martin Wattenberg. 2023b. Inference- time intervention: Eliciting truthful answers from a language model.</p> </li> <li> <p>Zhongzhi Chen, Xingwu Sun, Xianfeng Jiao, Fengzong Lian, Zhanhui Kang, Di Wang, and Cheng-Zhong Xu. 2024. Truth forest: Toward multi-scale truthfulness  in large language models through intervention without tuning.</p> </li> </ol>"},{"location":"final/projects/NJU_steer/#_5","title":"\u4e09\u3001\u5b9e\u9a8c\u8981\u6c42","text":""},{"location":"final/projects/NJU_steer/#31","title":"3.1 \u8bc4\u4f30\u6307\u6807","text":"<p>Multiple-choice:</p> <p>\u5c3d\u7ba1\u751f\u6210\u4efb\u52a1\u53ef\u4ee5\u8bc4\u4f30\u6a21\u578b\u8bf4\u51fa\u771f\u5b9e\u9648\u8ff0\u7684\u80fd\u529b\uff0c \u4f46\u8fd9\u79cd\u8bc4\u4f30\u65b9\u5f0f\u5f88\u96be\u64cd\u4f5c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u79cd\u9009\u62e9\u9898\u7684\u9009\u9879\uff0c\u7528\u4ee5\u6d4b\u8bd5\u6a21\u578b\u8bc6\u522b\u771f\u5b9e\u9648\u8ff0\u7684\u80fd\u529b\u3002</p> <ul> <li> <p>MC1\uff08\u5355\u9009\u9898\uff09\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u95ee\u9898\u548c4-5\u4e2a\u9009\u9879\uff0c\u9009\u62e9\u552f\u4e00\u6b63\u786e\u7684\u7b54\u6848\u3002\u6a21\u578b\u7684\u9009\u62e9\u662f\u5b83\u8ba4\u4e3a\u5728\u95ee\u9898\u4e4b\u540e\u6700\u6709\u53ef\u80fd\u5b8c\u6210\u7684\u9009\u9879\uff08\u4e0e\u5176\u4ed6\u9009\u9879\u65e0\u5173\uff09\u3002\u5206\u6570\u662f\u6240\u6709\u95ee\u9898\u7684\u7b80\u5355\u51c6\u786e\u7387\u3002</p> </li> <li> <p>MC2\uff08\u591a\u9009\u9898\uff09\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u95ee\u9898\u548c\u591a\u4e2a\u6b63\u786e/\u9519\u8bef\u7684\u53c2\u8003\u7b54\u6848\uff0c\u5206\u6570\u662f\u5206\u914d\u7ed9\u6b63\u786e\u7b54\u6848\u96c6\u5408\u7684\u603b\u6982\u7387\u7684\u5f52\u4e00\u5316\u503c</p> </li> </ul> <p>\u66f4\u8be6\u7ec6\u5185\u5bb9\u53c2\u8003\uff1ahttps://github.com/sylinrl/TruthfulQA/tree/main</p>"},{"location":"final/projects/NJU_steer/#32-65-40-25","title":"3.2 \u57fa\u7840\u5b9e\u9a8c\uff0865\u5206 = \u7ed3\u679c\u51c6\u786e\u602740\u5206 + \u62a5\u544a\u8d28\u91cf25\u5206\uff09","text":"<ul> <li>\u57fa\u7ebf\u5bf9\u6bd4: \u5bf9\u6bd4\u5e72\u9884\u524d\u540eMC1\u3001MC2\u6307\u6807\u7684\u53d8\u5316</li> <li>layer\u5b9e\u9a8c\uff1a\u9488\u5bf9LLM\u7684\u4e0d\u540c\u5c42\uff0c\u8fdb\u884c\u5e72\u9884\uff0c\u8ba8\u8bba\u5e72\u9884\u4e0d\u540c\u7684layer\u5bf9\u5b9e\u9a8c\u7ed3\u679c\u7684\u5f71\u54cd</li> <li>\u63d0\u53d6\u4e0d\u540c\u4f4d\u7f6e\u7684hidden_states\u5b9e\u9a8c\uff1a \u9488\u5bf9\u6bcf\u4e00\u5c42\u4e2d\u4e0d\u540c\u4f4d\u7f6e\u7684\u5185\u90e8\u8868\u793a\uff0c\u6bd4\u5982\u7ecf\u8fc7\u6ce8\u610f\u529b\u5934\u4e4b\u540e\u7684hidden_states\uff0cmlp\u8fd0\u7b97\u4e4b\u540e\u7684hidden_states\u7b49</li> <li>\u5e72\u9884\u5f3a\u5ea6\u5206\u6790: \u968f\u7740\u5e72\u9884\u5f3a\u5ea6\u7684\u589e\u5927\uff0cMC1\u548cMC2\u662f\u5426\u4f1a\u8d8a\u6765\u8d8a\u597d\uff1f\u518d\u6253\u5370\u51e0\u4e2a\u8f93\u51fa\uff0c\u89c2\u5bdf\u5177\u4f53\u793a\u4f8b\u5206\u6790\u6a21\u578b\u662f\u5426\u4ea7\u751f\u4e86\u66f4\u597d\u7684\u8f93\u51fa\u3002\u5982\u679c\u6ca1\u6709\u4ea7\u751f\u66f4\u597d\u7684\u8f93\u51fa\uff0c\u800cMC\u6307\u6807\u53d8\u597d\u4e86\uff0c\u8bf7\u5206\u6790\u539f\u56e0\u3002</li> </ul>"},{"location":"final/projects/NJU_steer/#33-35-20-15","title":"3.3 \u8fdb\u9636\u5b9e\u9a8c\uff0835\u5206 = \u521b\u65b0\u602720\u5206 + \u62a5\u544a\u8d28\u91cf15\u5206\uff09","text":"<p>\u8bf7\u5728Inference time intervention: Eliciting truthful answers from a language model\u7684\u57fa\u7840\u4e0a\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u65b0\u7684\u7b97\u6cd5\uff08Truth forest\u9664\u5916\uff09\u4ee5\u63d0\u5347\u6027\u80fd\uff0c\u5e76\u4e14\u901a\u8fc7\u5b9e\u9a8c\u9a8c\u8bc1\u3002</p>"},{"location":"final/projects/NJU_steer/#_6","title":"\u56db\u3001\u63d0\u4ea4\u5185\u5bb9","text":"<p>\u4ee3\u7801:</p> <ol> <li> <p>\u4ee3\u7801\u7ed3\u6784\u4e0d\u505a\u8981\u6c42</p> </li> <li> <p>\u8981\u7ed9\u51fa\u80fd\u591f\u8fd0\u884c\u7684python\u73af\u5883\uff08requirement.txt\uff09</p> </li> <li> <p>\u8981\u7ed9\u51fa\u80fd\u6210\u529f\u8fd0\u884c\u4ee3\u7801\u7684\u811a\u672c</p> </li> </ol> <p>\u62a5\u544a:</p> <ol> <li> <p>\u5b9e\u73b0\u65b9\u6cd5\uff1a\u8be6\u7ec6\u63cf\u8ff0\u5b9e\u73b0\u65b9\u6cd5</p> </li> <li> <p>\u5b9e\u9a8c\u7ed3\u679c\uff1a\u5728\u5305\u542b\u5fc5\u505a\u5b9e\u9a8c\u90e8\u5206\u5185\u5bb9\u7684\u57fa\u7840\u4e0a\uff0c\u53ef\u81ea\u7531\u53d1\u6325</p> </li> <li> <p>\u7ed3\u679c\u5206\u6790\uff1a\u5bf9\u4e0a\u8ff0\u5b9e\u9a8c\u7ed3\u679c\u8fdb\u884c\u5206\u6790</p> </li> </ol>"},{"location":"final/projects/NJU_steer/#_7","title":"\u4e94\u3001\u6ce8\u610f\u4e8b\u9879","text":"<p>\u53c2\u8003\u6587\u732e\uff1a \u5982\u679c\u4f60\u5728\u5b9e\u9a8c\u548c\u62a5\u544a\u4e2d\u53c2\u8003\u4e86\u5df2\u53d1\u8868\u7684\u6587\u732e\uff0c\u8bf7\u5217\u51fa\u4f60\u6240\u53c2\u8003\u7684\u76f8\u5173\u6587\u732e\u3002</p> <p>\u5982\u6709\u7591\u95ee\uff0c\u8bf7\u8054\u7cfb 652024320001@smail.nju.edu.cn\u3002</p>"},{"location":"final/projects/Profiling-optimization/","title":"\u5927\u6a21\u578b\u8bad\u7ec3\u6027\u80fdProfiling\u548c\u4f18\u5316","text":""},{"location":"final/projects/Profiling-optimization/#AnC0t","title":"\u4e00\u3001\u80cc\u666f","text":"<p>\u968f\u7740\u5927\u6a21\u578b\u7684\u6d41\u884c\uff0c\u8d8a\u6765\u8d8a\u591a\u5927\u6a21\u578b\u4e0d\u65ad\u6d8c\u73b0\uff0c\u800c\u5b83\u4eec\u901a\u5e38\u62e5\u6709\u6d77\u91cf\u7684\u53c2\u6570\uff0c\u540c\u65f6\u5e26\u6765\u4e86\u5de8\u5927\u7684\u8bad\u7ec3\u5f00\u9500\u3002\u56e0\u6b64\uff0c\u52a0\u901f\u6a21\u578b\u8bad\u7ec3\u6210\u4e3a\u4ece\u4e1a\u8005\u7684\u5171\u8bc6\u3002\u800c\u8981\u60f3\u987a\u5229\u52a0\u901f\u8bad\u7ec3\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u5bf9\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u6027\u80fd\u74f6\u9888\u6709\u6240\u4e86\u89e3\uff0c\u5e76\u4e14\u5c1d\u8bd5\u9009\u62e9\u6709\u6548\u7684\u4f18\u5316\u7b56\u7565\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u5e38\u89c1\u7684\u6027\u80fdprofiling\u5de5\u5177\uff0c\u5e76\u719f\u7ec3\u638c\u63e1\u6574\u4e2a\u6027\u80fd\u5206\u6790\u4f18\u5316\u8fc7\u7a0b\u3002  </p>"},{"location":"final/projects/Profiling-optimization/#a18jq","title":"\u4e8c\u3001\u4efb\u52a1\u8bf4\u660e","text":""},{"location":"final/projects/Profiling-optimization/#Bd6Ni","title":"2.1 Profiling\u5de5\u5177\u4ecb\u7ecd","text":"<p>\u672c\u6b21\u5b9e\u9a8c\u57fa\u4e8eNVIDIA GPU\u8fdb\u884c\u3002\u800cNVIDIA Nsight Systems\u548cNsight Compute\u662fNVIDIA\u63d0\u4f9b\u7684\u4e24\u6b3e\u5f3a\u5927\u7684\u6027\u80fd\u5206\u6790\u5de5\u5177\uff0c\u4e13\u4e3aGPU\u5f00\u53d1\u548c\u4f18\u5316\u800c\u8bbe\u8ba1\u3002</p>"},{"location":"final/projects/Profiling-optimization/#IwR9I","title":"NVIDIA Nsight Systems","text":"<p>NVIDIA Nsight<sup>[1]</sup>\u662f\u4e00\u4e2a\u7cfb\u7edf\u7ea7\u6027\u80fd\u5206\u6790\u5de5\u5177\uff0c\u80fd\u591f\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u53ef\u89c6\u5316\u5e94\u7528\u7b97\u6cd5\uff0c\u53d1\u73b0\u4f18\u5316\u673a\u4f1a\u3002</p> <ul> <li>\u7cfb\u7edf\u7ea7\u5206\u6790\uff1a\u63d0\u4f9b\u7cfb\u7edf\u7ea7\u7684\u6027\u80fd\u5206\u6790\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u7406\u89e3\u6574\u4e2a\u5e94\u7528\u7684\u6027\u80fd\u74f6\u9888\u3002</li> <li>\u591a\u5e73\u53f0\u652f\u6301\uff1a\u652f\u6301\u591a\u79cdNVIDIA\u5e73\u53f0\uff0c\u5305\u62ec\u5927\u578bTesla\u591aGPU x86\u670d\u52a1\u5668\u3001\u5de5\u4f5c\u7ad9\u7b49\u3002</li> <li>\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u652f\u6301\uff1a\u80fd\u591f\u4e3aPyTorch\u548cTensorFlow\u7b49\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u7684\u884c\u4e3a\u548c\u8d1f\u8f7d\u63d0\u4f9b\u5b9d\u8d35\u89c1\u89e3\uff0c\u5141\u8bb8\u7528\u6237\u8c03\u6574\u6a21\u578b\u548c\u53c2\u6570\uff0c\u4ee5\u63d0\u9ad8\u5355\u4e2a\u6216\u591a\u4e2aGPU\u7684\u6574\u4f53\u5229\u7528\u7387\u3002</li> <li>\u4f4e\u5f00\u9500\u5206\u6790\uff1a\u4ee5\u4f4e\u5f00\u9500\u7684\u65b9\u5f0f\u8fd0\u884c\uff0c\u4e0d\u4f1a\u5bf9\u7cfb\u7edf\u6027\u80fd\u4ea7\u751f\u8fc7\u5927\u5f71\u54cd\uff0c\u786e\u4fdd\u5206\u6790\u7ed3\u679c\u7684\u51c6\u786e\u6027\u3002</li> </ul>"},{"location":"final/projects/Profiling-optimization/#PXaFL","title":"NVIDIA Nsight Compute","text":"<p>NVIDIA Nsight Compute<sup>[2]</sup>\u662f\u4e13\u95e8\u7528\u4e8e\u5206\u6790\u548c\u4f18\u5316CUDA\u7a0b\u5e8f\u6027\u80fd\u7684\u5de5\u5177\uff0c\u4e3b\u8981\u7528\u4e8e\u6df1\u5165\u5206\u6790GPU\u5185\u6838\u6267\u884c\u7684\u8be6\u7ec6\u6027\u80fd\u6570\u636e\uff0c\u5982\u5bc4\u5b58\u5668\u4f7f\u7528\u3001\u5185\u5b58\u5e26\u5bbd\u3001\u6307\u4ee4\u6267\u884c\u7b49\u3002</p> <ul> <li>\u5185\u6838\u7ea7\u5206\u6790\uff1a\u6df1\u5165GPU\u5185\u6838\uff0c\u63d0\u4f9b\u8be6\u7ec6\u7684\u6027\u80fd\u6307\u6807\u548cAPI\u8c03\u8bd5\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u5b9a\u4f4dCUDA\u5185\u6838\u4e2d\u7684\u74f6\u9888\u3002</li> <li>\u5f15\u5bfc\u5f0f\u5206\u6790\uff1a\u63d0\u4f9b\u5f15\u5bfc\u5f0f\u5206\u6790\uff0c\u81ea\u52a8\u68c0\u6d4b\u6027\u80fd\u95ee\u9898\uff0c\u5e76\u6839\u636eNVIDIA\u5de5\u7a0b\u5e08\u7684\u5185\u7f6e\u6307\u5bfc\u63d0\u4f9b\u4f18\u5316\u5efa\u8bae\u3002</li> <li>\u6e90\u4ee3\u7801\u5173\u8054\uff1a\u652f\u6301\u5c06\u6e90\u4ee3\u7801\u4e0e\u8be6\u7ec6\u7684\u6307\u4ee4\u6307\u6807\u5173\u8054\u8d77\u6765\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u5feb\u901f\u5b9a\u4f4d\u6709\u95ee\u9898\u7684\u4ee3\u7801\u533a\u57df\u3002</li> </ul> <p>Nsight Systems\u4fa7\u91cd\u4e8e\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u7cfb\u7edf\u6027\u80fd\u5206\u6790\uff0c\u800cNsight Compute\u4e13\u6ce8\u4e8eGPU\u5185\u6838\uff08\u7b97\u5b50\uff09\u7684\u6027\u80fd\u5206\u6790\u3002\u901a\u8fc7\u96c6\u6210\u4f7f\u7528\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u540c\u65f6\u83b7\u5f97\u5e94\u7528\u7a0b\u5e8f\u5c42\u9762\u548cGPU\u5c42\u9762\u7684\u6027\u80fd\u6570\u636e\uff0c\u4ece\u800c\u66f4\u5168\u9762\u5730\u8bc6\u522b\u548c\u4f18\u5316\u6027\u80fd\u95ee\u9898\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u9009\u62e9\u901a\u8fc7Nsight\u5e94\u7528\u7a0b\u5e8f\u5206\u6790\u627e\u51fa\u6267\u884c\u65f6\u95f4\u8fc7\u957f\u7684\u7b97\u5b50\uff0c\u7136\u540e\u518d\u57fa\u4e8eNsight Compute\u5206\u6790\u5176\u5177\u4f53\u539f\u56e0\uff0c\u518d\u5c1d\u8bd5\u52a0\u4ee5\u4f18\u5316\u3002</p>"},{"location":"final/projects/Profiling-optimization/#QDRca","title":"2.2 \u5e38\u89c1\u7684\u8bad\u7ec3\u6027\u80fd\u4f18\u5316\u7b56\u7565","text":"<p>\u901a\u8fc7profiling\u6211\u4eec\u53ef\u4ee5\u5b9a\u4f4d\u51fa\u5b9e\u8df5\u4e2d\u8017\u65f6\u6700\u4e45\u7684\u7b97\u5b50\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u53d1\u73b0\u5176\u4e3b\u8981\u7684\u95ee\u9898\u6765\u6e90\u3002\u56e0\u6b64\u63a5\u4e0b\u6765\u9700\u8981\u5bf9\u5b83\u4eec\u8fdb\u884c\u9488\u5bf9\u6027\u4f18\u5316\u3002\u5e38\u89c1\u7684\u8bad\u7ec3\u6027\u80fd\u4f18\u5316\u7b56\u7565\u5305\u62ec\u6570\u636e\u9884\u5904\u7406\u3001\u901a\u4fe1\u3001\u7b97\u5b50\u5b9e\u73b0\u7b49\u591a\u4e2a\u65b9\u9762\uff1a</p>"},{"location":"final/projects/Profiling-optimization/#cXTgH","title":"\u6570\u636e\u9884\u5904\u7406\u4f18\u5316","text":"<ul> <li>\u5e76\u884c\u5904\u7406\uff1a\u901a\u8fc7\u591a\u7ebf\u7a0b\u6216\u8fdb\u7a0b\u5e76\u884c\u5904\u7406\u6570\u636e\uff0c\u52a0\u5feb\u6570\u636e\u9884\u5904\u7406\u901f\u5ea6\u3002</li> <li>\u6570\u636e\u538b\u7f29\uff1a\u51cf\u5c11\u6570\u636e\u5b58\u50a8\u7a7a\u95f4\u548c\u4f20\u8f93\u5f00\u9500\uff0c\u964d\u4f4e\u9884\u5904\u7406\u65f6\u95f4\u3002</li> <li>\u7b97\u6cd5\u4f18\u5316\uff1a\u4f7f\u7528\u66f4\u9ad8\u6548\u7684\u7b97\u6cd5\uff0c\u51cf\u5c11\u65f6\u95f4\u590d\u6742\u5ea6\u3002</li> <li>\u6570\u636e\u7f13\u5b58\u4e0e\u9884\u53d6\uff1a\u5c06\u6570\u636e\u7f13\u5b58\u5230\u5185\u5b58\u6216\u9ad8\u901f\u5b58\u50a8\u8bbe\u5907\u4e2d\uff0c\u51cf\u5c11\u6570\u636e\u8bfb\u53d6\u65f6\u95f4\u3002</li> <li>\u6570\u636e\u9884\u5904\u7406\u6d41\u6c34\u7ebf\uff1a\u5c06\u6570\u636e\u9884\u5904\u7406\u6b65\u9aa4\u5206\u89e3\u4e3a\u591a\u4e2a\u9636\u6bb5\uff0c\u5f62\u6210\u6d41\u6c34\u7ebf\u5904\u7406\uff0c\u63d0\u9ad8\u6574\u4f53\u6548\u7387\u3002</li> </ul>"},{"location":"final/projects/Profiling-optimization/#e2HyG","title":"\u7b97\u5b50\u4f18\u5316","text":"<ul> <li>\u7b97\u5b50\u878d\u5408\uff1a\u5c06\u591a\u4e2a\u5c0f\u7b97\u5b50\u5408\u5e76\u6210\u5927\u7b97\u5b50\uff0c\u51cf\u5c11Kernel Launch\u5f00\u9500\u548c\u8bbf\u5b58\u5f00\u9500\u3002</li> <li>\u5185\u5b58\u4f18\u5316\uff1a\u8003\u8651\u5185\u5b58\u5206\u5757\u7b49\u65b9\u5f0f\uff0c\u51cf\u5c11\u5168\u5c40\u5185\u5b58\u8bbf\u95ee\uff0c\u4f7f\u7528\u5171\u4eab\u5185\u5b58\u6216\u5bc4\u5b58\u5668\u6765\u4f18\u5316\u6570\u636e\u8bbf\u95ee\u3002</li> <li>\u9ad8\u6548\u7684\u7b97\u5b50\u5b9e\u73b0\uff1a\u4f7f\u7528\u7ecf\u8fc7\u4f18\u5316\u7684\u7b97\u5b50\u5e93\u6216\u6846\u67b6\uff0c\u5982cuDNN\u3001TensorRT\u7b49\u3002</li> <li>\u7b97\u5b50\u8c03\u5ea6\uff1a\u901a\u8fc7\u8c03\u5ea6\u7b97\u5b50\u6267\u884c\u987a\u5e8f\u7b49\uff0c\u4e0d\u5f71\u54cd\u5176\u6267\u884c\u903b\u8f91\u6761\u4ef6\u4e0b\uff0c\u964d\u4f4e\u603b\u7684\u8ba1\u7b97\u65f6\u95f4</li> </ul>"},{"location":"final/projects/Profiling-optimization/#qPGMa","title":"\u901a\u4fe1\u4f18\u5316","text":"<ul> <li>\u51cf\u5c11\u901a\u4fe1\u6b21\u6570\uff1a\u901a\u8fc7\u5408\u5e76\u901a\u4fe1\u64cd\u4f5c\u3001\u6279\u91cf\u4f20\u8f93\u6570\u636e\u7b49\u65b9\u5f0f\uff0c\u51cf\u5c11\u901a\u4fe1\u6b21\u6570\u3002</li> <li>\u8ba1\u7b97\u548c\u901a\u4fe1\u91cd\u53e0\uff1a\u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u9884\u53d6\u4e0b\u4e00\u6279\u6570\u636e\uff0c\u540c\u65f6\u8fdb\u884c\u6570\u636e\u4f20\u8f93\u548c\u8ba1\u7b97\u3002</li> <li>\u4f18\u5316\u901a\u4fe1\u62d3\u6251\u548c\u539f\u8bed\uff1a\u5408\u7406\u8bbe\u8ba1\u8282\u70b9\u95f4\u7684\u901a\u4fe1\u8fde\u63a5\u65b9\u5f0f\u3001\u548c\u901a\u4fe1\u539f\u8bed\u5b9e\u73b0\uff0c\u51cf\u5c11\u603b\u901a\u4fe1\u5ef6\u8fdf\u3002</li> </ul>"},{"location":"final/projects/Profiling-optimization/#L80mN","title":"\u5176\u4ed6\u4f18\u5316","text":"<ul> <li>\u6a21\u578b\u4f18\u5316\uff1a\u7b80\u5316\u6a21\u578b\u7ed3\u6784\u3001\u51cf\u5c11\u53c2\u6570\u6570\u91cf\u3001\u4f7f\u7528\u91cf\u5316\u6280\u672f\u7b49\uff0c\u964d\u4f4e\u8ba1\u7b97\u590d\u6742\u5ea6\u3002</li> <li>\u8d44\u6e90\u5206\u914d\uff1a\u5408\u7406\u5206\u914dCPU\u3001GPU\u3001\u901a\u4fe1\u7b49\u8d44\u6e90\uff0c\u907f\u514d\u8d44\u6e90\u7ade\u4e89\u548c\u74f6\u9888\u3002</li> <li>\u4ee3\u7801\u4f18\u5316\uff1a\u4f18\u5316\u4ee3\u7801\u7ed3\u6784\u548c\u7b97\u6cd5\u5b9e\u73b0\uff0c\u63d0\u9ad8\u4ee3\u7801\u6548\u7387\u3002</li> </ul> <p>\u5b9e\u9645\u8bad\u7ec3\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u53ea\u4f1a\u9047\u5230\u5176\u4e2d\u7684\u4e00\u90e8\u5206\u74f6\u9888\uff0c\u800c\u5982\u4f55\u9009\u62e9\u4f18\u5316\uff0c\u9700\u8981\u57fa\u4e8eprofiling\u7ed3\u679c\u548c\u5b9e\u8df5\u7ecf\u9a8c\u8fdb\u884c\u9009\u62e9\uff0c\u6709\u65f6\u5019\u4e0d\u5408\u9002\u7684\u4f18\u5316\u53cd\u800c\u4f1a\u9020\u6210\u66f4\u5927\u7684\u6027\u80fd\u635f\u5931\u3002\u540c\u65f6\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4f18\u5316\u5e94\u8be5\u4e0d\u5f71\u54cd\u8bad\u7ec3\u7684\u6536\u655b\u6027\u548c\u7cbe\u5ea6\u3002</p>"},{"location":"final/projects/Profiling-optimization/#jMxTw","title":"\u4e09\u3001\u5b9e\u9a8c\u8981\u6c42","text":""},{"location":"final/projects/Profiling-optimization/#dvztr","title":"\u6a21\u578b\u8bad\u7ec3\u6027\u80fd\u5206\u6790\u4e0e\u4f18\u5316","text":"<p>\uff081\uff09\u8bad\u7ec3\u90e8\u7f72\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u7279\u5b9a\u7684\u6a21\u578b\u914d\u7f6e\uff0c\u4f60\u9700\u8981\u5728\u672c\u5730\u8fdb\u884c\u90e8\u7f72\u8bad\u7ec3\uff08\u63a8\u8350\u57fa\u4e8ePytorch\u5e73\u53f0\uff09\uff0c\u5b8c\u6210\u8bad\u7ec3\u5e76\u786e\u4fdd\u7cbe\u5ea6\u8fbe\u6807\u3002</p> <p>\uff082\uff09\u6027\u80fdProfiling\uff1a\u57fa\u4e8e\u63a8\u8350\u7684profiling\u5de5\u5177\uff0c\u5bf9\u8bad\u7ec3\u7684\u5355\u4e2aiteration\u8fdb\u884c\u5206\u6790\uff0c\u627e\u51fa\u8bad\u7ec3\u4e2d\u8017\u65f6\u6700\u4e45\u7684Top 5\u7b97\u5b50\uff0c\u5e76\u57fa\u4e8eNsight compute \u5bf9\u8fd9\u4e9b\u7b97\u5b50\u8fdb\u884cRoofline\u5206\u6790<sup>[3]</sup>\uff0c\u627e\u51fa\u5176\u6027\u80fd\u4e0d\u4f73\u7684\u539f\u56e0\u3002</p> <p>\uff083\uff09\u6027\u80fd\u4f18\u5316\uff1a\u6839\u636eprofiling\u548c\u5206\u6790\u7684\u7ed3\u679c\uff0c\u4f60\u53ef\u4ee5\u81ea\u4e3b\u9009\u62e9\u4f18\u5316\uff0c\u9a8c\u8bc1\u4f18\u5316\u524d\u540e\uff0c\u8bad\u7ec3\u5355\u4e2aiteration\u7684\u65f6\u95f4\u662f\u5426\u6709\u6539\u5584\uff0c\u4f18\u5316\u53ef\u4ee5\u4e0d\u6b62\u4e00\u5904\uff0c\u6548\u679c\u8d8a\u4f73\u8d8a\u597d\uff08\u53ea\u548c\u81ea\u5df1\u7684baseline\u6bd4\u8f83\uff09\u3002</p>"},{"location":"final/projects/Profiling-optimization/#BMx6H","title":"\u56db\u3001\u63d0\u4ea4\u5185\u5bb9","text":"<p>\u6700\u7ec8\u4f60\u9700\u8981\u63d0\u4ea4\u4ee5\u4e0b\u6750\u6599\uff1a</p>"},{"location":"final/projects/Profiling-optimization/#lHTrU","title":"\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff1a","text":"<ul> <li>\u4ee3\u7801\u7ed3\u6784\u4e0d\u505a\u8981\u6c42 </li> <li>\u8981\u7ed9\u51fa\u80fd\u591f\u8fd0\u884c\u7684python\u73af\u5883\uff08requirement.txt\uff09 </li> <li>\u8981\u7ed9\u51fa\u80fd\u6210\u529f\u8fd0\u884c\u4ee3\u7801\u7684\u811a\u672c</li> </ul>"},{"location":"final/projects/Profiling-optimization/#OGgyt","title":"\u5b9e\u9a8c\u62a5\u544a","text":"<ul> <li>\u5b9e\u73b0\u65b9\u6cd5\uff1a\u8be6\u7ec6\u63cf\u8ff0\u6574\u4e2a\u5206\u6790\u548c\u4f18\u5316\u8fc7\u7a0b\uff0c\u91cd\u70b9\u5305\u62ecprofiling\u7ed3\u679c\u7684\u5206\u6790\u3001\u4f18\u5316\u7b56\u7565\u7684\u9009\u62e9\u7b49 </li> <li>\u5b9e\u9a8c\u7ed3\u679c\uff1a\u5c55\u793a baseline \u7684 profiling \u7ed3\u679c\uff08Top 5\u7b97\u5b50\u6027\u80fd\uff09\uff0c\u5c55\u793aTop 5\u7b97\u5b50\u7684roofline\u5206\u6790\u7ed3\u679c\uff0c\u4ee5\u53ca\u9009\u62e9\u5bf9\u5e94\u4f18\u5316\u540e\u7684profiling\u7ed3\u679c\uff08\u5305\u62ec\u8bad\u7ec3\u65f6\u95f4\u7684\u52a0\u901f\u6bd4\u3001\u65b0\u7684Top 5\u7b97\u5b50\u6027\u80fd\u53ca\u5176roofline\u5206\u6790\u7ed3\u679c\uff09 </li> <li>\u7ed3\u679c\u5206\u6790\uff1a\u5bf9\u4ee5\u4e0a\u5b9e\u9a8c\u7ed3\u679c\u7684\u5206\u6790\uff0c\u662f\u5426\u53ef\u4ee5\u7ee7\u7eed\u4f18\u5316\u7684\u63a2\u8ba8\uff0c\u4ee5\u53ca\u5b9e\u9a8c\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u95ee\u9898\u548c\u89e3\u51b3\u8fc7\u7a0b</li> </ul>"},{"location":"final/projects/Profiling-optimization/#sec5","title":"\u4e94\u3001\u6ce8\u610f\u4e8b\u9879","text":"<p>\u53c2\u8003\u6587\u732e\uff1a \u5982\u679c\u4f60\u5728\u5b9e\u9a8c\u548c\u62a5\u544a\u4e2d\u53c2\u8003\u4e86\u5df2\u53d1\u8868\u7684\u6587\u732e\uff0c\u8bf7\u5217\u51fa\u4f60\u6240\u53c2\u8003\u7684\u76f8\u5173\u6587\u732e\u3002 </p> <p>\u5982\u6709\u7591\u95ee\uff0c\u8bf7\u8054\u7cfbwzbwangzhibin@gmail.com \u6216 yuhangzhou@smail.nju.edu.cn\u3002</p> <p>\u53c2\u8003\u6587\u732e\uff1a [1] NVIDIA Nsight Systems. https://docs.nvidia.com/nsight-systems/index.html.</p> <p>[2] NVIDIA Nsight Compute. https://docs.nvidia.com/nsight-compute/index.html.</p> <p>[3] Williams, S., Waterman, A., &amp; Patterson, D. (2009). Roofline: an insightful visual performance model for multicore architectures. Communications of the ACM, 52(4), 65-76.  </p>"},{"location":"final/projects/TRAINING_SWAP/","title":"\u5927\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u663e\u5b58\u6362\u51fa\u6362\u5165\u63a2\u7d22","text":""},{"location":"final/projects/TRAINING_SWAP/#_2","title":"\u4e00\u3001\u4efb\u52a1\u8bf4\u660e","text":""},{"location":"final/projects/TRAINING_SWAP/#11","title":"1.1 \u80cc\u666f","text":"<p>\u8fd1\u5e74\u6765\uff0c\u5927\u6a21\u578b\u84ec\u52c3\u53d1\u5c55\uff0c\u5728\u5404\u4e2a\u9886\u57df\u7684\u5e94\u7528\u8d8a\u6765\u8d8a\u5e7f\u6cdb\u3002\u5f53\u524d\u666e\u904d\u8ba4\u4e3a\u63d0\u9ad8\u6a21\u578b\u80fd\u529b\u7684\u6700\u6709\u6548\u7684\u9014\u5f84\u4e4b\u4e00\u662f\u589e\u52a0\u6a21\u578b\u7684\u53c2\u6570\u91cf\u3002\u7136\u800c\u53c2\u6570\u91cf\u8d8a\u6765\u8d8a\u591a\uff0c\u610f\u5473\u7740\u8bad\u7ec3\u6a21\u578b\u65f6\u5360\u7528\u663e\u5b58\u8d8a\u6765\u8d8a\u9ad8\u3002\u5728\u6240\u5360\u7528\u7684\u663e\u5b58\u4e2d\uff0c\u4e00\u5927\u90e8\u5206\u663e\u5b58\u7528\u4e8e\u5c06\u524d\u5411\u8ba1\u7b97\u4e2d\u4ea7\u751f\u7684\u6fc0\u6d3b\u503c\uff08activation\uff09\u4fdd\u5b58\u5230\u53cd\u5411\u4ee5\u8ba1\u7b97\u68af\u5ea6\u503c\u3002</p>"},{"location":"final/projects/TRAINING_SWAP/#12","title":"1.2 \u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u663e\u5b58\u6362\u51fa\u6362\u5165","text":"<p>\u4e3a\u4e86\u7a81\u7834\u663e\u5b58\u7684\u7269\u7406\u5bb9\u91cf\u9650\u5236\uff0c\u8bad\u7ec3\u5927\u6a21\u6a21\u578b\u65f6\u53ef\u4ee5\u91c7\u7528\u663e\u5b58\u6362\u51fa\u4e0e\u6362\u5165\u6280\u672f\u4ee5\u5229\u7528\u5206\u7ea7\u5185\u5b58\u5bb9\u7eb3\u66f4\u5927\u6a21\u578b\u7684\u8bad\u7ec3\u3002\u7531\u4e8e\u6fc0\u6d3b\u503c\u5728\u524d\u5411\u7684\u6700\u540e\u4e00\u6b21\u4f7f\u7528\u5230\u53cd\u5411\u7684\u7b2c\u4e00\u6b21\u4f7f\u7528\u671f\u95f4\u5b58\u5728\u8f83\u957f\u7a7a\u95f2\u65f6\u95f4\uff0c\u5728\u524d\u5411\u6700\u540e\u4e00\u6b21\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6fc0\u6d3b\u503c\u6362\u51fa\u5230 CPU DRAM \u4e0a\uff0c\u5728\u53cd\u5411\u7b2c\u4e00\u6b21\u4f7f\u7528\u4e4b\u524d\u518d\u5c06\u5176\u6362\u5165\u56de GPU \u663e\u5b58\u4e2d\uff0c\u5728\u8fd9\u671f\u95f4\u7a7a\u51fa\u7684\u663e\u5b58\u53ef\u4ee5\u7528\u4e8e\u5bb9\u7eb3\u66f4\u5927\u7684\u6a21\u578b\u7684\u8bad\u7ec3\u3002\u5408\u7406\u7684\u6362\u51fa\u7b56\u7565\u53ef\u4ee5\u5728\u6709\u9650\u7684\u663e\u5b58\u6761\u4ef6\u4e0b\u652f\u6301\u66f4\u5927\u89c4\u6a21\u7684\u6a21\u578b\u8bad\u7ec3\uff0c\u4f46\u4e5f\u4f1a\u5f15\u5165\u989d\u5916\u7684\u901a\u4fe1\u5f00\u9500\u548c\u8ba1\u7b97\u5ef6\u8fdf\uff0c\u53ef\u4ee5\u901a\u8fc7\u6362\u5165\u6362\u51fa\u4e0e\u8ba1\u7b97\u7684\u5e76\u884c\u6267\u884c\uff0c\u5c06\u6362\u5165\u6362\u51fa\u7684\u5f00\u9500\u63a9\u85cf\u5728\u8ba1\u7b97\u4e2d\u3002</p>"},{"location":"final/projects/TRAINING_SWAP/#_3","title":"\u4e8c\u3001\u6280\u672f\u8def\u7ebf","text":"<p>\u6280\u672f\u8def\u7ebf\u4e00\uff1aPyTorch \u6846\u67b6 cpp \u4fa7\u4fee\u6539\u6846\u67b6\u4ee3\u7801</p> <ol> <li>\u5bfb\u627e\u5408\u9002\u7684\u6362\u51fa\u6362\u5165\u64cd\u4f5c\u4e0b\u53d1\u4f4d\u7f6e\uff0c\u53ef\u5c1d\u8bd5\u65b9\u6848\uff1a<ul> <li>\u5728 PyTorch \u6846\u67b6\u6e90\u7801\u5bfb\u627e\u8ba1\u7b97\u7b97\u5b50\u4e0b\u53d1\u7684\u7edf\u4e00\u5165\u53e3</li> <li>\u4fee\u6539 codegen \u4ee3\u7801\uff0c\u4e3a\u6bcf\u4e2a\u81ea\u52a8\u751f\u6210\u7684\u7b97\u5b50\u52a0\u5165 hook\uff0c\u4ee5 hook \u51fd\u6570\u4f5c\u4e3a\u4e0b\u53d1\u4f4d\u7f6e</li> <li>\u5176\u4ed6\u53ef\u884c\u65b9\u6848</li> </ul> </li> <li>\u5728\u9009\u51fa\u7684\u4e0b\u53d1\u4f4d\u7f6e\u4e2d\u63d2\u5165\u6362\u5165\u6362\u51fa\u64cd\u4f5c</li> </ol> <p>\u6280\u672f\u8def\u7ebf\u4e8c\uff1aPython \u4fa7\u4fee\u6539 Megatron \u6216\u5176\u4ed6\u6846\u67b6\u4ee3\u7801</p> <ol> <li>\u5bfb\u627e\u5408\u9002\u7684\u6362\u51fa\u6362\u5165\u64cd\u4f5c\u4e0b\u53d1\u4f4d\u7f6e</li> <li>\u4ece PyTorch \u6587\u6863\u4e2d\u641c\u5bfb Tensor \u62f7\u8d1d\u63a5\u53e3\uff0c\u4f5c\u4e3a\u6362\u5165\u6362\u51fa\u63a5\u53e3\u8c03\u7528</li> <li>\u5728\u9009\u51fa\u7684\u4e0b\u53d1\u4f4d\u7f6e\u4e2d\u63d2\u5165\u6362\u5165\u6362\u51fa\u64cd\u4f5c</li> </ol> <p>\u53c2\u8003\u6587\u732e\uff1a</p> <p>[1] Rhu, Minsoo, et al. \"vDNN: Virtualized deep neural networks for scalable, memory-efficient neural network design.\" 2016 49th Annual IEEE/ACM International Symposium on Microarchitecture (MICRO). IEEE, 2016.</p> <p>[2] Peng, Xuan, et al. \"Capuchin: Tensor-based gpu memory management for deep learning.\" Proceedings of the Twenty-Fifth International Conference on Architectural Support for Programming Languages and Operating Systems. 2020.</p> <p>[3] Yuan, Tailing, et al. \"Accelerating the training of large language models using efficient activation rematerialization and optimal hybrid parallelism.\" 2024 USENIX Annual Technical Conference (USENIX ATC 24). 2024. </p>"},{"location":"final/projects/TRAINING_SWAP/#_4","title":"\u4e09\u3001\u5b9e\u9a8c\u8981\u6c42","text":"<ol> <li>\u57fa\u7840\u6362\u51fa\u6362\u5165\u64cd\u4f5c\u5c1d\u8bd5\uff08\u5fc5\u9009\uff09<ul> <li>\u9009\u62e9\u4ee5\u4e0a\u4e24\u4e2a\u6280\u672f\u8def\u7ebf\u4e4b\u4e00\uff0c\u5c1d\u8bd5\u5c06\u4e00\u4e2a\u6fc0\u6d3b\u503c\u6309\u7167\u5176\u751f\u547d\u5468\u671f\u8fdb\u884c\u6362\u51fa\u6362\u5165\u800c\u4e0d\u5f71\u54cd\u8bad\u7ec3\u7684\u6b63\u786e\u8fd0\u884c</li> <li>\u901a\u8fc7 profiling \u5de5\u5177\u91c7\u96c6\u63d2\u5165\u6362\u51fa\u6362\u5165\u64cd\u4f5c\u540e\u7684\u8bad\u7ec3 trace\uff0c\u5728\u5176\u4e2d\u627e\u5230\u6240\u63d2\u5165\u7684\u62f7\u8d1d\u7b97\u5b50\uff0c\u5224\u65ad\u5176\u662f\u5426\u6309\u9884\u671f\u6267\u884c</li> </ul> </li> <li>\u6362\u5165\u6362\u51fa\u64cd\u4f5c\u4e0e\u8ba1\u7b97\u7684\u63a9\u76d6\u6267\u884c\u4f18\u5316\uff08\u53ef\u9009\uff09<ul> <li>\u4f7f\u7528\u5355\u72ec\u7684\u6d41\u6267\u884c\u6362\u51fa\u6362\u5165\u64cd\u4f5c\uff0c\u6ce8\u610f\u9700\u8981\u901a\u8fc7\u6d41\u95f4\u540c\u6b65\u64cd\u4f5c\u786e\u4fdd\u6362\u51fa\u6362\u5165\u64cd\u4f5c\u4e0e\u8ba1\u7b97\u7b97\u5b50\u4e4b\u95f4\u7684\u6570\u636e\u4f9d\u8d56\u4e0d\u88ab\u6253\u7834\uff0c\u786e\u4fdd\u4e0d\u5f71\u54cd\u8bad\u7ec3\u7cbe\u5ea6</li> <li>\u8003\u8651\u63d0\u524d\u89e6\u53d1\u6362\u5165\u64cd\u4f5c\uff0c\u6d88\u9664\u4f9d\u8d56\u88ab\u6362\u51fa\u68af\u5ea6\u7684\u53cd\u5411\u7b97\u5b50\u5bf9\u6362\u5165\u64cd\u4f5c\u7684\u7b49\u5f85</li> <li>\u8003\u8651\u52a0\u5165\u591a\u4e2a\u6362\u51fa\u6362\u5165\u64cd\u4f5c\uff0c\u4ee5\u5bb9\u7eb3\u66f4\u5927\u6a21\u578b\u7684\u8bad\u7ec3</li> </ul> </li> </ol>"},{"location":"final/projects/TRAINING_SWAP/#_5","title":"\u56db\u3001\u63d0\u4ea4\u5185\u5bb9","text":"<ol> <li>\u4ee3\u7801<ul> <li>\u4ee3\u7801\u7ed3\u6784\u4e0d\u505a\u8981\u6c42</li> <li>\u8981\u7ed9\u51fa\u80fd\u591f\u8fd0\u884c\u7684python\u73af\u5883\uff08requirement.txt\uff09</li> <li>\u8981\u7ed9\u51fa\u80fd\u6210\u529f\u8fd0\u884c\u4ee3\u7801\u7684\u811a\u672c</li> </ul> </li> <li>\u62a5\u544a<ul> <li>\u5b9e\u73b0\u65b9\u6cd5\uff1a\u8be6\u7ec6\u63cf\u8ff0\u5b9e\u73b0\u65b9\u6cd5</li> <li>\u5b9e\u9a8c\u7ed3\u679c\uff1a<ul> <li>\u5c55\u793a\u91c7\u96c6\u5305\u542b\u6362\u51fa\u6362\u5165\u64cd\u4f5c\u7684 profiling \u7ed3\u679c</li> <li>\u5c55\u793a\u7ecf\u8fc7\u4f18\u5316\u540e\u5355\u5361\u4e0b\u80fd\u591f\u8bad\u7ec3\u7684\u6700\u5927\u6a21\u578b\u5927\u5c0f\uff0c\u4ee5\u53ca\u76f8\u5e94\u7684\u8bad\u7ec3\u6027\u80fd</li> </ul> </li> <li>\u7ed3\u679c\u5206\u6790\uff1a\u5bf9\u4ee5\u4e0a\u5b9e\u9a8c\u7ed3\u679c\u8fdb\u884c\u5206\u6790</li> </ul> </li> </ol>"},{"location":"final/projects/TRAINING_SWAP/#_6","title":"\u4e94\u3001\u6ce8\u610f\u4e8b\u9879","text":"<p>\u53c2\u8003\u6587\u732e\uff1a \u5982\u679c\u4f60\u5728\u5b9e\u9a8c\u548c\u62a5\u544a\u4e2d\u53c2\u8003\u4e86\u5df2\u53d1\u8868\u7684\u6587\u732e\uff0c\u8bf7\u5217\u51fa\u4f60\u6240\u53c2\u8003\u7684\u76f8\u5173\u6587\u732e\u3002 \u5982\u6709\u7591\u95ee\uff0c\u8bf7\u8054\u7cfb wzbwangzhibin@gmail.com \u6216 wangzb@smail.nju.edu.cn\u3002</p>"},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E4%B8%80%E4%BB%8B%E7%BB%8D/","title":"\u5b9e\u9a8c\u4e00\uff1a\u73af\u5883\u914d\u7f6e\u53caPyTorch\u7ec3\u4e60","text":""},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E4%B8%80%E4%BB%8B%E7%BB%8D/#_1","title":"\u5b9e\u9a8c\u4efb\u52a1","text":"<p>\u672c\u6b21\u5b9e\u9a8c\u5206\u4e3a\u4e24\u4e2a\u4efb\u52a1\uff1a\u73af\u5883\u914d\u7f6e\uff08\u7ea690\u5206\u949f\uff09\u548cPyTorch\u7ec3\u4e60\uff08\u7ea660\u5206\u949f\uff09\u3002</p>"},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E4%B8%80%E4%BB%8B%E7%BB%8D/#_2","title":"\u4efb\u52a1\u4e00\uff1a\u73af\u5883\u914d\u7f6e","text":"<p>\u73af\u5883\u914d\u7f6e\u90e8\u5206\u6d89\u53ca\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <ul> <li>\u7f16\u7a0bIDE\u73af\u5883\uff08VSCode\uff09\u5b89\u88c5\u4e0e\u914d\u7f6e</li> <li>Docker\u7684\u5b89\u88c5\u4e0e\u4f7f\u7528</li> <li>conda\u4e0ePyTorch\u73af\u5883\u914d\u7f6e</li> <li>Jupyter Notebook\u7684\u4f7f\u7528</li> </ul> <p>\u8bf7\u53c2\u8003\u73af\u5883\u914d\u7f6e\u6307\u5357\uff0c\u6309\u7167\u6587\u6863\u4e2d\u8be6\u7ec6\u6b65\u9aa4\u8fdb\u884c\u64cd\u4f5c\uff0c\u5b8c\u6210\u73af\u5883\u914d\u7f6e\u3002</p>"},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E4%B8%80%E4%BB%8B%E7%BB%8D/#pytorch_1","title":"\u4efb\u52a1\u4e8c\uff1aPyTorch\u7ec3\u4e60","text":"<p>\u5b8c\u6210Docker\u548cPyTorch\u73af\u5883\u914d\u7f6e\u540e\uff0c\u5373\u53ef\u5f00\u59cbPyTorch\u7ec3\u4e60\u90e8\u5206\u3002\u76f8\u5173\u7684\u7ec3\u4e60\u4ee3\u7801\u5df2\u4ee5Jupyter Notebook\u5f62\u5f0f\u63d0\u4f9b\uff0c\u4f46\u90e8\u5206\u4ee3\u7801\u5355\u5143\u683c\u9700\u8981\u8865\u5168\u624d\u80fd\u6b63\u5e38\u8fd0\u884c\u3002\u8bf7\u786e\u4fdd\u9010\u6b65\u5b8c\u6210\u4ee3\u7801\u8865\u5145\uff0c\u786e\u4fdd\u6bcf\u4e2a\u5355\u5143\u683c\u80fd\u591f\u987a\u5229\u6267\u884c\u3002</p> <p>\u4e0b\u8f7d\u7ec3\u4e60\u4ee3\u7801</p>"},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E4%B8%80%E4%BB%8B%E7%BB%8D/#_3","title":"\u5b9e\u9a8c\u63d0\u4ea4","text":"<p>\u5b9e\u9a8c\u5b8c\u6210\u540e\uff0c\u8bf7\u63d0\u4ea4\u4ee5\u4e0b\u6750\u6599\uff08PDF\u62a5\u544a\u5728\u5b9e\u9a8c\u4e8c\u4e4b\u540e\u63d0\u4ea4\uff09\uff1a</p> <ol> <li>\u8fd0\u884c\u6210\u529f\u7684Jupyter Notebook\u6587\u4ef6</li> <li>\u4e00\u4efdPDF\u62a5\u544a\uff0c\u62a5\u544a\u5185\u5bb9\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a<ol> <li>\u5b9e\u9a8c\u8fc7\u7a0b\u4e2d\u6bcf\u4e00\u6b65\u7684\u622a\u56fe\uff08\u5305\u62ec\u73af\u5883\u914d\u7f6e\u6bcf\u4e00\u6b65\u622a\u56fe\u53caPyTorch\u7ec3\u4e60\u4ee3\u7801\u8fd0\u884c\u622a\u56fe\uff09</li> <li>\u5b9e\u9a8c\u5fc3\u5f97\u4e0e\u4f53\u4f1a</li> </ol> </li> </ol>"},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E4%B8%80%E4%BB%A3%E7%A0%81/","title":"\u5b9e\u9a8c\u4efb\u52a1\u4e8c\uff1aPyTorch\u7ec3\u4e60","text":""},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E4%B8%80%E4%BB%A3%E7%A0%81/#pytorch_1","title":"Pytorch\u7ec3\u4e60\u4ee3\u7801","text":"<p>\u4e0b\u8f7d\u6b64\u7ec3\u4e60\u4ee3\u7801</p>"},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E4%B8%80%E4%BB%A3%E7%A0%81/#pytorch_2","title":"PyTorch\u5165\u95e8","text":"<p>\u76ee\u6807 \u901a\u8fc7\u672c\u6b21\u5b9e\u9a8c\uff0c\u4f60\u5c06\u638c\u63e1\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <ol> <li>PyTorch \u6846\u67b6\u7684\u6838\u5fc3\u7ec4\u4ef6\uff08\u5f20\u91cf\u3001\u81ea\u52a8\u6c42\u5bfc\u3001\u795e\u7ecf\u7f51\u7edc\u6a21\u5757\uff09\u3002</li> <li>\u57fa\u7840\u5f20\u91cf\u64cd\u4f5c\u4e0eAPI\u7684\u4f7f\u7528\u3002</li> <li>\u4f7f\u7528\u5f20\u91cf\u64cd\u4f5c\u548c\u68af\u5ea6\u4e0b\u964d\u6cd5\u5b9e\u73b0\u7ebf\u6027\u56de\u5f52\u6a21\u578b</li> </ol>"},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E4%B8%80%E4%BB%A3%E7%A0%81/#1","title":"1. \u73af\u5883\u51c6\u5907","text":"<p>\u786e\u4fdd\u5df2\u5b89\u88c5 PyTorch\uff08\u672c\u8282\u63a8\u8350\u4f7f\u7528\u6700\u65b0\u7248\u672c\uff0c\u540e\u7eed\u7ae0\u8282\u6309\u9700\u8981\u9009\u62e9\u5408\u9002\u7248\u672c\uff09\uff1a</p>"},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E4%B8%80%E4%BB%A3%E7%A0%81/#conda-anaconda","title":"\u4f7f\u7528 conda \u5b89\u88c5\uff08\u9700\u63d0\u524d\u5b89\u88c5 Anaconda\uff09","text":"<p>conda install pytorch torchvision torchaudio -c pytorch</p>"},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E4%B8%80%E4%BB%A3%E7%A0%81/#pip-cuda","title":"\u6216\u4f7f\u7528 pip \u5b89\u88c5\uff08\u6839\u636eCUDA\u7248\u672c\u9009\u62e9\uff09","text":"<p>pip install torch torchvision</p>"},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E4%B8%80%E4%BB%A3%E7%A0%81/#2","title":"2. \u6570\u636e\u64cd\u4f5c","text":"<p>\u9996\u5148\uff0c\u6211\u4eec\u5bfc\u5165 torch\u3002\u8bf7\u6ce8\u610f\uff0c\u867d\u7136\u5b83\u88ab\u79f0\u4e3aPyTorch\uff0c\u4f46\u6211\u4eec\u5e94\u8be5\u5bfc\u5165 torch \u800c\u4e0d\u662f pytorch</p> <pre><code>import torch\n\nprint(torch.__version__)\n</code></pre> <p>\u5f20\u91cf\u8868\u793a\u7531\u4e00\u4e2a\u6570\u503c\u7ec4\u6210\u7684\u6570\u7ec4\uff0c\u8fd9\u4e2a\u6570\u7ec4\u53ef\u80fd\u6709\u591a\u4e2a\u7ef4\u5ea6; \u53ef\u4ee5\u901a\u8fc7\u5f20\u91cf\u7684 shape \u5c5e\u6027\u6765\u8bbf\u95ee\u5f20\u91cf\u7684\u5f62\u72b6 \u548c\u5f20\u91cf\u4e2d\u5143\u7d20\u7684\u603b\u6570</p> <pre><code>x = torch.arange(12)\nprint(x)\nprint(x.shape)\nprint(x.numel())\n</code></pre> <p>\u8981\u6539\u53d8\u4e00\u4e2a\u5f20\u91cf\u7684\u5f62\u72b6\u800c\u4e0d\u6539\u53d8\u5143\u7d20\u6570\u91cf\u548c\u5143\u7d20\u503c\uff0c\u53ef\u4ee5\u8c03\u7528 reshape \u51fd\u6570</p> <pre><code>X = x.reshape(3, 4)\nprint(X)\n</code></pre> <p>\u4f7f\u7528\u51680\u3001\u51681\u3001\u5176\u4ed6\u5e38\u91cf\u6216\u8005\u4ece\u7279\u5b9a\u5206\u5e03\u4e2d\u968f\u673a\u91c7\u6837\u7684\u6570\u5b57</p> <pre><code>print(torch.zeros((2, 3, 4)))\nprint(torch.ones((2, 3, 4)))\nprint(torch.randn(3, 4))\n</code></pre> <p>\u901a\u8fc7\u63d0\u4f9b\u5305\u542b\u6570\u503c\u7684 Python \u5217\u8868\uff08\u6216\u5d4c\u5957\u5217\u8868\uff09\u6765\u4e3a\u6240\u9700\u5f20\u91cf\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8d4b\u4e88\u786e\u5b9a\u503c</p> <pre><code>torch.tensor([[2, 1, 4, 3], [1, 2, 3, 4], [4, 3, 2, 1]])\n</code></pre> <p>\u5e38\u89c1\u7684\u6807\u51c6\u7b97\u672f\u8fd0\u7b97\u7b26\uff08+\u3001-\u3001\u3001/ \u548c *\uff09\u90fd\u53ef\u4ee5\u88ab\u5347\u7ea7\u4e3a\u6309\u5143\u7d20\u8fd0\u7b97</p> <pre><code>x = torch.tensor([1.0, 2, 4, 8])\ny = torch.tensor([2, 2, 2, 2])\nx + y, x - y, x * y, x / y, x**y\n</code></pre> <p>\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a\u591a\u4e2a\u5f20\u91cf \u8fde\u7ed3\uff08concatenate\uff09 \u5728\u4e00\u8d77</p> <pre><code>X = torch.arange(12, dtype=torch.float32).reshape((3, 4))\nY = torch.tensor([[2.0, 1, 4, 3], [1, 2, 3, 4], [4, 3, 2, 1]])\ntorch.cat((X, Y), dim=0), torch.cat((X, Y), dim=1)\n</code></pre> <p>\u901a\u8fc7 \u903b\u8f91\u8fd0\u7b97\u7b26 \u6784\u5efa\u4e8c\u5143\u5f20\u91cf</p> <pre><code>print(X == Y)\n</code></pre> <p>\u5bf9\u5f20\u91cf\u4e2d\u7684\u6240\u6709\u5143\u7d20\u8fdb\u884c\u6c42\u548c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u5f20\u91cf</p> <pre><code>print(X.sum())\n</code></pre> <p>\u5373\u4f7f\u5f62\u72b6\u4e0d\u540c\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 \u5e7f\u64ad\u673a\u5236 \uff08broadcasting mechanism\uff09 \u6765\u6267\u884c\u6309\u5143\u7d20\u64cd\u4f5c</p> <pre><code>a = torch.arange(3).reshape((3, 1))\nb = torch.arange(2).reshape((1, 2))\nprint(a, b)\nprint(a + b)\n</code></pre> <pre><code>tensor([[0],\n        [1],\n        [2]]) tensor([[0, 1]])\ntensor([[0, 1],\n        [1, 2],\n        [2, 3]])\n</code></pre> <p>\u53ef\u4ee5\u7528 [-1] \u9009\u62e9\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u53ef\u4ee5\u7528 [1:3] \u9009\u62e9\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u5143\u7d20</p> <pre><code>print(X[-1])\nprint(X[1:3])\n</code></pre> <p>\u4e3a\u591a\u4e2a\u5143\u7d20\u8d4b\u503c\u76f8\u540c\u7684\u503c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7d22\u5f15\u6240\u6709\u5143\u7d20\uff0c\u7136\u540e\u4e3a\u5b83\u4eec\u8d4b\u503c</p> <pre><code>X[0:2, :] = 12\nprint(X)\n</code></pre> <p>\u8f6c\u6362\u4e3a NumPy \u5f20\u91cf</p> <pre><code>A = X.numpy()\nB = torch.tensor(A)\nprint(type(A), type(B))\n</code></pre> <p>\u5c06\u5927\u5c0f\u4e3a1\u7684\u5f20\u91cf\u8f6c\u6362\u4e3a Python \u6807\u91cf</p> <pre><code>a = torch.tensor([3.5])\na, a.item(), float(a), int(a)\n</code></pre> <p>Tensor on GPU</p> <pre><code># \u4ee5\u4e0b\u4ee3\u7801\u53ea\u6709\u5728PyTorch GPU\u7248\u672c\u4e0a\u624d\u4f1a\u6267\u884c\nif torch.cuda.is_available():\n    device = torch.device(\"cuda\")          # GPU\n    y = torch.ones_like(x, device=device)  # \u76f4\u63a5\u521b\u5efa\u4e00\u4e2a\u5728GPU\u4e0a\u7684Tensor\n    x = x.to(device)                       # \u7b49\u4ef7\u4e8e .to(\"cuda\")\n    z = x + y\n    print(z)\n    print(z.to(\"cpu\", torch.double))       # to()\u8fd8\u53ef\u4ee5\u540c\u65f6\u66f4\u6539\u6570\u636e\u7c7b\u578b\n</code></pre>"},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E4%B8%80%E4%BB%A3%E7%A0%81/#3","title":"3.\u81ea\u52a8\u6c42\u5bfc","text":"<p>\u5047\u8bbe\u6211\u4eec\u60f3\u5bf9\u51fd\u6570\\(\\(y=2x^\u22a4x\\)\\) \u5173\u4e8e\u5217\u5411\u91cfx\u6c42\u5bfc</p> <pre><code>import torch\n\nx = torch.arange(4.0)\nprint(x)\n</code></pre> <p>\u5728\u6211\u4eec\u8ba1\u7b97y\u5173\u4e8ex\u7684\u68af\u5ea6\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5730\u65b9\u6765\u5b58\u50a8\u68af\u5ea6</p> <pre><code>x.requires_grad_(True)\nprint(x.grad)\n</code></pre> <p>\u73b0\u5728\u8ba9\u6211\u4eec\u8ba1\u7b97y</p> <pre><code>y = 2 * torch.dot(x, x)\nprint(y)\n</code></pre> <p>\u901a\u8fc7\u8c03\u7528\u53cd\u5411\u4f20\u64ad\u51fd\u6570\u6765\u81ea\u52a8\u8ba1\u7b97y\u5173\u4e8ex\u6bcf\u4e2a\u5206\u91cf\u7684\u68af\u5ea6</p> <pre><code>y.backward() #\u53cd\u5411\u4f20\u64ad\nprint(x.grad)\nprint(x.grad == 4 * x)\n</code></pre> <p>\u73b0\u5728\u8ba9\u6211\u4eec\u8ba1\u7b97x\u7684\u53e6\u4e00\u4e2a\u51fd\u6570</p> <pre><code>x.grad.zero_() #\u68af\u5ea6\u6e05\u96f6\ny = x.sum()\ny.backward()\nprint(x.grad)\n</code></pre> <p>\u6df1\u5ea6\u5b66\u4e60\u4e2d \uff0c\u6211\u4eec\u7684\u76ee\u7684\u4e0d\u662f\u8ba1\u7b97\u5fae\u5206\u77e9\u9635\uff0c\u800c\u662f\u6279\u91cf\u4e2d\u6bcf\u4e2a\u6837\u672c\u5355\u72ec\u8ba1\u7b97\u7684\u504f\u5bfc\u6570\u4e4b\u548c</p> <pre><code>x.grad.zero_()\ny = x * x\ny.sum().backward()\nprint(x.grad)\n</code></pre> <p>\u5c06\u67d0\u4e9b\u8ba1\u7b97\u79fb\u52a8\u5230\u8bb0\u5f55\u7684\u8ba1\u7b97\u56fe\u4e4b\u5916\u3002 \u5f53\u6211\u4eec\u8c03\u7528detach()\u65f6\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5f20\u91cf\uff0c\u8fd9\u4e2a\u5f20\u91cf\u7684requires_grad\u5c5e\u6027\u4e3aFalse\uff0c\u4e0d\u4f1a\u6709\u68af\u5ea6grad\u3002</p> <pre><code>x.grad.zero_()\ny = x * x\nu = y.detach() #u\u7684requires_grad\u5c5e\u6027\u4e3aFalse\nz = u * x\n\nz.sum().backward()\nprint(x.grad == u)\n</code></pre> <pre><code>x.grad.zero_()\ny.sum().backward()\nprint(x.grad == 2 * x)\n</code></pre> <p>\u5373\u4f7f\u6784\u5efa\u51fd\u6570\u7684\u8ba1\u7b97\u56fe\u9700\u8981\u901a\u8fc7Python\u63a7\u5236\u6d41\uff08\u4f8b\u5982\uff0c\u6761\u4ef6\u3001\u5faa\u73af\u6216\u4efb\u610f\u51fd\u6570\u8c03\u7528\uff09\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230\u7684\u53d8\u91cf\u7684\u68af\u5ea6</p> <pre><code>def f(a):\n    b = a * 2\n    while b.norm() &lt; 1000:\n        b = b * 2\n    if b.sum() &gt; 0:\n        c = b\n    else:\n        c = 100 * b\n    return c\n\na = torch.randn(size=(), requires_grad=True)\nd = f(a)\nd.backward()\n\nprint(a.grad == d / a)\n</code></pre>"},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E4%B8%80%E4%BB%A3%E7%A0%81/#4","title":"4.\u4ece\u96f6\u5b9e\u73b0\u7ebf\u6027\u56de\u5f52\u6a21\u578b","text":"<p>\u6211\u4eec\u5c06\u4ece\u96f6\u5f00\u59cb\u5b9e\u73b0\u6574\u4e2a\u65b9\u6cd5\uff0c\u5305\u62ec\u6570\u636e\u6d41\u6c34\u7ebf\u3001\u6a21\u578b\u3001\u635f\u5931\u51fd\u6570\u548c\u5c0f\u6279\u91cf\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u4f18\u5316\u5668</p> <pre><code>import random\nimport torch\n</code></pre> <p>\u6839\u636e\u5e26\u6709\u566a\u58f0\u7684\u7ebf\u6027\u6a21\u578b\u6784\u9020\u4e00\u4e2a\u4eba\u9020\u6570\u636e\u96c6\u3002 \u6211\u4eec\u4f7f\u7528\u7ebf\u6027\u6a21\u578b\u53c2\u6570w=[2,\u22123.4]\u22a4\u3001b=4.2\u548c\u566a\u58f0\u9879\u03f5 \u751f\u6210\u6570\u636e\u96c6\u53ca\u5176\u6807\u7b7e\uff1ay=Xw+b+\u03f5</p> <pre><code>def synthetic_data(w, b, num_examples):  \n    \"\"\"\u751f\u6210 y = Xw + b + \u566a\u58f0\u3002\"\"\"\n    X = torch.normal(0, 1, (num_examples, len(w)))\n    y = torch.matmul(X, w) + b\n    y += torch.normal(0, 0.01, y.shape)\n    return X, y.reshape((-1, 1))\n\ntrue_w = torch.tensor([2, -3.4])\ntrue_b = 4.2\nfeatures, labels = synthetic_data(true_w, true_b, 1000)\n</code></pre> <p>features \u4e2d\u7684\u6bcf\u4e00\u884c\u90fd\u5305\u542b\u4e00\u4e2a\u4e8c\u7ef4\u6570\u636e\u6837\u672c\uff0clabels \u4e2d\u7684\u6bcf\u4e00\u884c\u90fd\u5305\u542b\u4e00\u7ef4\u6807\u7b7e\u503c\uff08\u4e00\u4e2a\u6807\u91cf\uff09</p> <pre><code>print('features:', features[0], '\\nlabel:', labels[0])\n</code></pre> <p>\u4f7f\u7528 matplotlib \u6765\u7ed8\u5236\u6563\u70b9\u56fe\u3002\u6211\u4eec\u8fd9\u91cc\u5c55\u793a\u7b2c\u4e8c\u4e2a\u7279\u5f81(Feature 1)\u4e0e\u6807\u7b7e\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u53ef\u4ee5\u4f7f\u7528  pip install matplotlib  \u547d\u4ee4\u8fdb\u884c\u5b89\u88c5</p> <pre><code>import matplotlib.pyplot as plt\n# \u7ed8\u5236\u6563\u70b9\u56fe\nplt.figure(figsize=(8, 6)) # \u8bbe\u7f6e\u56fe\u8868\u5927\u5c0f\nplt.scatter(features[:, 1].detach().numpy(), labels.detach().numpy(), s=1) # \u7ed8\u5236\u6563\u70b9\u56fe\nplt.xlabel('Feature 1') # \u8bbe\u7f6ex\u8f74\u6807\u7b7e\nplt.ylabel('Label') # \u8bbe\u7f6ey\u8f74\u6807\u7b7e\nplt.title('Scatter plot of Feature 1 vs Labels') # \u8bbe\u7f6e\u56fe\u8868\u6807\u9898\nplt.show() # \u663e\u793a\u56fe\u8868\n</code></pre> <p>\u5b9a\u4e49\u4e00\u4e2adata_iter \u51fd\u6570\uff0c \u8be5\u51fd\u6570\u63a5\u6536\u6279\u91cf\u5927\u5c0f\u3001\u7279\u5f81\u77e9\u9635\u548c\u6807\u7b7e\u5411\u91cf\u4f5c\u4e3a\u8f93\u5165\uff0c\u751f\u6210\u5927\u5c0f\u4e3abatch_size\u7684\u5c0f\u6279\u91cf</p> <pre><code>def data_iter(batch_size, features, labels):\n    num_examples = len(features)\n    indices = list(range(num_examples))\n    random.shuffle(indices)\n    for i in range(0, num_examples, batch_size):\n        batch_indices = torch.tensor(indices[i:min(i + batch_size, num_examples)])\n        yield features[batch_indices], labels[batch_indices]\n\nbatch_size = 10\n\nfor X, y in data_iter(batch_size, features, labels):\n    print(X, '\\n', y)\n    break\n</code></pre> <p>\u521d\u59cb\u5316\u6a21\u578b\u53c2\u6570\u5e76\u5b9a\u4e49\u6a21\u578b</p> <pre><code>w = torch.normal(0, 0.01, size=(2, 1), requires_grad=True)\nb = torch.zeros(1, requires_grad=True)\n\ndef linreg(X, w, b):  \n    \"\"\"\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u3002\"\"\"\n    return torch.matmul(X, w) + b\n</code></pre> <p>\u635f\u5931\u51fd\u6570(Loss Function)\uff1a\u662f\u8861\u91cf\u6a21\u578b\u9884\u6d4b\u503c\u4e0e\u771f\u5b9e\u503c\u4e4b\u95f4\u5dee\u5f02\u7684\u6570\u5b66\u8868\u8fbe\u5f0f\uff0c\u662f\u6a21\u578b\u4f18\u5316\u7684\u6838\u5fc3\u76ee\u6807\u3002 \u5b83\u91cf\u5316\u4e86\u6a21\u578b\u7684\u9884\u6d4b\u9519\u8bef\u7a0b\u5ea6\uff0c\u5e76\u901a\u8fc7\u53cd\u5411\u4f20\u64ad\u9a71\u52a8\u53c2\u6570\u66f4\u65b0\u3002 \u7ebf\u6027\u56de\u5f52\u901a\u5e38\u4f7f\u7528\u5747\u65b9\u8bef\u5dee(Mean Squared Error, MSE)\uff0c\u8ba1\u7b97\u9884\u6d4b\u503c\u4e0e\u771f\u5b9e\u503c\u7684\u5e73\u65b9\u5dee\u7684\u5e73\u5747\u503c\u3002</p> <pre><code>def squared_loss(y_hat, y):  \n    \"\"\"\u5747\u65b9\u635f\u5931\u3002\"\"\"\n    return (y_hat - y.reshape(y_hat.shape))**2 / 2\n</code></pre> <p>\u4f18\u5316\u7b97\u6cd5\uff1aPytorch\u4e2d\u4f18\u5316\u5668\u7684\u529f\u80fd\u4e3a\u7ba1\u7406\u548c\u66f4\u65b0\u6a21\u578b\u4e2d\u53ef\u5b66\u4e60\u53c2\u6570\u7684\u503c\uff0c\u4f7f\u5f97\u6a21\u578b\u8f93\u51fa\u66f4\u63a5\u8fd1\u771f\u5b9e\u6807\u7b7e \u81ea\u52a8\u6c42\u5bfc\u6a21\u5757\u53ef\u4ee5\u6839\u636e\u635f\u5931\u51fd\u6570\u5bf9\u6a21\u578b\u7684\u53c2\u6570\u8fdb\u884c\u6c42\u68af\u5ea6\u8fd0\u7b97\u3002 \u4f18\u5316\u5668\u4f1a\u83b7\u53d6\u5f97\u5230\u7684\u68af\u5ea6\uff0c\u7136\u540e\u5229\u7528\u4e00\u4e9b\u7b56\u7565\u53bb\u66f4\u65b0\u6a21\u578b\u7684\u53c2\u6570\uff0c\u6700\u7ec8\u4f7f\u5f97\u635f\u5931\u51fd\u6570\u7684\u503c\u4e0b\u964d\u3002 \u6211\u4eec\u8fd9\u91cc\u91c7\u7528\u6700\u7b80\u5355\u7684\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u65b9\u6cd5\u3002</p> <pre><code>def sgd(params, lr, batch_size):  \n    \"\"\"\u5c0f\u6279\u91cf\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u3002\"\"\"\n    with torch.no_grad():\n        for param in params:\n            param -= lr * param.grad / batch_size\n            param.grad.zero_()\n</code></pre> <p>\u8bad\u7ec3\u8fc7\u7a0b</p> <pre><code>lr = 0.03 #\u5b66\u4e60\u7387\uff0c\u53ef\u81ea\u884c\u8c03\u6574\u89c2\u5bdf\u8bad\u7ec3\u7ed3\u679c\nnum_epochs = 3 #\u8bad\u7ec3\u8f6e\u6570\nnet = linreg \nloss = squared_loss #\u635f\u5931\u51fd\u6570\n\nfor epoch in range(num_epochs):\n    for X, y in data_iter(batch_size, features, labels):\n        l = loss(net(X, w, b), y)\n        l.sum().backward() #\u53cd\u5411\u4f20\u64ad\u66f4\u65b0loss\n        sgd([w, b], lr, batch_size)\n    with torch.no_grad(): #\n        train_l = loss(net(features, w, b), labels)\n        print(f'epoch {epoch + 1}, loss {float(train_l.mean()):f}')\n</code></pre> <p>\u6bd4\u8f83\u771f\u5b9e\u53c2\u6570\u548c\u901a\u8fc7\u8bad\u7ec3\u5b66\u5230\u7684\u53c2\u6570\u6765\u8bc4\u4f30\u8bad\u7ec3\u7684\u6210\u529f\u7a0b\u5ea6</p> <pre><code>print(f'w\u7684\u4f30\u8ba1\u8bef\u5dee: {true_w - w.reshape(true_w.shape)}')\nprint(f'b\u7684\u4f30\u8ba1\u8bef\u5dee: {true_b - b}')\n</code></pre>"},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E4%B8%80%E4%BB%A3%E7%A0%81/#5","title":"5.\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u7684\u7b80\u5355\u5b9e\u73b0","text":"<pre><code>import numpy as np\nimport torch\nfrom torch.utils import data\n\ndef synthetic_data(w, b, num_examples):  \n    \"\"\"\u751f\u6210 y = Xw + b + \u566a\u58f0\u3002\"\"\"\n    X = torch.normal(0, 1, (num_examples, len(w)))\n    y = torch.matmul(X, w) + b\n    y += torch.normal(0, 0.01, y.shape)\n    return X, y.reshape((-1, 1))\n\ntrue_w = torch.tensor([2, -3.4])\ntrue_b = 4.2\nfeatures, labels = synthetic_data(true_w, true_b, 1000)\n</code></pre> <p>\u8c03\u7528\u6846\u67b6\u4e2d\u73b0\u6709\u7684API\u6765\u8bfb\u53d6\u6570\u636e</p> <pre><code>def load_array(data_arrays, batch_size, is_train=True):  \n    \"\"\"\u6784\u9020\u4e00\u4e2aPyTorch\u6570\u636e\u8fed\u4ee3\u5668\u3002\"\"\"\n    dataset = data.TensorDataset(*data_arrays)\n    return data.DataLoader(dataset, batch_size, shuffle=is_train)\n\nbatch_size = 10\ndata_iter = load_array((features, labels), batch_size)\n\nnext(iter(data_iter))\n</code></pre> <p>\u4f7f\u7528PyTorch\u6846\u67b6\u7684\u9884\u5b9a\u4e49\u597d\u7684\u5c42\u5e76\u521d\u59cb\u5316\u6a21\u578b\u53c2\u6570</p> <pre><code>from torch import nn\n\nnet = nn.Sequential(nn.Linear(2, 1)) #\u7ebf\u6027\u5c42\nnet[0].weight.data.normal_(0, 0.01)\nnet[0].bias.data.fill_(0)\n</code></pre> <p>PyTorch\u4e2d\u8ba1\u7b97\u5747\u65b9\u8bef\u5dee\u4f7f\u7528\u7684\u662fMSELoss\u7c7b\uff0c\u4e5f\u79f0\u4e3a\u5e73\u65b9L2\u8303\u6570</p> <pre><code>loss = nn.MSELoss()\n</code></pre> <p>\u5b9e\u4f8b\u5316 SGD \u4f18\u5316\u5668\u5b9e\u4f8b</p> <pre><code>trainer = torch.optim.SGD(net.parameters(), lr=0.03)\n#trainer.zero_grad():\u4f18\u5316\u5668\u7684\u5e38\u7528\u65b9\u6cd5\uff0c\u6e05\u7a7a\u68af\u5ea6\n#trainer.step():\u4f18\u5316\u5668\u7684\u5e38\u7528\u65b9\u6cd5\uff0c\u5728\u635f\u5931\u53cd\u5411\u4f20\u64ad\u540e\u66f4\u65b0\u53c2\u6570\n</code></pre> <p>\u601d\u8003\uff1a\u6a21\u4eff\u7b2c\u56db\u8282\u7684\u8bad\u7ec3\u8fc7\u7a0b\uff0c\u4f7f\u7528\u4e0a\u8ff0\u4ecb\u7ecd\u7684pytorch API\u8865\u5168\u8bad\u7ec3\u8fc7\u7a0b</p> <pre><code>import numpy as np\nimport torch\nfrom torch import nn\nfrom torch.utils import data\n\ndef synthetic_data(w, b, num_examples):  \n    \"\"\"\u751f\u6210 y = Xw + b + \u566a\u58f0\u3002\"\"\"\n    X = torch.normal(0, 1, (num_examples, len(w)))\n    y = torch.matmul(X, w) + b\n    y += torch.normal(0, 0.01, y.shape)\n    return X, y.reshape((-1, 1))\n\ntrue_w = torch.tensor([2, -3.4])\ntrue_b = 4.2\nfeatures, labels = synthetic_data(true_w, true_b, 1000)\n\ndef load_array(data_arrays, batch_size, is_train=True):  \n    \"\"\"\u6784\u9020\u4e00\u4e2aPyTorch\u6570\u636e\u8fed\u4ee3\u5668\u3002\"\"\"\n    dataset = data.TensorDataset(*data_arrays)\n    return data.DataLoader(dataset, batch_size, shuffle=is_train)\n\nbatch_size = 10\ndata_iter = load_array((features, labels), batch_size)\n\nnet = nn.Sequential(nn.Linear(2, 1)) #\u7ebf\u6027\u5c42\nnet[0].weight.data.normal_(0, 0.01)\nnet[0].bias.data.fill_(0)\nloss = nn.MSELoss()\ntrainer = torch.optim.SGD(net.parameters(), lr=0.03)\n\nnum_epochs = 3\nfor epoch in range(num_epochs):\n    for X, y in data_iter:\n        #TODO:\u8ba1\u7b97\u635f\u5931\n        #TODO:\u6e05\u7a7a\u68af\u5ea6\n        #TODO:\u53cd\u5411\u4f20\u64ad\n        #TODO:\u4f18\u5316\u5668\u66f4\u65b0\u53c2\u6570\n    l = loss(net(features), labels)\n    print(f'epoch {epoch + 1}, loss {l:f}')\n</code></pre>"},{"location":"lab1/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/","title":"\u5b9e\u9a8c\u4efb\u52a1\u4e00\uff1a\u73af\u5883\u914d\u7f6e","text":"<p>\u5f00\u59cb\u4e4b\u524d</p> <p>\u5728\u4f7f\u7528\u4e4b\u524d\uff0c\u8bf7\u5148\u53c2\u8003\u5b9e\u9a8c\u4e00\u4ecb\u7ecd\uff0c\u4e86\u89e3\u5b9e\u9a8c\u8981\u6c42\u548c\u5b9e\u9a8c\u5185\u5bb9\u3002</p>"},{"location":"lab1/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/#visual-studio-code-vscode","title":"\u4e00\u3001\u5b89\u88c5 Visual Studio Code (VSCode)","text":"<p>VSCode \u4f18\u52bf</p> <ul> <li>\u8de8\u5e73\u53f0\u652f\u6301\uff1aWindows\u3001macOS \u548c Linux</li> <li>\u4e30\u5bcc\u7684\u6269\u5c55\u751f\u6001\uff1aPython\u3001Docker\u3001Jupyter\u7b49\u63d2\u4ef6</li> <li>\u5185\u7f6e Git \u96c6\u6210\uff1a\u65b9\u4fbf\u7248\u672c\u63a7\u5236</li> <li>\u667a\u80fd\u4ee3\u7801\u8865\u5168\uff1aIntelliSense\u652f\u6301</li> <li>\u8f7b\u91cf\u7ea7\u4f46\u5f3a\u5927\uff1a\u8d44\u6e90\u5360\u7528\u5c11\uff0c\u542f\u52a8\u5feb</li> <li>\u7ec8\u7aef\u96c6\u6210\uff1a\u5185\u7f6e\u7ec8\u7aef\u652f\u6301</li> <li>\u826f\u597d\u7684\u8c03\u8bd5\u652f\u6301\uff1a\u591a\u8bed\u8a00\u8c03\u8bd5\u5de5\u5177</li> </ul> <p>\u65b9\u6cd51\uff1a\u901a\u8fc7 Snap \u5b89\u88c5\uff08\u63a8\u8350\uff09</p> <p><pre><code>sudo snap install --classic code\n</code></pre> </p> \u65b9\u6cd52\uff1a\u901a\u8fc7APT\u4ed3\u5e93\u5b89\u88c5 <pre><code>sudo apt update\nsudo apt install -y software-properties-common apt-transport-https wget\nwget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; packages.microsoft.gpg\nsudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/\n</code></pre> <p>\u542f\u52a8VSCode</p> <pre><code>code\n</code></pre>"},{"location":"lab1/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/#docker","title":"\u4e8c\u3001\u5b89\u88c5 Docker","text":"<p>Docker \u4e3b\u8981\u4f18\u70b9</p> <ol> <li>\u73af\u5883\u9694\u79bb\uff1a\u6bcf\u4e2a Docker \u5bb9\u5668\u90fd\u662f\u72ec\u7acb\u7684\u73af\u5883\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5bbf\u4e3b\u673a\u6216\u5176\u4ed6\u5bb9\u5668</li> <li>\u8de8\u5e73\u53f0\u517c\u5bb9\u6027\uff1a\u5728\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u8fd0\u884c\u76f8\u540c\u7684 Docker \u5bb9\u5668\uff0c\u4e0d\u7528\u62c5\u5fc3\u73af\u5883\u5dee\u5f02</li> <li>\u6613\u4e8e\u90e8\u7f72\uff1a\u53ef\u4ee5\u5feb\u901f\u521b\u5efa\u3001\u590d\u5236\u548c\u9500\u6bc1\u5bb9\u5668\uff0c\u4f7f\u5f97\u5f00\u53d1\u548c\u751f\u4ea7\u73af\u5883\u4fdd\u6301\u4e00\u81f4</li> <li>\u8d44\u6e90\u9ad8\u6548\uff1a\u76f8\u6bd4\u865a\u62df\u673a\uff0cDocker \u5bb9\u5668\u5360\u7528\u7684\u7cfb\u7edf\u8d44\u6e90\u66f4\u5c11\uff0c\u542f\u52a8\u901f\u5ea6\u66f4\u5feb</li> <li>\u4f9d\u8d56\u7ba1\u7406\uff1aDocker \u5bb9\u5668\u5305\u542b\u6240\u6709\u4f9d\u8d56\u9879\uff0c\u907f\u514d\u4e86\"\u5728\u6211\u673a\u5668\u4e0a\u53ef\u4ee5\u8dd1\"\u7684\u95ee\u9898</li> </ol> <p>\u4f7f\u7528 Docker \u7684\u539f\u56e0</p> <ul> <li>\u7b80\u5316\u5f00\u53d1\u73af\u5883\u914d\u7f6e\uff1a\u5f00\u53d1\u8005\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Docker \u5bb9\u5668\uff0c\u800c\u65e0\u9700\u624b\u52a8\u5b89\u88c5\u590d\u6742\u7684\u8f6f\u4ef6\u4f9d\u8d56</li> <li>\u63d0\u9ad8\u56e2\u961f\u534f\u4f5c\u6548\u7387\uff1a\u56e2\u961f\u6210\u5458\u53ef\u4ee5\u5171\u4eab\u76f8\u540c\u7684 Docker \u955c\u50cf\uff0c\u786e\u4fdd\u73af\u5883\u4e00\u81f4</li> <li>\u65b9\u4fbf CI/CD \u96c6\u6210\uff1aDocker \u5141\u8bb8\u5728 CI/CD \u6d41\u6c34\u7ebf\u4e2d\u6784\u5efa\u548c\u90e8\u7f72\u5e94\u7528\uff0c\u63d0\u9ad8\u81ea\u52a8\u5316\u80fd\u529b</li> <li>\u6613\u4e8e\u6269\u5c55\u548c\u7ba1\u7406\uff1a\u53ef\u4ee5\u901a\u8fc7 Docker Compose \u8f7b\u677e\u7ba1\u7406\u591a\u4e2a\u5bb9\u5668\uff0c\u9002\u7528\u4e8e\u5fae\u670d\u52a1\u67b6\u6784</li> </ul> 1. \u5378\u8f7d\u65e7\u7248\u672c(\u4e86\u89e3) <pre><code>sudo apt remove docker docker-engine docker.io containerd runc\n</code></pre> <p>2. \u5b89\u88c5 Docker \u5b98\u65b9\u7248\u672c</p> <pre><code>sudo apt update\nsudo apt install -y ca-certificates curl gnupg\n\n# \u5b89\u88c5\u963f\u91cc\u4e91gpg\u8bc1\u4e66\ncurl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add \n\u00a0\n# \u5728\u6307\u5b9a\u76ee\u5f55\u4e0b\u65b0\u5efadocker.list\u6587\u4ef6\uff0c\u6dfb\u52a0\u963f\u91cc\u4e91\u955c\u50cf\u6e90\ncd /etc/apt/sources.list.d \u00a0 \u00a0 \u00a0 \u00a0\nsudo touch docker.list \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\nsudo chmod 666 docker.list\nsudo echo \"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\" &gt; docker.list\nsudo apt-get update &amp;&amp; sudo apt-get upgrade\nsudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre> <p>3. \u914d\u7f6e\u7528\u6237\u6743\u9650</p> <pre><code>sudo usermod -aG docker $USER\nnewgrp docker  # \u6216\u6ce8\u9500\u540e\u91cd\u65b0\u767b\u5f55\n</code></pre> <p>4. \u914d\u7f6e\u955c\u50cf\u6e90\u53caNVIDIA\u5bb9\u5668\u5de5\u5177\u5305</p> <pre><code># \u5b89\u88c5NVIDIA \u5bb9\u5668\u5de5\u5177\u5305\ncurl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\ndistribution=$(. /etc/os-release;echo $ID$VERSION_ID)\ncurl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\nsources.list.d/nvidia-docker.list\nsudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/7fa2af80.pub\nsudo add-apt-repository \"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/ /\"\n\nsudo apt update\nsudo apt install -y nvidia-container-toolkit\nsudo systemctl restart docker\n\n# \u914d\u7f6e\u955c\u50cf\u6e90\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'\n{\n    \"registry-mirrors\": [\n        \"https://docker.1ms.run\",\n        \"https://docker.xuanyuan.me\",\n        \"https://docker.nju.edu.cn\",\n        \"https://do.nark.eu.org\",\n        \"https://dc.j8.work\",\n        \"https://docker.m.daocloud.io\",\n        \"https://dockerproxy.com\",\n        \"https://docker.mirrors.ustc.edu.cn\"\n    ],\n    \"default-runtime\": \"nvidia\",\n    \"runtimes\": {\n        \"nvidia\": {\n        \"path\": \"nvidia-container-runtime\",\n        \"runtimeArgs\": []\n        }\n    }\n}\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n</code></pre> <p>\u9a8c\u8bc1\u5b89\u88c5</p> <pre><code>docker run hello-world\n</code></pre> <p></p>"},{"location":"lab1/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/#vscode-docker","title":"\u4e09\u3001\u914d\u7f6e VSCode \u4f7f\u7528 Docker","text":"<p>VSCode Docker \u96c6\u6210</p> <p>\u901a\u8fc7 VSCode \u7684 Docker \u6269\u5c55\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u7f16\u8f91\u5668\u5185\u7ba1\u7406\u5bb9\u5668\u3001\u955c\u50cf\u3001Docker Compose \u4ee5\u53ca Kubernetes \u8d44\u6e90\u3002</p> <p>1. \u5b89\u88c5 Docker \u6269\u5c55</p> <p>\u5728VSCode\u4e2d\u641c\u7d22\u5e76\u5b89\u88c5 Docker \u6269\u5c55\uff08Microsoft\u5b98\u65b9\u51fa\u54c1\uff09</p> <p>2. \u521b\u5efa\u5e76\u8fd0\u884c\u57fa\u7840\u5bb9\u5668</p> <pre><code>docker run -it --gpus all --name my-pytorch-env -v ~/:/workspace ubuntu:22.04 /bin/bash\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e</p> <ul> <li><code>-it</code>\uff1a\u4ea4\u4e92\u6a21\u5f0f</li> <li><code>--name</code>\uff1a\u5bb9\u5668\u540d\u79f0</li> <li><code>--gpus all</code>\uff1a\u4f7f\u7528\u6240\u6709GPU</li> <li><code>-v</code>\uff1a\u6302\u8f7d\u4e3b\u673a\u76ee\u5f55\u5230\u5bb9\u5668\uff08\u65b9\u4fbf\u4ee3\u7801\u540c\u6b65\uff09</li> <li><code>ubuntu:22.04</code>\uff1a\u57fa\u7840\u955c\u50cf</li> </ul> <p>3. \u8fde\u63a5\u5bb9\u5668</p> <p>\u70b9\u51fbVSCode\u5de6\u4e0b\u89d2 &gt;&lt; \u6309\u94ae\uff0c\u9009\u62e9 New Dev Container\u3002</p> <p>\u6ce8\u610f</p> <p>\u5982\u679c\u51fa\u73b0\u4ee5\u4e0b\u9519\u8bef\uff0c\u8bf7\u91cd\u542f\u7cfb\u7edf\u5373\u53ef\u3002</p> <p>\u91cd\u542f\u540e\u9700\u542f\u52a8docker\u5bb9\u5668\uff1a <pre><code>docker start my-pytorch-env\n</code></pre></p> <p>VSCode\u4e2d\u9009\u62e9 Attach to Running Container\uff0c\u9009\u62e9my-pytorch-env\u5bb9\u5668 </p>"},{"location":"lab1/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/#docker-conda-pytorch","title":"\u56db\u3001Docker\u5bb9\u5668\u5185\u914d\u7f6e Conda \u548c PyTorch","text":"<p>\u5bb9\u5668\u5185\u64cd\u4f5c</p> <p>\u786e\u4fdd\u4f60\u5df2\u7ecf\u8fdb\u5165Docker\u5bb9\u5668\u5185\u90e8\uff08workspace\u76ee\u5f55\u4e0b\uff09\uff1a</p> <p>ctrl+` \u53ef\u4ee5\u6253\u5f00VSCode\u5185docker container\u7ec8\u7aef\u9762\u677f</p> <p></p> <p>\u5fc5\u8981\u6269\u5c55\u5b89\u88c5</p> <p>\u6253\u5f00 VSCode\uff0c\u6309 <code>Ctrl + Shift + X</code> \u6253\u5f00\u6269\u5c55\u5e02\u573a\uff0c\u641c\u7d22\u5e76\u5b89\u88c5\uff1a</p> <ol> <li>Python\uff08Python\u4ee3\u7801\u652f\u6301\uff09</li> <li>Pylance\uff08\u4ee3\u7801\u8865\u5168\u548c\u7c7b\u578b\u68c0\u67e5\uff09</li> <li>Jupyter\uff08Jupyter Notebook\u652f\u6301\uff09</li> <li>Docker\uff08Docker\u652f\u6301\uff09</li> </ol> <p>1. \u5b89\u88c5 Miniconda</p> <pre><code>apt update &amp;&amp; apt install -y wget\n# wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nwget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-latest-Linux-x86_64.sh\nbash Miniconda3-latest-Linux-x86_64.sh -b\necho 'export PATH=\"/root/miniconda3/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\nconda init\n</code></pre> <p>\u6ce8\u610f</p> <p>conda init\u540e\u9700\u8981\u65b0\u5efa\u4e00\u4e2abash\u7ec8\u7aef\uff0c\u5426\u5219conda\u73af\u5883\u4e0d\u4f1a\u751f\u6548\u3002</p> <p>2. \u521b\u5efa PyTorch \u73af\u5883</p> <pre><code># \u6dfb\u52a0\u955c\u50cf\u6e90\nconda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/\nconda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/\nconda config --set show_channel_urls yes\n</code></pre> <pre><code># \u521b\u5efa\u5e76\u914d\u7f6e\u73af\u5883\nconda create -n pytorch python=3.10 -y\nconda activate pytorch\n</code></pre> <pre><code># \u5b89\u88c5pytorch\u53ca\u5b9e\u9a8c\u6240\u9700\u4f9d\u8d56\nconda install ipykernel matplotlib numpy\npip install torch==2.5.1 torchvision torchaudio -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple\n</code></pre> <p>3. \u9a8c\u8bc1 PyTorch</p> <pre><code>python -c \"import torch; print(torch.__version__); print(torch.cuda.is_available())\"\n</code></pre>"},{"location":"lab1/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/#jupyter-notebook","title":"\u4e94\u3001Jupyter Notebook\u4f7f\u7528","text":"<p>Jupyter Notebook \u7b80\u4ecb</p> <p>Jupyter Notebook \u662f\u4e00\u79cd\u975e\u5e38\u6d41\u884c\u7684\u5de5\u5177\uff0c\u5c24\u5176\u5728\u6570\u636e\u79d1\u5b66\u3001\u673a\u5668\u5b66\u4e60\u4ee5\u53ca\u6df1\u5ea6\u5b66\u4e60\u9886\u57df\uff0c\u7528\u4e8e\u4ea4\u4e92\u5f0f\u7f16\u7a0b\u548c\u5206\u6790\u3002\u4f60\u53ef\u4ee5\u5728\u5176\u4e2d\u7f16\u5199\u548c\u8fd0\u884c Python \u4ee3\u7801\uff0c\u8fd8\u80fd\u5373\u65f6\u67e5\u770b\u4ee3\u7801\u8f93\u51fa\u548c\u751f\u6210\u56fe\u8868\u3002\u5b83\u652f\u6301 Markdown \u548c LaTeX\uff0c\u9002\u5408\u8fdb\u884c\u6570\u636e\u5206\u6790\u62a5\u544a\u6216\u5b9e\u9a8c\u8bb0\u5f55\u3002</p> <p>\u5b9e\u9a8c\u6750\u6599</p> <p>\u5b9e\u9a8c\u6240\u9700\u7684jupyter notebook\u5728\u9644\u4ef6\u4e2d\u3002</p> <p>\u4e0b\u8f7d\u7ec3\u4e60\u4ee3\u7801</p> \u65b9\u5f0f\u4e00 \u7f51\u9875\u4f7f\u7528 <p><pre><code>pip install jupyter\n</code></pre> \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165 <code>jupyter notebook</code> \u542f\u52a8\u7f51\u9875\u3002</p> <p>\u65b9\u5f0f\u4e8c \u5728 VSCode \u4e2d\u4f7f\u7528\uff08\u63a8\u8350\uff09</p> <ol> <li>\u5b89\u88c5\u63d2\u4ef6\uff1a    </li> <li> <p>\u9009\u62e9Python\u73af\u5883\uff1a    \u5728\u53f3\u4e0a\u89d2\u53ef\u4ee5\u9009\u62e9\u6211\u4eec\u4e4b\u524d\u5b89\u88c5\u597d\u7684python\u73af\u5883(pytorch)    </p> vscode jupyter \u9009\u62e9\u73af\u5883\u4e0b\u8f7d\u63d2\u4ef6 <p>1.\u9009\u62e9\u4e0b\u8f7d\u63d2\u4ef6</p> <p></p> <p>2.\u8fd0\u884c\u5355\u5143\u683c\u65f6\uff0c\u51fa\u73b0\u9700\u8981\u4e0b\u8f7dipykernel\u73af\u5883\uff0c\u9009\u62e9yes(\u6216\u8005\u81ea\u884c\u5b89\u88c5ipykernel)</p> <p></p> </li> <li> <p>\u8fd0\u884c\u4ee3\u7801\uff1a    \u5728\u6253\u5f00\u7684 Notebook \u6587\u4ef6\u4e2d\uff0c\u4f60\u53ef\u4ee5\u50cf\u5728 Jupyter Notebook \u4e2d\u4e00\u6837\u8fd0\u884c\u4ee3\u7801\u5355\u5143\uff08cells\uff09\u3002\u6bcf\u4e2a\u5355\u5143\u683c\u53ef\u4ee5\u662f Python \u4ee3\u7801\uff0c\u4e5f\u53ef\u4ee5\u662f Markdown\uff0c\u7528\u4e8e\u6587\u6863\u7f16\u5199\u3002</p> </li> </ol>"},{"location":"lab1/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/#docker_1","title":"\u516d\u3001\u5bfc\u51fa\u4e0e\u5bfc\u5165 Docker \u5bb9\u5668","text":"<p>\u4e3a\u4ec0\u4e48\u9700\u8981\u5bfc\u51fa\u5bfc\u5165Docker\u5bb9\u5668\uff1f</p> <ol> <li> <p>\u73af\u5883\u5171\u4eab\uff1a</p> <ul> <li>\u53ef\u4ee5\u5c06\u914d\u7f6e\u597d\u7684\u5f00\u53d1\u73af\u5883\u5206\u4eab\u7ed9\u56e2\u961f\u5176\u4ed6\u6210\u5458</li> <li>\u786e\u4fdd\u6240\u6709\u4eba\u4f7f\u7528\u5b8c\u5168\u76f8\u540c\u7684\u73af\u5883\uff0c\u907f\u514d\"\u5728\u6211\u8fd9\u91cc\u80fd\u8fd0\u884c\"\u7684\u95ee\u9898</li> </ul> </li> <li> <p>\u73af\u5883\u5907\u4efd\uff1a</p> <ul> <li>\u4fdd\u5b58\u5df2\u914d\u7f6e\u597d\u7684\u73af\u5883\u72b6\u6001\uff0c\u9632\u6b62\u610f\u5916\u635f\u574f</li> <li>\u5728\u9700\u8981\u65f6\u53ef\u4ee5\u5feb\u901f\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001</li> </ul> </li> <li> <p>\u8de8\u673a\u5668\u8fc1\u79fb\uff1a</p> <ul> <li>\u65b9\u4fbf\u5728\u4e0d\u540c\u673a\u5668\u95f4\u8f6c\u79fb\u5f00\u53d1\u73af\u5883</li> <li>\u7279\u522b\u9002\u7528\u4e8e\u6ca1\u6709\u7a33\u5b9a\u7f51\u7edc\u8fde\u63a5\u7684\u60c5\u51b5\uff0c\u907f\u514d\u91cd\u65b0\u4e0b\u8f7d\u548c\u914d\u7f6e</li> </ul> </li> <li> <p>\u7248\u672c\u63a7\u5236\uff1a</p> <ul> <li>\u53ef\u4ee5\u4fdd\u5b58\u4e0d\u540c\u9636\u6bb5\u7684\u73af\u5883\u5feb\u7167</li> <li>\u5728\u9700\u8981\u65f6\u56de\u6eda\u5230\u7279\u5b9a\u7248\u672c</li> </ul> </li> </ol> <p>\u6ce8\u610f</p> <p>\u4ee5\u4e0b\u547d\u4ee4\u9700\u8981\u5728Ubuntu\u7ec8\u7aef\uff08terminal\uff09\u4e2d\u8fd0\u884c\uff0c\u800c\u4e0d\u662f\u5bb9\u5668\u5185\u90e8\u3002</p> <p>1. \u5bfc\u51fa\u5bb9\u5668\u4e3a\u955c\u50cf</p> <pre><code>docker commit my-pytorch-env my-pytorch-image:latest\n</code></pre> <p>\u8bf4\u660e</p> <ul> <li>\u5c06\u8fd0\u884c\u4e2d\u5bb9\u5668\u7684\u5f53\u524d\u72b6\u6001\u4fdd\u5b58\u4e3a\u65b0\u7684\u955c\u50cf</li> <li><code>my-pytorch-env</code>\uff1a\u5bb9\u5668\u540d\u79f0</li> <li><code>my-pytorch-image:latest</code>\uff1a\u65b0\u955c\u50cf\u540d\u79f0\u548c\u6807\u7b7e</li> </ul> <p>2. \u5bfc\u51fa\u955c\u50cf\u4e3a\u6587\u4ef6</p> <pre><code>docker save -o my-pytorch-image.tar my-pytorch-image:latest\n</code></pre> <p>\u8bf4\u660e</p> <ul> <li>\u5c06\u955c\u50cf\u4fdd\u5b58\u4e3a\u53ef\u4f20\u8f93\u7684tar\u6587\u4ef6</li> <li><code>-o</code>\uff1a\u6307\u5b9a\u8f93\u51fa\u6587\u4ef6</li> <li>\u751f\u6210\u7684tar\u6587\u4ef6\u53ef\u4ee5\u5728\u4e0d\u540c\u673a\u5668\u95f4\u4f20\u8f93</li> </ul> <p>3. \u5bfc\u5165\u955c\u50cf</p> <pre><code>docker load -i my-pytorch-image.tar\n</code></pre>"},{"location":"lab2/MINIST%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/","title":"\u6df1\u5ea6\u5b66\u4e60\u5e73\u53f0\u8bfe\u7a0b\u5b9e\u9a8c\u6559\u7a0b","text":""},{"location":"lab2/MINIST%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/#_2","title":"\u795e\u7ecf\u7f51\u7edc\u57fa\u7840","text":"<p>\u5b9e\u9a8c\u76ee\u6807</p> <p>\u901a\u8fc7\u672c\u6b21\u5b9e\u9a8c\uff0c\u4f60\u5c06\u638c\u63e1\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <ol> <li>\u611f\u77e5\u673a\u3001\u591a\u5c42\u611f\u77e5\u673a(MLP)\u3001\u6fc0\u6d3b\u51fd\u6570\u7684\u4f7f\u7528\u3002</li> <li>\u5b9e\u73b0\u4e00\u4e2a\u591a\u5c42\u611f\u77e5\u673a\u6a21\u578b\uff0c\u7528\u4e8eMNIST\u6570\u636e\u96c6\u7684\u6570\u5b57\u5206\u7c7b\u3002</li> <li>\u591a\u79cd\u5e38\u7528\u6fc0\u6d3b\u51fd\u6570\u548c\u6b63\u5219\u5316\u65b9\u6cd5\u3002</li> </ol>"},{"location":"lab2/MINIST%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/#1","title":"1. \u611f\u77e5\u673a","text":"<p>\u611f\u77e5\u673a\u7b80\u4ecb</p> <p>\u611f\u77e5\u673a\u662f\u4eba\u5de5\u795e\u7ecf\u7f51\u7edc\u4e2d\u6700\u7b80\u5355\u7684\u4e00\u79cd\u5f62\u5f0f\uff0c\u5b83\u7531\u8f93\u5165\u5c42\u3001\u8f93\u51fa\u5c42\u7ec4\u6210\uff0c\u4e0d\u5305\u542b\u9690\u85cf\u5c42\u3002  </p> <p>\u611f\u77e5\u673a\u5c40\u9650\u6027</p> <p>\u611f\u77e5\u673a\u53ea\u80fd\u89e3\u51b3\u7ebf\u6027\u53ef\u5206\u7684\u95ee\u9898\uff0c\u65e0\u6cd5\u4ea7\u751f\u975e\u7ebf\u6027\u5206\u5272\u9762\uff0c\u56e0\u6b64\u65e0\u6cd5\u89e3\u51b3\u975e\u7ebf\u6027\u95ee\u9898\u3002</p>"},{"location":"lab2/MINIST%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/#2","title":"2. \u591a\u5c42\u611f\u77e5\u673a\u7684\u4ece\u96f6\u5b9e\u73b0","text":"<p>\u591a\u5c42\u611f\u77e5\u673a\u4ecb\u7ecd</p> <p>\u591a\u5c42\u611f\u77e5\u673a\u662f\u4e00\u79cd\u524d\u9988\u4eba\u5de5\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\uff0c\u9664\u4e86\u8f93\u5165\u5c42\u548c\u8f93\u51fa\u5c42\u4e4b\u5916\u8fd8\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u9690\u85cf\u5c42\u3002\u6bcf\u4e00\u5c42\u90fd\u5b8c\u5168\u8fde\u63a5\u5230\u4e0b\u4e00\u5c42\u3002 MLP\u53ef\u4ee5\u5b66\u4e60\u975e\u7ebf\u6027\u7684\u51fd\u6570\u6620\u5c04\uff0c\u9002\u7528\u4e8e\u66f4\u590d\u6742\u7684\u6570\u636e\u6a21\u5f0f\u8bc6\u522b\u4efb\u52a1\uff0c\u5982\u56fe\u50cf\u5206\u7c7b\u3002</p> <p>MNIST\u6570\u636e\u96c6\u8bf4\u660e</p> <p>MNIST\u6570\u636e\u96c6\u662f\u75310\u301c9\u624b\u5199\u6570\u5b57\u56fe\u7247\u548c\u6570\u5b57\u6807\u7b7e\u6240\u7ec4\u6210\u7684\uff0c\u753160000\u4e2a\u8bad\u7ec3\u6837\u672c\u548c10000\u4e2a\u6d4b\u8bd5\u6837\u672c\u7ec4\u6210\uff0c \u5176\u4e2d\u6bcf\u4e2a\u6837\u672c\u90fd\u662f\u4e00\u5f2028 * 28\u50cf\u7d20\u7684\u7070\u5ea6\u624b\u5199\u6570\u5b57\u56fe\uff0c\u9002\u5408\u521d\u5b66\u8005\u8fdb\u884c\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1\u3002</p> <p>\u9996\u5148\u5bfc\u5165\u6240\u9700\u6a21\u5757\uff1a</p> <pre><code>import torch\nimport numpy as np\nfrom torchvision import datasets, transforms\n</code></pre> <p>MNIST\u6570\u636e\u96c6\u662f\u75310\u301c9\u624b\u5199\u6570\u5b57\u56fe\u7247\u548c\u6570\u5b57\u6807\u7b7e\u6240\u7ec4\u6210\u7684\uff0c\u753160000\u4e2a\u8bad\u7ec3\u6837\u672c\u548c10000\u4e2a\u6d4b\u8bd5\u6837\u672c\u7ec4\u6210\uff0c \u5176\u4e2d\u6bcf\u4e2a\u6837\u672c\u90fd\u662f\u4e00\u5f2028 * 28\u50cf\u7d20\u7684\u7070\u5ea6\u624b\u5199\u6570\u5b57\u56fe\uff0c\u9002\u5408\u521d\u5b66\u8005\u8fdb\u884c\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1\u3002 \u52a0\u8f7d\u4e0e\u9884\u5904\u7406MNIST\u6570\u636e\u96c6</p> <pre><code># \u53c2\u6570trainset\u5e94\u662f\u4e00\u4e2a\u5b9e\u73b0\u4e86__len__\u548c__getitem__\u65b9\u6cd5\u7684\u5bf9\u8c61\uff0c\u4ee3\u8868\u6574\u4e2aMNIST\u8bad\u7ec3\u6570\u636e\u96c6\u3002\ntrainset = datasets.MNIST(root='./data', train=True, download=True, transform=transforms.ToTensor())\ntestset = datasets.MNIST(root='./data', train=False, download=True, transform=transforms.ToTensor())\n</code></pre> <p>\u521b\u5efa\u6570\u636e\u52a0\u8f7d\u5668</p> <pre><code># batch_size=64\u8868\u793a\u6bcf\u4e2a\u6279\u6b21\u5305\u542b64\u4e2a\u6837\u672c\u3002\u53ef\u4ee5\u6839\u636e\u786c\u4ef6\uff08\u5982\u5185\u5b58/GPU\u663e\u5b58\uff09\u8c03\u6574\u8fd9\u4e2a\u503c\u3002\n# shuffle=True\u8868\u793a\u5728\u6bcf\u4e2aepoch\u5f00\u59cb\u65f6\u90fd\u5c06\u8bad\u7ec3\u6570\u636e\u96c6\u6253\u4e71\u987a\u5e8f\u3002\ntrainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)\n#\u5bf9\u4e8e\u6d4b\u8bd5\u96c6\u6211\u4eec\u901a\u5e38\u4e0d\u9700\u8981\u6253\u4e71\u987a\u5e8f\ntestloader = torch.utils.data.DataLoader(testset, batch_size=64, shuffle=False)\n</code></pre> <p>\u601d\u8003\u9898</p> <p>\u5982\u679c\u4e0d\u6253\u4e71\u8bad\u7ec3\u96c6\uff0c\u4f1a\u5bf9\u8bad\u7ec3\u7ed3\u679c\u4ea7\u751f\u4ec0\u4e48\u5f71\u54cd\uff1f</p> <p>\u5b9a\u4e49\u6a21\u578b\u6240\u9700\u53c2\u6570</p> <pre><code>num_inputs, num_outputs, num_hiddens = 784, 10, 256\n\nW1 = torch.tensor(np.random.normal(0, 0.01, (num_inputs, num_hiddens)), dtype=torch.float)\nb1 = torch.zeros(num_hiddens, dtype=torch.float)\nW2 = torch.tensor(np.random.normal(0, 0.01, (num_hiddens, num_outputs)), dtype=torch.float)\nb2 = torch.zeros(num_outputs, dtype=torch.float)\n\nparams = [W1, b1, W2, b2]\nfor param in params:\n    param.requires_grad_(requires_grad=True)\n</code></pre> <p>\u5b9a\u4e49\u6fc0\u6d3b\u51fd\u6570\uff0c\u8fd9\u91cc\u91c7\u7528ReLU</p> <pre><code>import matplotlib.pyplot as plt\n\n# \u5b9a\u4e49ReLU\u51fd\u6570\ndef relu(X):\n    return torch.max(input=X, other=torch.tensor(0.0))\n\n# \u751f\u6210\u4e00\u7cfb\u5217X, Y\u503c\u4f5c\u4e3a\u8f93\u5165\nx_values = torch.linspace(-5, 5, 100)\ny_values = relu(x_values)\n\n# \u7ed8\u5236\u56fe\u50cf\nplt.figure(figsize=(8, 6)) # \u8bbe\u7f6e\u56fe\u8868\u5927\u5c0f\nplt.plot(x_values.numpy(), y_values.numpy(), label='ReLU') # \u7ed8\u5236ReLU\u66f2\u7ebf\nplt.title('ReLU Function') # \u56fe\u8868\u6807\u9898\nplt.xlabel('Input Value') # x\u8f74\u6807\u7b7e\nplt.ylabel('Output Value') # y\u8f74\u6807\u7b7e\nplt.legend() # \u663e\u793a\u56fe\u4f8b\nplt.grid(True) # \u663e\u793a\u7f51\u683c\nplt.show() # \u663e\u793a\u56fe\u8868\n</code></pre> <p>\u5b9a\u4e49\u6a21\u578b\u7ed3\u6784</p> <pre><code>def net(X): \n    X = X.view((-1, num_inputs)) # view\u51fd\u6570\u5c06\u6bcf\u5f20\u539f\u59cb\u56fe\u50cf\u6539\u6210\u957f\u5ea6\u4e3anum_inputs\u7684\u5411\u91cf\n    H = relu(torch.matmul(X, W1) + b1)\n    return torch.matmul(H, W2) + b2\n</code></pre> <p>\u5b9a\u4e49\u635f\u5931\u51fd\u6570\uff0c\u8fd9\u91cc\u91c7\u7528\u4ea4\u53c9\u71b5\u635f\u5931</p> <pre><code>loss = torch.nn.CrossEntropyLoss()\n</code></pre> <p>\u5b9a\u4e49\u4f18\u5316\u5668\uff0c\u8fd9\u91cc\u4f9d\u7136\u91c7\u7528\u6700\u7b80\u5355\u7684\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u65b9\u6cd5</p> <pre><code>def sgd(params, lr, batch_size):  \n    \"\"\"\u5c0f\u6279\u91cf\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u3002\"\"\"\n    with torch.no_grad():\n        for param in params:\n            # \u5bf9\u6bcf\u4e2a\u53c2\u6570\u6309\u7167\u5176\u68af\u5ea6\u4ee5\u53ca\u5b66\u4e60\u7387\u8fdb\u884c\u66f4\u65b0\u3002\n            param -= lr * param.grad / batch_size\n            # \u6211\u4eec\u5e0c\u671b\u6839\u636e\u65b0\u7684\u6570\u636e\u91cd\u65b0\u8ba1\u7b97\u68af\u5ea6\uff0c\u800c\u4e0d\u662f\u7d2f\u52a0\u4e4b\u524d\u7684\u68af\u5ea6\u3002\n            param.grad.zero_()\n</code></pre> <p>\u5b9a\u4e49\u51c6\u786e\u7387\u51fd\u6570</p> <pre><code>def evaluate_accuracy(dataloader, net):\n    acc_sum, n = 0.0, 0\n    for X, y in dataloader:\n        #TODO\n        #TODO\n    return acc_sum / n\n</code></pre> <p>\u8bad\u7ec3\u6a21\u578b</p> <pre><code>num_epochs = 5 \nlr = 0.1\n\ndef train(net, train_iter, test_iter, loss, num_epochs, batch_size, params=None, lr=None, optimizer=None):\n    for epoch in range(num_epochs):\n        train_l_sum, train_acc_sum, n = 0.0, 0.0, 0\n        for X, y in train_iter:\n            y_hat = net(X)\n            l = loss(y_hat, y).sum()\n\n            # \u68af\u5ea6\u6e05\u96f6\n            if optimizer is not None:\n                optimizer.zero_grad()\n            elif params is not None and params[0].grad is not None:\n                for param in params:\n                    param.grad.data.zero_()\n\n            l.backward()\n            if optimizer is None:\n                sgd(params, lr, batch_size)  #\u68af\u5ea6\u4e0b\u964d\n            else:\n                optimizer.step()  #\u66f4\u65b0\u53c2\u6570\n\n            # \u8ba1\u7b97\u51c6\u786e\u7387 TODO\n            # \u8ba1\u7b97\u51c6\u786e\u7387 TODO\n            n += y.shape[0]\n        test_acc = evaluate_accuracy(test_iter, net)\n        print('epoch %d, loss %.4f, train acc %.3f, test acc %.3f'\n              % (epoch + 1, train_l_sum / n, train_acc_sum / n, test_acc))\n\ntrain(net, trainloader, testloader, loss, num_epochs, batch_size=64, params=params, lr=lr)\n</code></pre>"},{"location":"lab2/MINIST%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/#3","title":"3. \u591a\u5c42\u611f\u77e5\u673a\u7684\u7b80\u5355\u5b9e\u73b0","text":"<p>\u9996\u5148\u52a0\u8f7dMNIST\u6570\u636e\u96c6</p> <pre><code>import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torchvision import datasets, transforms\n\n\ntrainset = datasets.MNIST(root='./data', train=True, download=True, transform=transforms.ToTensor())\ntestset = datasets.MNIST(root='./data', train=False, download=True, transform=transforms.ToTensor())\ntrainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)\ntestloader = torch.utils.data.DataLoader(testset, batch_size=64, shuffle=False)\n</code></pre> <p>\u5b9a\u4e49MLP\u6a21\u578b</p> <pre><code>num_inputs, num_outputs, num_hiddens = 784, 10, 256\n\nclass MLP(nn.Module):\n    def __init__(self, num_inputs, num_outputs, num_hiddens):\n        super(MLP, self).__init__()\n        self.f1 = nn.Linear(num_inputs, num_hiddens) # \u8f93\u5165\u5c42 -&gt; \u9690\u85cf\u5c42\n        self.f2 = nn.Linear(num_hiddens, num_outputs) # \u9690\u85cf\u5c42 -&gt; \u8f93\u51fa\u5c42\n\n    def forward(self, x):\n        x = x.view(-1, num_inputs) # \u5c06\u6bcf\u5f20\u539f\u59cb\u56fe\u50cf\u6539\u6210\u957f\u5ea6\u4e3anum_inputs\u7684\u5411\u91cf\n        x = F.relu(self.f1(x)) # \u4f7f\u7528PyTorch\u4e2d\u7684ReLU\u6fc0\u6d3b\u51fd\u6570\n        x = self.f2(x)\n        return x\n</code></pre> <p>\u5b9e\u4f8b\u5316\u6a21\u578b\u3001\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668</p> <pre><code>net = MLP(num_inputs, num_outputs, num_hiddens)\nloss = nn.CrossEntropyLoss()\noptimizer = torch.optim.SGD(net.parameters(), lr=0.1)\n</code></pre> <p>\u5b9a\u4e49\u51c6\u786e\u7387\u51fd\u6570</p> <pre><code>def evaluate_accuracy(dataloader, net):\n    acc_sum, n = 0.0, 0\n    for X, y in dataloader:\n        #TODO\n        #TODO\n    return acc_sum / n\n</code></pre> <p>\u8bad\u7ec3\u6a21\u578b</p> <pre><code>import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torchvision import datasets, transforms\n\ntrainset = datasets.MNIST(root='./data', train=True, download=True, transform=transforms.ToTensor())\ntestset = datasets.MNIST(root='./data', train=False, download=True, transform=transforms.ToTensor())\ntrainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)\ntestloader = torch.utils.data.DataLoader(testset, batch_size=64, shuffle=False)\n\nclass MLP(nn.Module):\n    def __init__(self, num_inputs, num_outputs, num_hiddens):\n        super(MLP, self).__init__()\n        self.f1 = nn.Linear(num_inputs, num_hiddens) # \u8f93\u5165\u5c42 -&gt; \u9690\u85cf\u5c42\n        self.f2 = nn.Linear(num_hiddens, num_outputs) # \u9690\u85cf\u5c42 -&gt; \u8f93\u51fa\u5c42\n\n    def forward(self, x):\n        x = x.view(-1, num_inputs) # \u5c06\u6bcf\u5f20\u539f\u59cb\u56fe\u50cf\u6539\u6210\u957f\u5ea6\u4e3anum_inputs\u7684\u5411\u91cf\n        x = F.relu(self.f1(x)) # \u4f7f\u7528PyTorch\u4e2d\u7684ReLU\u6fc0\u6d3b\u51fd\u6570\n        x = self.f2(x)\n        return x\n\n\ndef train(net, train_iter, test_iter, loss, num_epochs, optimizer):\n    for epoch in range(num_epochs):\n        train_l_sum, train_acc_sum, n = 0.0, 0.0, 0\n        for X, y in train_iter:\n            y_hat = net(X)\n            # \u8ba1\u7b97\u635f\u5931 TODO\n\n            # \u6e05\u9664\u68af\u5ea6 TODO\n\n            # \u53cd\u5411\u4f20\u64ad TODO\n            # \u66f4\u65b0\u53c2\u6570 TODO\n\n            # \u8ba1\u7b97\u51c6\u786e\u7387 TODO\n            # \u8ba1\u7b97\u51c6\u786e\u7387 TODO\n            n += y.shape[0]\n\n        test_acc = evaluate_accuracy(test_iter, net)\n        print('epoch %d, loss %.4f, train acc %.3f, test acc %.3f'\n              % (epoch + 1, train_l_sum / n, train_acc_sum / n, test_acc))\n\n\nnum_epochs = 5\nnum_inputs, num_outputs, num_hiddens = 784, 10, 256\nnet = MLP(num_inputs, num_outputs, num_hiddens)\nloss = nn.CrossEntropyLoss()\noptimizer = torch.optim.SGD(net.parameters(), lr=0.1)\n\ntrain(net, trainloader, testloader, loss, num_epochs, optimizer)\n</code></pre>"},{"location":"lab2/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E4%BB%8B%E7%BB%8D/","title":"\u5b9e\u9a8c\u4e8c\uff1a\u795e\u7ecf\u7f51\u7edc\u57fa\u7840\uff1a\u6fc0\u6d3b\u51fd\u6570\u4e0e\u6b63\u5219\u5316","text":""},{"location":"lab2/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E4%BB%8B%E7%BB%8D/#_2","title":"\u5f00\u59cb\u4e4b\u524d","text":"<p>\u6211\u4eec\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\u4f7f\u7528Jupyter Notebook\u8fdb\u884c\u5b9e\u9a8c\uff0c\u8bf7\u53c2\u8003Jupyter Notebook\u4f7f\u7528\uff0c\u6309\u7167\u6587\u6863\u4e2d\u8be6\u7ec6\u6b65\u9aa4\u8fdb\u884c\u64cd\u4f5c\uff0c\u5b8c\u6210Jupyter Notebook\u7684\u914d\u7f6e\u3002</p>"},{"location":"lab2/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E4%BB%8B%E7%BB%8D/#_3","title":"\u5b9e\u9a8c\u4efb\u52a1","text":"<p>\u672c\u6b21\u5b9e\u9a8c\u5206\u4e3a\u4e24\u4e2a\u4efb\u52a1\uff1aMINIST\u624b\u5199\u6570\u5b57\u8bc6\u522b\uff08\u7ea660\u5206\u949f\uff09\u548c\u6b63\u5219\u5316\u548c\u6fc0\u6d3b\u51fd\u6570\u63a2\u7d22\uff08\u7ea690\u5206\u949f\uff09\u3002</p>"},{"location":"lab2/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E4%BB%8B%E7%BB%8D/#minist","title":"\u4efb\u52a1\u4e00\uff1aMINIST\u624b\u5199\u6570\u5b57\u8bc6\u522b","text":"<p>\u4e0b\u8f7d\u4efb\u52a1\u4e00\u4ee3\u7801</p> <p>\u5728\u8fd9\u4e2a\u4efb\u52a1\u4e2d\uff0c\u4f60\u5c06\uff1a</p> <ol> <li>\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u611f\u77e5\u673a\u548c\u591a\u5c42\u611f\u77e5\u673a\u6a21\u578b</li> <li>\u4f7f\u7528MNIST\u6570\u636e\u96c6\u8fdb\u884c\u624b\u5199\u6570\u5b57\u8bc6\u522b</li> <li>\u638c\u63e1\u795e\u7ecf\u7f51\u7edc\u7684\u57fa\u672c\u6982\u5ff5\u548c\u8bad\u7ec3\u8fc7\u7a0b</li> </ol> <p>\u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a</p> <ul> <li>\u611f\u77e5\u673a\u7684\u57fa\u672c\u539f\u7406\u548c\u5c40\u9650\u6027</li> <li>\u591a\u5c42\u611f\u77e5\u673a\u7684\u4ece\u96f6\u5b9e\u73b0</li> <li>\u4f7f\u7528PyTorch\u6846\u67b6\u5b9e\u73b0\u591a\u5c42\u611f\u77e5\u673a</li> <li>\u6a21\u578b\u8bad\u7ec3\u4e0e\u8bc4\u4f30</li> <li>\u601d\u8003\u9898\u8ba8\u8bba</li> </ul> <p>\u901a\u8fc7\u672c\u4efb\u52a1\uff0c\u4f60\u5c06\u638c\u63e1\u795e\u7ecf\u7f51\u7edc\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u5e76\u80fd\u591f\u4f7f\u7528PyTorch\u6846\u67b6\u6784\u5efa\u548c\u8bad\u7ec3\u7b80\u5355\u7684\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u3002</p>"},{"location":"lab2/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E4%BB%8B%E7%BB%8D/#_4","title":"\u4efb\u52a1\u4e8c\uff1a\u6b63\u5219\u5316\u548c\u6fc0\u6d3b\u51fd\u6570\u63a2\u7d22","text":"<p>\u4e0b\u8f7d\u4efb\u52a1\u4e8c\u4ee3\u7801</p> <p>\u5728\u8fd9\u4e2a\u4efb\u52a1\u4e2d\uff0c\u4f60\u5c06\u63a2\u7d22\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u4e24\u4e2a\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff1a\u6fc0\u6d3b\u51fd\u6570\u548c\u6b63\u5219\u5316\u65b9\u6cd5\u3002</p> <p>\u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a</p> <ol> <li> <p>\u6fc0\u6d3b\u51fd\u6570\u5b9e\u9a8c</p> <ul> <li>\u5b9e\u73b0\u5e76\u53ef\u89c6\u5316\u5e38\u89c1\u6fc0\u6d3b\u51fd\u6570(ReLU\u3001Sigmoid\u3001Tanh)\u53ca\u5176\u5bfc\u6570</li> <li>\u5206\u6790\u4e0d\u540c\u6fc0\u6d3b\u51fd\u6570\u7684\u7279\u6027\u548c\u9002\u7528\u573a\u666f</li> <li>\u63a2\u7d22\u68af\u5ea6\u6d88\u5931\u95ee\u9898</li> <li>ReLU\u6b7b\u4ea1\u73b0\u8c61\u7814\u7a76</li> </ul> </li> <li> <p>\u6b63\u5219\u5316\u65b9\u6cd5\u5b9e\u9a8c</p> <ul> <li>L2\u6b63\u5219\u5316\u7684\u5b9e\u73b0\u4e0e\u6548\u679c\u5206\u6790</li> <li>Dropout\u6b63\u5219\u5316\u7684\u539f\u7406\u4e0e\u5b9e\u8df5</li> <li>\u5bf9\u6bd4\u4e0d\u540c\u6b63\u5219\u5316\u65b9\u6cd5\u7684\u6548\u679c</li> <li>\u5206\u6790\u6b63\u5219\u5316\u5bf9\u6a21\u578b\u6cdb\u5316\u80fd\u529b\u7684\u5f71\u54cd</li> </ul> </li> </ol> <p>\u901a\u8fc7\u672c\u4efb\u52a1\uff0c\u4f60\u5c06\u6df1\u5165\u7406\u89e3\u6fc0\u6d3b\u51fd\u6570\u548c\u6b63\u5219\u5316\u5728\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u4f5c\u7528\uff0c\u638c\u63e1\u9632\u6b62\u8fc7\u62df\u5408\u7684\u6280\u5de7\uff0c\u5e76\u80fd\u591f\u6839\u636e\u5b9e\u9645\u95ee\u9898\u9009\u62e9\u5408\u9002\u7684\u6fc0\u6d3b\u51fd\u6570\u548c\u6b63\u5219\u5316\u65b9\u6cd5\u3002</p>"},{"location":"lab2/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E4%BB%8B%E7%BB%8D/#_5","title":"\u5b9e\u9a8c\u63d0\u4ea4","text":"<p>\u5b9e\u9a8c\u5b8c\u6210\u540e\uff0c\u8bf7\u63d0\u4ea4\u4ee5\u4e0b\u6750\u6599\uff1a</p> <ol> <li>\u8fd0\u884c\u6210\u529f\u7684Jupyter Notebook\u6587\u4ef6</li> <li>\u4e00\u4efdPDF\u62a5\u544a\uff0c\u62a5\u544a\u5185\u5bb9\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a<ol> <li>\u5b9e\u9a8c\u4e00\u63d0\u4ea4\u5185\u5bb9</li> <li>\u5b9e\u9a8c\u4e8c\u601d\u8003\u9898\u7b54\u6848</li> <li>\u5b9e\u9a8c\u5fc3\u5f97\u4e0e\u4f53\u4f1a</li> </ol> </li> </ol>"},{"location":"lab2/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E4%BB%8B%E7%BB%8D/#_6","title":"\u63d0\u4ea4\u8bf4\u660e","text":"<ol> <li>\u672c\u6b21\u63d0\u4ea4\u7684\u5185\u5bb9\u4e3a: \u5b9e\u9a8c\u4e00\u548c\u5b9e\u9a8c\u4e8c\u8981\u6c42\u63d0\u4ea4\u7684\u5185\u5bb9\uff0c\u5177\u4f53\u8981\u6c42\u8bf7\u53c2\u89c1\u5b9e\u9a8c\u7f51\u7ad9\uff08https://zhiweinju.github.io/nju-dl-lab-2025spring/\uff09</li> <li>\u63d0\u4ea4\u7684\u62a5\u544a\u6587\u4ef6\u8bf7\u4ee5PDF\u6587\u4ef6\u683c\u5f0f\u4e0a\u4f20\u5230selearning\u7f51\u7ad9\uff0c\u4e0a\u4f20\u6587\u4ef6\u7684\u6587\u4ef6\u547d\u540d\u683c\u5f0f\u4e3a: \u5b66\u53f7_\u59d3\u540d_\u62a5\u544a\u4e00.pdf\uff0c\u6bd4\u5982\uff1a123456789_\u5f20\u4e09_\u62a5\u544a\u4e00.pdf</li> <li>\u5176\u4ed6\u63d0\u4ea4\u6587\u4ef6\uff08\u5982 \u8fd0\u884c\u6210\u529f\u7684Jupyter Notebook\u6587\u4ef6\uff09\uff0c\u8bf7\u52a0\u4e0a\u524d\u7f00: \u5b66\u53f7_\u59d3\u540d_\uff0c\u6bd4\u5982: 123456789_\u5f20\u4e09_lab1.ipynb</li> <li>\u672c\u6b21\u63d0\u4ea4\u7684\u622a\u6b62\u65f6\u95f4\u4e3a 3\u67087\u65e523:59:59</li> <li>\u5bf9\u4e8e\u8fdf\u4ea4\u7684\u5904\u7406: \u8fdf\u4ea4\u4e00\u5468\u4ee5\u5185\uff0c\u6298\u6263\u7cfb\u6570\u4e3a0.8\uff0c\u8fdf\u4ea4\u8d85\u8fc7\u4e00\u5468\uff0c\u6298\u6263\u7cfb\u6570\u4e3a0.6\uff0c\u8d85\u8fc7\u4e00\u4e2a\u6708\u505c\u6b62\u63a5\u6536\u63d0\u4ea4\uff0c\u5c1a\u672a\u63d0\u4ea4\u8005\u672c\u6b21\u4f5c\u4e1a\u8ba10\u5206</li> </ol>"},{"location":"lab2/%E6%AD%A3%E5%88%99%E5%8C%96%E5%92%8C%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E6%8E%A2%E7%B4%A2/","title":"2.3 \u5b9e\u9a8c\u4efb\u52a1\u4e8c\uff1a\u6b63\u5219\u5316\u548c\u6fc0\u6d3b\u51fd\u6570\u63a2\u7d22","text":""},{"location":"lab2/%E6%AD%A3%E5%88%99%E5%8C%96%E5%92%8C%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E6%8E%A2%E7%B4%A2/#_1","title":"\u6b63\u5219\u5316\u548c\u6fc0\u6d3b\u51fd\u6570\u63a2\u7d22","text":"<pre><code>import torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets, transforms\n\n# \u8bbe\u7f6e\u968f\u673a\u79cd\u5b50\ntorch.manual_seed(42)\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n</code></pre> <pre><code>device\n</code></pre>"},{"location":"lab2/%E6%AD%A3%E5%88%99%E5%8C%96%E5%92%8C%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E6%8E%A2%E7%B4%A2/#_2","title":"\u6fc0\u6d3b\u51fd\u6570\u5b9e\u9a8c","text":"<p>\u6fc0\u6d3b\u51fd\u6570\u6982\u8ff0</p> <p>\u6fc0\u6d3b\u51fd\u6570\u662f\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u5b83\u4e3a\u7f51\u7edc\u5f15\u5165\u975e\u7ebf\u6027\u53d8\u6362\u80fd\u529b\u3002\u672c\u5b9e\u9a8c\u5c06\u63a2\u7d22\u4e09\u79cd\u5e38\u89c1\u7684\u6fc0\u6d3b\u51fd\u6570(ReLU\u3001Sigmoid\u3001Tanh)\u7684\u7279\u6027\u53ca\u5176\u5bf9\u6a21\u578b\u8bad\u7ec3\u7684\u5f71\u54cd\u3002</p>"},{"location":"lab2/%E6%AD%A3%E5%88%99%E5%8C%96%E5%92%8C%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E6%8E%A2%E7%B4%A2/#_3","title":"\u6fc0\u6d3b\u51fd\u6570\u7684\u5b9e\u73b0\u4e0e\u53ef\u89c6\u5316","text":"<p>\u9996\u5148\u6211\u4eec\u5b9e\u73b0\u8fd9\u4e09\u4e2a\u6fc0\u6d3b\u51fd\u6570\u53ca\u5176\u5bfc\u6570\uff0c\u5e76\u901a\u8fc7\u53ef\u89c6\u5316\u6765\u7406\u89e3\u5b83\u4eec\u7684\u7279\u6027\uff1a</p> <p>\u4e3b\u8981\u6fc0\u6d3b\u51fd\u6570</p> <ul> <li>ReLU: \\(f(x) = max(0,x)\\)</li> <li>Sigmoid: \\(f(x) = 1/(1+e^{-x})\\) </li> <li>Tanh: \\(f(x) = (e^x - e^{-x})/(e^x + e^{-x})\\)</li> </ul> <pre><code>def check_activation_function(MyReLU,MySigmoid,MyTanh):\n    x = torch.linspace(-10, 10, 1000)\n\n    # \u4f7f\u7528\u81ea\u5df1\u5b9e\u73b0\u7684\u6fc0\u6d3b\u51fd\u6570\n    my_relu = MyReLU()\n    my_sigmoid = MySigmoid()\n    my_tanh = MyTanh()\n\n    # \u8ba1\u7b97\u6fc0\u6d3b\u51fd\u6570\u503c\u548c\u5bfc\u6570\u503c\n    y_my_relu = my_relu(x)\n    y_my_sigmoid = my_sigmoid(x)\n    y_my_tanh = my_tanh(x)\n\n    y_my_relu_derivative = my_relu.derivative(x)\n    y_my_sigmoid_derivative = my_sigmoid.derivative(x)\n    y_my_tanh_derivative = my_tanh.derivative(x)\n    # \u4f7f\u7528PyTorch\u7684\u6fc0\u6d3b\u51fd\u6570\u4f5c\u4e3a\u53c2\u8003\n    torch_relu = nn.ReLU()\n    torch_sigmoid = nn.Sigmoid()\n    torch_tanh = nn.Tanh()\n    # \u9a8c\u8bc1\u5b9e\u73b0\u7684\u6b63\u786e\u6027\n    y_torch_relu = torch_relu(x)\n    y_torch_sigmoid = torch_sigmoid(x)\n    y_torch_tanh = torch_tanh(x)\n\n    # \u8ba1\u7b97PyTorch\u6fc0\u6d3b\u51fd\u6570\u7684\u5bfc\u6570\n    x_torch = x.clone().requires_grad_(True)  # \u4f7fx\u652f\u6301\u6c42\u5bfc\n\n    # ReLU\u5bfc\u6570\n    y_torch_relu = torch_relu(x_torch)\n    y_torch_relu.sum().backward()\n    y_torch_relu_derivative = x_torch.grad.clone()\n    x_torch.grad = None  # \u6e05\u9664\u68af\u5ea6\n\n    # Sigmoid\u5bfc\u6570\n    y_torch_sigmoid = torch_sigmoid(x_torch)\n    y_torch_sigmoid.sum().backward()\n    y_torch_sigmoid_derivative = x_torch.grad.clone()\n    x_torch.grad = None\n\n    # Tanh\u5bfc\u6570\n    y_torch_tanh = torch_tanh(x_torch)\n    y_torch_tanh.sum().backward()\n    y_torch_tanh_derivative = x_torch.grad.clone()\n\n    assert torch.allclose(y_my_relu, y_torch_relu, rtol=1e-4, atol=1e-4), \"ReLU\u5b9e\u73b0\u6709\u8bef\"\n    assert torch.allclose(y_my_sigmoid, y_torch_sigmoid, rtol=1e-4, atol=1e-4), \"Sigmoid\u5b9e\u73b0\u6709\u8bef\"\n    assert torch.allclose(y_my_tanh, y_torch_tanh, rtol=1e-4, atol=1e-4), \"Tanh\u5b9e\u73b0\u6709\u8bef\"\n\n    assert torch.allclose(y_my_relu_derivative, y_torch_relu_derivative, rtol=1e-4, atol=1e-4), \"ReLU\u5bfc\u6570\u5b9e\u73b0\u6709\u8bef\"\n    assert torch.allclose(y_my_sigmoid_derivative, y_torch_sigmoid_derivative, rtol=1e-4, atol=1e-4), \"Sigmoid\u5bfc\u6570\u5b9e\u73b0\u6709\u8bef\"\n    assert torch.allclose(y_my_tanh_derivative, y_torch_tanh_derivative, rtol=1e-4, atol=1e-4), \"Tanh\u5bfc\u6570\u5b9e\u73b0\u6709\u8bef\"\n\n    # \u7ed8\u5236\u6fc0\u6d3b\u51fd\u6570\u548c\u5bfc\u6570\n    plt.figure(figsize=(15, 6))\n\n    # \u7ed8\u5236\u6fc0\u6d3b\u51fd\u6570\n    plt.subplot(1, 2, 1)\n    plt.plot(x.numpy(), y_my_relu.numpy(), label='ReLU')\n    plt.plot(x.numpy(), y_my_sigmoid.numpy(), label='Sigmoid')\n    plt.plot(x.numpy(), y_my_tanh.numpy(), label='Tanh')\n    plt.title('Activation Functions')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.legend()\n    plt.grid(True)\n\n    # \u7ed8\u5236\u5bfc\u6570\n    plt.subplot(1, 2, 2)\n    plt.plot(x.numpy(), y_my_relu_derivative.numpy(), label='ReLU\\'')\n    plt.plot(x.numpy(), y_my_sigmoid_derivative.numpy(), label='Sigmoid\\'')\n    plt.plot(x.numpy(), y_my_tanh_derivative.numpy(), label='Tanh\\'')\n    plt.title('Derivatives of Activation Functions')\n    plt.xlabel('x')\n    plt.ylabel('y\\'')\n    plt.legend()\n    plt.grid(True)\n\n    plt.tight_layout()\n    plt.show()\n</code></pre> <pre><code># \u81ea\u5df1\u5b9e\u73b0\u6fc0\u6d3b\u51fd\u6570\u53ca\u5176\u5bfc\u6570\nclass MyReLU:\n    def __call__(self, x):\n        \"\"\"\u5b9e\u73b0ReLU\u6fc0\u6d3b\u51fd\u6570: f(x) = max(0, x)\"\"\"\n        # TODO: \u5b9e\u73b0ReLU\u51fd\u6570\uff0c\u8fd4\u56dex\u4e2d\u6240\u6709\u5143\u7d20\u4e0e0\u7684\u8f83\u5927\u503c\n        # TODO: \u53ef\u4ee5\u4f7f\u7528torch.maximum\u51fd\u6570\u5b9e\u73b0ReLU\n\n    def derivative(self, x):\n        \"\"\"ReLU\u7684\u5bfc\u6570: f'(x) = 1 if x &gt; 0 else 0\"\"\"\n        # TODO: \u5b9e\u73b0ReLU\u7684\u5bfc\u6570\uff0c\u5f53x&gt;0\u65f6\u4e3a1\uff0c\u5426\u5219\u4e3a0\n        # TODO: \u53ef\u4ee5\u4f7f\u7528torch.where\u51fd\u6570\u5b9e\u73b0ReLU\u7684\u5bfc\u6570\n\nclass MySigmoid:\n    def __call__(self, x):\n        \"\"\"\u5b9e\u73b0Sigmoid\u6fc0\u6d3b\u51fd\u6570: f(x) = 1 / (1 + e^(-x))\"\"\"\n        # TODO: \u5b9e\u73b0Sigmoid\u51fd\u6570\uff0c\u8fd4\u56dex\u4e2d\u6240\u6709\u5143\u7d20\u7684Sigmoid\u503c\n        # TODO: \u53ef\u4ee5\u4f7f\u7528torch.exp\u51fd\u6570\u5b9e\u73b0e^(-x)\n\n    def derivative(self, x):\n        \"\"\"Sigmoid\u7684\u5bfc\u6570: f'(x) = f(x) * (1 - f(x))\"\"\"\n       # TODO: \u5b9e\u73b0Sigmoid\u7684\u5bfc\u6570\uff0c\u63d0\u793a\uff1a\u53ef\u4ee5\u5229\u7528__call__\u65b9\u6cd5\n\nclass MyTanh:\n    def __call__(self, x):\n        \"\"\"\u5b9e\u73b0Tanh\u6fc0\u6d3b\u51fd\u6570: f(x) = (e^x - e^(-x)) / (e^x + e^(-x))\"\"\"\n        # TODO: \u5b9e\u73b0Tanh\u51fd\u6570\uff0c\u8fd4\u56dex\u4e2d\u6240\u6709\u5143\u7d20\u7684Tanh\u503c\n        # TODO: \u53ef\u4ee5\u4f7f\u7528torch.exp\u51fd\u6570\u5b9e\u73b0e^(-x)\n\n\n    def derivative(self, x):\n        \"\"\"Tanh\u7684\u5bfc\u6570: f'(x) = 1 - f(x)^2\"\"\"\n        # TODO: \u5b9e\u73b0Tanh\u7684\u5bfc\u6570\uff0c\u63d0\u793a\uff1a\u53ef\u4ee5\u5229\u7528__call__\u65b9\u6cd5\n\n# \u6d4b\u8bd5\u5b9e\u73b0\u7684\u6fc0\u6d3b\u51fd\u6570\n\ncheck_activation_function(MyReLU,MySigmoid,MyTanh)\n</code></pre> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98981\uff1a\u4e3a\u4ec0\u4e48\u795e\u7ecf\u7f51\u7edc\u9700\u8981\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\uff1f\u5982\u679c\u4f7f\u7528\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f</p>"},{"location":"lab2/%E6%AD%A3%E5%88%99%E5%8C%96%E5%92%8C%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E6%8E%A2%E7%B4%A2/#_4","title":"\u68af\u5ea6\u6d88\u5931\u95ee\u9898\u5b9e\u9a8c","text":"<p>\u68af\u5ea6\u6d88\u5931\u662f\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u4e2d\u7684\u4e00\u4e2a\u5e38\u89c1\u95ee\u9898\u3002\u5f53\u7f51\u7edc\u5c42\u6570\u8f83\u6df1\u65f6\uff0c\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u68af\u5ea6\u4f1a\u968f\u7740\u5c42\u6570\u7684\u589e\u52a0\u800c\u9010\u6e10\u51cf\u5c0f\uff0c\u5bfc\u81f4\u9760\u8fd1\u8f93\u5165\u5c42\u7684\u53c2\u6570\u51e0\u4e4e\u65e0\u6cd5\u66f4\u65b0\u3002\u672c\u5b9e\u9a8c\u5c06\uff1a</p> <ol> <li>\u6784\u5efa\u4e00\u4e2a\u591a\u5c42\u795e\u7ecf\u7f51\u7edc</li> <li>\u5206\u522b\u4f7f\u7528\u4e0d\u540c\u6fc0\u6d3b\u51fd\u6570(ReLU\u3001Sigmoid\u3001Tanh)</li> <li>\u89c2\u5bdf\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u5404\u5c42\u7684\u68af\u5ea6\u5206\u5e03</li> <li>\u5206\u6790\u4e0d\u540c\u6fc0\u6d3b\u51fd\u6570\u5bf9\u68af\u5ea6\u6d88\u5931\u95ee\u9898\u7684\u5f71\u54cd</li> </ol> <pre><code># 1. \u68af\u5ea6\u6d88\u5931\u5b9e\u9a8c\u7684\u7f51\u7edc\nclass Network(nn.Module):\n    def __init__(self, input_dim, output_dim, activation_name, num_layers=5):\n        super(Network, self).__init__()\n        self.layers = nn.ModuleList()\n        self.input_dim = input_dim\n\n        # \u521b\u5efa\u5f88\u6df1\u7684\u7f51\u7edc\u6765\u6d4b\u8bd5\u68af\u5ea6\u95ee\u9898\n        for _ in range(num_layers):\n            self.layers.append(nn.Linear(100, 100))\n\n        if activation_name == 'relu': \n            self.activation = MyReLU()\n        elif activation_name == 'sigmoid':\n            self.activation = MySigmoid()\n        elif activation_name == 'tanh':\n            self.activation = MyTanh()\n        self.input_layer = nn.Linear(input_dim, 100)\n        self.output_layer = nn.Linear(100, output_dim)\n\n    def forward(self, x): \n        # TODO: \u5b9e\u73b0\u524d\u5411\u4f20\u64ad\u51fd\u6570\n        # 1. \u9996\u5148\u901a\u8fc7\u8f93\u5165\u5c42\n        # 2. \u5e94\u7528\u6fc0\u6d3b\u51fd\u6570\n        # 3. \u4f9d\u6b21\u901a\u8fc7\u6bcf\u4e2a\u9690\u85cf\u5c42\u5e76\u5e94\u7528\u6fc0\u6d3b\u51fd\u6570\n        # 4. \u6700\u540e\u901a\u8fc7\u8f93\u51fa\u5c42\u8fd4\u56de\u7ed3\u679c\n</code></pre> <pre><code>def analyze_gradients(model):\n    \"\"\"\u5206\u6790\u6a21\u578b\u5404\u5c42\u7684\u68af\u5ea6\u5206\u5e03\"\"\"\n    gradients_by_layer = []\n    for name, param in model.named_parameters():\n        if param.grad is not None:\n            # \u8ba1\u7b97\u6bcf\u5c42\u68af\u5ea6\u7684\u7edf\u8ba1\u4fe1\u606f\n            layer_grads = param.grad.cpu().numpy()\n            grad_mean = np.mean(np.abs(layer_grads))\n            grad_std = np.std(layer_grads)\n            gradients_by_layer.append({\n                'layer': name,\n                'mean': grad_mean,\n                'std': grad_std\n            })\n    return gradients_by_layer\n</code></pre> <pre><code>def get_data(batch_size=64):\n    # \u51c6\u5907\u6570\u636e\n    transform = transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Normalize((0.1307,), (0.3081,))\n    ])\n\n    train_dataset = datasets.MNIST('./data', train=True, download=True, transform=transform)\n    test_dataset = datasets.MNIST('./data', train=False, transform=transform)\n\n    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n    test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)\n    return train_loader,test_loader\n\ndef plot_results(results):\n    # \u7ed8\u5236\u7ed3\u679c\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n\n    # \u7ed8\u5236\u51c6\u786e\u7387\u968fepoch\u53d8\u5316\n    for activation in results:\n        ax1.plot(results[activation]['acc_history'], label=f'{activation}')\n    ax1.set_title('Training Accuracy over Epochs')\n    ax1.set_xlabel('Epoch')\n    ax1.set_ylabel('Accuracy (%)')\n    ax1.legend()\n    ax1.grid(True)\n\n    # \u7ed8\u5236\u6700\u540e\u4e00\u4e2aepoch\u7684\u68af\u5ea6\u5206\u5e03\n    for activation in results:\n        last_grads = results[activation]['grad_history'][-1]\n        ax2.semilogy(last_grads, label=f'{activation}')\n    ax2.set_title('Gradient Distribution (Last Epoch)')\n    ax2.set_xlabel('Layer Index')\n    ax2.set_ylabel('Gradient Mean (log scale)')\n    ax2.legend()\n    ax2.grid(True)\n\n    plt.tight_layout()\n    plt.show()\n</code></pre> <pre><code>def experiment_gradient_vanishing():\n    \"\"\"\u68af\u5ea6\u6d88\u5931\u5b9e\u9a8c\"\"\"\n\n    criterion = nn.CrossEntropyLoss()\n    # \u8bad\u7ec3\u4e0d\u540c\u6fc0\u6d3b\u51fd\u6570\u7684\u6df1\u5c42\u7f51\u7edc\n    results = {activation: {'acc_history': [], 'grad_history': []} for activation in ['relu', 'sigmoid', 'tanh']}\n\n    n_epochs = 5\n    for activation in ['relu','sigmoid', 'tanh']:\n        train_loader,_ = get_data()\n        model = Network(input_dim=784, output_dim=10, activation_name=activation,num_layers=2).to(device)\n        optimizer = optim.SGD(model.parameters(), lr=0.001)\n\n        for epoch in range(n_epochs):\n            model.train()\n            total_loss = 0\n            correct = 0\n            total = 0\n\n            # \u8bad\u7ec3\u9636\u6bb5\n            for batch_idx, (data, target) in enumerate(train_loader):\n                data, target = data.to(device), target.to(device)\n                data = data.view(data.size(0), -1)\n\n                optimizer.zero_grad()\n                output = model(data)\n                loss = criterion(output, target)\n                loss.backward()\n\n                # \u6536\u96c6\u68af\u5ea6\u4fe1\u606f\n                if batch_idx % 1 == 0:\n                    gradients = analyze_gradients(model)\n                    results[activation]['grad_history'].append(\n                        [g['mean'] for g in gradients]\n                    )\n\n                optimizer.step()\n\n                # \u8ba1\u7b97\u51c6\u786e\u7387\n                pred = output.argmax(dim=1, keepdim=True)\n                correct += pred.eq(target.view_as(pred)).sum().item()\n                total += target.size(0)\n                total_loss += loss.item()\n\n            # \u8ba1\u7b97epoch\u7684\u5e73\u5747\u51c6\u786e\u7387\n            epoch_acc = 100. * correct / total\n            results[activation]['acc_history'].append(epoch_acc)\n            print(f'Activation: {activation}, Epoch: {epoch}, Accuracy: {epoch_acc:.2f}%')\n\n    plot_results(results)\n\nexperiment_gradient_vanishing()\n</code></pre> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98982\uff1a\u89c2\u5bdf\u5b9e\u9a8c\u7ed3\u679c\uff0c\u4e3a\u4ec0\u4e48\u8bad\u7ec3\u51c6\u786e\u7387\u4f1a\u548c\u6fc0\u6d3b\u51fd\u6570\u9009\u62e9\u76f8\u5173\uff1f\u8fd9\u4e0e\u68af\u5ea6\u5206\u5e03\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f</p> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u6bd4\u8f83\u4e0d\u540c\u6fc0\u6d3b\u51fd\u6570\u7684\u68af\u5ea6\u8303\u56f4</li> <li>\u5206\u6790\u68af\u5ea6\u6d88\u5931\u5bf9\u6a21\u578b\u8bad\u7ec3\u7684\u5f71\u54cd</li> <li>\u601d\u8003\u4e3a\u4ec0\u4e48ReLU\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\u66f4\u53d7\u6b22\u8fce</li> </ul>"},{"location":"lab2/%E6%AD%A3%E5%88%99%E5%8C%96%E5%92%8C%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E6%8E%A2%E7%B4%A2/#relu","title":"ReLU\u6b7b\u4ea1\u73b0\u8c61\u5b9e\u9a8c","text":"<p>ReLU\u6b7b\u4ea1\u73b0\u8c61\u6307\u795e\u7ecf\u5143\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u6301\u7eed\u8f93\u51fa0\uff0c\u5bfc\u81f4\u53c2\u6570\u65e0\u6cd5\u66f4\u65b0\u7684\u95ee\u9898\u3002\u672c\u5b9e\u9a8c\u5c06\uff1a</p> <ol> <li>\u7edf\u8ba1\u4f7f\u7528ReLU\u548cTanh\u6fc0\u6d3b\u51fd\u6570\u65f6\u7684\u795e\u7ecf\u5143\u6fc0\u6d3b\u60c5\u51b5</li> <li>\u5206\u6790ReLU\u6b7b\u4ea1\u73b0\u8c61\u7684\u4ea7\u751f\u539f\u56e0</li> <li>\u63a2\u8ba8\u5982\u4f55\u7f13\u89e3\u8fd9\u4e00\u95ee\u9898</li> </ol> <pre><code>def experiment_relu_death():\n    \"\"\"ReLU\u6b7b\u4ea1\u73b0\u8c61\u5b9e\u9a8c\"\"\"\n    criterion = nn.CrossEntropyLoss()\n    # \u6bd4\u8f83ReLU\u548cLeakyReLU\n    activation_counts = {'relu': [], 'tanh': []}\n\n    for activation in ['relu', 'tanh']:\n        model = Network(input_dim=784, output_dim=10, activation_name=activation, num_layers=2).to(device)\n        optimizer = optim.SGD(model.parameters(), lr=0.001)\n\n        # \u8bad\u7ec3\u51e0\u4e2aepoch\u5e76\u8bb0\u5f55\u6fc0\u6d3b\u503c\u4e3a0\u7684\u795e\u7ecf\u5143\u6570\u91cf\n        for epoch in range(5):\n            zero_activations = 0\n            total_activations = 0\n            train_loader,_ = get_data()\n\n            for data, target in train_loader:\n                data = data.to(device)\n                target = target.to(device)\n                data = data.view(data.size(0), -1)\n                optimizer.zero_grad()\n                # \u7edf\u8ba1\u6b7b\u4ea1\u795e\u7ecf\u5143\n                x = model.input_layer(data)\n                x = model.activation(x)\n\n                # \u8bb0\u5f55\u4e2d\u95f4\u5c42\u7684\u6fc0\u6d3b\u503c\n                for layer in model.layers:\n                    x = layer(x)\n                    activated = model.activation(x)\n\n                    # \u7edf\u8ba1\u6fc0\u6d3b\u503c\u4e3a0\u7684\u795e\u7ecf\u5143\u6570\u91cf\n                    if activation in ['relu', 'tanh']:\n                        zero_activations += torch.sum(activated == 0).item()\n                        total_activations += activated.numel()\n\n                # \u7ee7\u7eed\u524d\u5411\u4f20\u64ad\u5b8c\u6210\u8bad\u7ec3\n                output = model.output_layer(x)\n                loss = criterion(output, target)\n                loss.backward()\n                optimizer.step()\n\n            # \u8ba1\u7b97\u6b7b\u4ea1\u7387\n            death_rate = zero_activations / total_activations\n            print(f'Activation: {activation}, Epoch {epoch}: Death Rate: {death_rate:.2f}%')\n            activation_counts[activation].append(death_rate)\n\n    # \u7ed8\u5236\u6b7b\u4ea1\u7387\u968f\u65f6\u95f4\u53d8\u5316\n    plt.figure(figsize=(10, 5))\n    for activation, rates in activation_counts.items():\n        plt.plot(rates, label=activation)\n    plt.title('ReLU Death Rate During Training')\n    plt.xlabel('Epoch')\n    plt.ylabel('Death Rate')\n    plt.legend()\n    plt.show()\n\nexperiment_relu_death()\n</code></pre> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98983\uff1aReLU\u6b7b\u4ea1\u73b0\u8c61\u7684\u6210\u56e0\u662f\u4ec0\u4e48\uff1f\u6709\u54ea\u4e9b\u89e3\u51b3\u65b9\u6848\uff1f</p> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u5206\u6790\u4ec0\u4e48\u60c5\u51b5\u4e0b\u795e\u7ecf\u5143\u4f1a\u505c\u6b62\u66f4\u65b0</li> <li>\u601d\u8003\u5b66\u4e60\u7387\u3001\u521d\u59cb\u5316\u65b9\u5f0f\u7684\u5f71\u54cd</li> <li>\u4e86\u89e3LeakyReLU\u7b49\u53d8\u4f53\u7684\u4f18\u52bf</li> </ul>"},{"location":"lab2/%E6%AD%A3%E5%88%99%E5%8C%96%E5%92%8C%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E6%8E%A2%E7%B4%A2/#_5","title":"\u6b63\u5219\u5316\u65b9\u6cd5\u5b9e\u9a8c","text":"<p>\u8fc7\u62df\u5408\u662f\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u5e38\u89c1\u95ee\u9898\uff0c\u6b63\u5219\u5316\u662f\u7f13\u89e3\u8fc7\u62df\u5408\u7684\u91cd\u8981\u624b\u6bb5\u3002\u672c\u5b9e\u9a8c\u5c06\u63a2\u7d22\u4e24\u79cd\u4e3b\u8981\u7684\u6b63\u5219\u5316\u65b9\u6cd5\uff1aL2\u6b63\u5219\u5316\u548cDropout\u3002</p>"},{"location":"lab2/%E6%AD%A3%E5%88%99%E5%8C%96%E5%92%8C%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E6%8E%A2%E7%B4%A2/#l2","title":"L2\u6b63\u5219\u5316\u5b9e\u9a8c","text":"<p>L2\u6b63\u5219\u5316\u901a\u8fc7\u5728\u635f\u5931\u51fd\u6570\u4e2d\u6dfb\u52a0\u6743\u91cd\u7684\u5e73\u65b9\u9879\u6765\u9650\u5236\u6a21\u578b\u590d\u6742\u5ea6\u3002\u672c\u5b9e\u9a8c\u5c06\uff1a</p> <ol> <li>\u6784\u9020\u4e00\u4e2a\u5bb9\u6613\u8fc7\u62df\u5408\u7684\u6570\u636e\u96c6</li> <li>\u5b9e\u73b0\u5e26\u6709L2\u6b63\u5219\u5316\u7684\u6a21\u578b\u8bad\u7ec3</li> <li>\u5bf9\u6bd4\u6709\u65e0\u6b63\u5219\u5316\u7684\u8bad\u7ec3\u6548\u679c</li> <li>\u5206\u6790L2\u6b63\u5219\u5316\u5bf9\u6a21\u578b\u53c2\u6570\u7684\u5f71\u54cd</li> </ol>"},{"location":"lab2/%E6%AD%A3%E5%88%99%E5%8C%96%E5%92%8C%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E6%8E%A2%E7%B4%A2/#l2_1","title":"L2\u6b63\u5219\u5316","text":"<p>1. \u57fa\u672c\u6982\u5ff5 L2\u6b63\u5219\u5316(\u4e5f\u79f0\u4e3a\u6743\u91cd\u8870\u51cf)\u662f\u6df1\u5ea6\u5b66\u4e60\u4e2d\u6700\u5e38\u7528\u7684\u6b63\u5219\u5316\u6280\u672f\u4e4b\u4e00\u3002\u5176\u6838\u5fc3\u601d\u60f3\u662f\u901a\u8fc7\u9650\u5236\u6a21\u578b\u53c2\u6570\u7684\u5927\u5c0f\u6765\u964d\u4f4e\u6a21\u578b\u590d\u6742\u5ea6\uff0c\u4ece\u800c\u9632\u6b62\u8fc7\u62df\u5408\u3002</p> <p>2. \u6570\u5b66\u8868\u8fbe</p> <p>\u5728\u539f\u59cb\u635f\u5931\u51fd\u6570\u57fa\u7840\u4e0a\u6dfb\u52a0L2\u6b63\u5219\u9879\uff1a</p> \\[L_{total}(\\mathbf{w}, b) = L_{original}(\\mathbf{w}, b) + \\frac{\\lambda}{2} \\|\\mathbf{w}\\|^2\\] <p>\u5176\u4e2d\uff1a</p> <ul> <li>\\(L_{original}\\) \u662f\u539f\u59cb\u635f\u5931\u51fd\u6570(\u5982\u5747\u65b9\u8bef\u5dee)</li> <li>\\(\\|\\mathbf{w}\\|^2\\) \u662f\u6743\u91cd\u5411\u91cf\u7684L2\u8303\u6570\u5e73\u65b9</li> <li>\\(\\lambda\\) \u662f\u6b63\u5219\u5316\u7cfb\u6570\uff0c\u63a7\u5236\u6b63\u5219\u5316\u7684\u5f3a\u5ea6</li> </ul> <p>3. \u5de5\u4f5c\u539f\u7406</p> <ol> <li> <p>\u53c2\u6570\u60e9\u7f5a\uff1a</p> <ul> <li>L2\u6b63\u5219\u5316\u901a\u8fc7\u60e9\u7f5a\u8f83\u5927\u7684\u6743\u91cd\u53c2\u6570\uff0c\u9f13\u52b1\u6a21\u578b\u5b66\u4e60\u66f4\u5c0f\u7684\u6743\u91cd\u503c</li> <li>\u8f83\u5927\u7684\u6743\u91cd\u5f80\u5f80\u610f\u5473\u7740\u6a21\u578b\u5bf9\u8f93\u5165\u7279\u5f81\u7684\u4f9d\u8d56\u7a0b\u5ea6\u66f4\u9ad8\uff0c\u66f4\u5bb9\u6613\u8fc7\u62df\u5408</li> </ul> </li> <li> <p>\u5e73\u6ed1\u6548\u679c\uff1a</p> <ul> <li>L2\u6b63\u5219\u5316\u503e\u5411\u4e8e\u5c06\u6743\u91cd\u5747\u5300\u5206\u6563\u5230\u6240\u6709\u7279\u5f81\u4e0a</li> <li>\u8fd9\u4f7f\u5f97\u6a21\u578b\u4e0d\u4f1a\u8fc7\u5206\u4f9d\u8d56\u67d0\u4e9b\u7279\u5b9a\u7279\u5f81\uff0c\u63d0\u9ad8\u4e86\u6cdb\u5316\u80fd\u529b</li> </ul> </li> <li> <p>\u68af\u5ea6\u66f4\u65b0\uff1a</p> <ul> <li>\u5728\u53c2\u6570\u66f4\u65b0\u65f6\uff0cL2\u6b63\u5219\u5316\u9879\u7684\u68af\u5ea6\u4e3a \\(\\lambda\\mathbf{w}\\)</li> <li>\u8fd9\u76f8\u5f53\u4e8e\u5728\u6bcf\u6b21\u66f4\u65b0\u65f6\u5c06\u6743\u91cd\u7f29\u5c0f\u4e00\u4e2a\u6bd4\u4f8b\uff0c\u6545\u79f0\u4e3a\u6743\u91cd\u8870\u51cf</li> </ul> </li> </ol> <p>4. \u4e0eL1\u6b63\u5219\u5316\u7684\u5bf9\u6bd4</p> <ul> <li>L2\u6b63\u5219\u5316\u503e\u5411\u4e8e\u4ea7\u751f\u503c\u8f83\u5c0f\u4f46\u975e\u96f6\u7684\u6743\u91cd\uff0c\u6743\u91cd\u5448\u73b0\u6b63\u6001\u5206\u5e03</li> <li>L1\u6b63\u5219\u5316\u503e\u5411\u4e8e\u4ea7\u751f\u7a00\u758f\u7684\u6743\u91cd\u5411\u91cf\uff0c\u5373\u8bb8\u591a\u6743\u91cd\u4e3a\u96f6</li> <li>L2\u6b63\u5219\u5316\u5728\u7279\u5f81\u4e4b\u95f4\u6709\u5173\u8054\u65f6\u66f4\u9002\u7528\uff0c\u800cL1\u6b63\u5219\u5316\u66f4\u9002\u5408\u7279\u5f81\u9009\u62e9</li> </ul> <p>5. \u5b9e\u8df5\u5e94\u7528</p> <ul> <li>\u6b63\u5219\u5316\u7cfb\u6570 \\(\\lambda\\) \u662f\u4e00\u4e2a\u9700\u8981\u8c03\u6574\u7684\u8d85\u53c2\u6570</li> <li>\\(\\lambda = 0\\) \u65f6\u76f8\u5f53\u4e8e\u65e0\u6b63\u5219\u5316</li> <li>\\(\\lambda\\) \u8d8a\u5927\uff0c\u6b63\u5219\u5316\u6548\u679c\u8d8a\u5f3a\uff0c\u6a21\u578b\u8d8a\u7b80\u5355\uff0c\u4f46\u53ef\u80fd\u6b20\u62df\u5408</li> <li>\u901a\u5e38\u901a\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u6765\u9009\u62e9\u5408\u9002\u7684 \\(\\lambda\\) \u503c</li> </ul>"},{"location":"lab2/%E6%AD%A3%E5%88%99%E5%8C%96%E5%92%8C%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E6%8E%A2%E7%B4%A2/#_6","title":"\u6570\u636e\u96c6\u5b9a\u4e49","text":"<p>\u7ed9\u5b9a\\(x\\)\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4ee5\u4e0b\u4e09\u9636\u591a\u9879\u5f0f\u6765\u751f\u6210\u8bad\u7ec3\u548c\u6d4b\u8bd5\u6570\u636e\u7684\u6807\u7b7e\uff1a</p> \\[y = 0.05 + \\sum_{i = 1}^d 0.01 x_i + \\epsilon ,\\text{ where } \\epsilon \\sim \\mathcal{N}(0, 0.01^2).\\] <p>\u6211\u4eec\u9009\u62e9\u6807\u7b7e\u662f\u5173\u4e8e\u8f93\u5165\u7684\u7ebf\u6027\u51fd\u6570\u3002 \u6807\u7b7e\u540c\u65f6\u88ab\u5747\u503c\u4e3a0\uff0c\u6807\u51c6\u5dee\u4e3a0.01\u9ad8\u65af\u566a\u58f0\u7834\u574f\u3002 \u4e3a\u4e86\u4f7f\u8fc7\u62df\u5408\u7684\u6548\u679c\u66f4\u52a0\u660e\u663e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u95ee\u9898\u7684\u7ef4\u6570\u589e\u52a0\u5230\\(d = 200\\)\uff0c \u5e76\u4f7f\u7528\u4e00\u4e2a\u53ea\u5305\u542b20\u4e2a\u6837\u672c\u7684\u5c0f\u8bad\u7ec3\u96c6\u3002</p> <pre><code># \u8bbe\u7f6e\u7ef4\u5ea6\u548c\u6837\u672c\u6570\nd = 200  # \u7279\u5f81\u7ef4\u5ea6\nn_train, n_test = 20, 100  # \u8bad\u7ec3\u548c\u6d4b\u8bd5\u6570\u636e\u96c6\u5927\u5c0f\n\n# \u751f\u6210\u7279\u5f81\u6570\u636e\nfeatures = np.random.normal(size=(n_train + n_test, d))\n\n# \u751f\u6210\u6807\u7b7e\n# y = 0.05 + 0.01 * sum(x_i) + epsilon\nlabels = 0.05 + 0.01 * np.sum(features, axis=1)\n# \u6dfb\u52a0\u566a\u58f0 epsilon ~ N(0, 0.01^2)\nlabels += np.random.normal(0, 0.01, size=labels.shape)\n\n# \u8f6c\u6362\u4e3atensor\nfeatures = torch.tensor(features, dtype=torch.float32)\nlabels = torch.tensor(labels, dtype=torch.float32)\n\n# \u5206\u5272\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\ntrain_features = features[:n_train]\ntest_features = features[n_train:]\ntrain_labels = labels[:n_train]\ntest_labels = labels[n_train:]\n</code></pre>"},{"location":"lab2/%E6%AD%A3%E5%88%99%E5%8C%96%E5%92%8C%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E6%8E%A2%E7%B4%A2/#l_2","title":"\u5b9a\u4e49\\(L_2\\)\u8303\u6570\u60e9\u7f5a","text":"<p>\u5b9e\u73b0\u8fd9\u4e00\u60e9\u7f5a\u6700\u65b9\u4fbf\u7684\u65b9\u6cd5\u662f\u5bf9\u6240\u6709\u9879\u6c42\u5e73\u65b9\u540e\u5e76\u5c06\u5b83\u4eec\u6c42\u548c\u3002</p> <pre><code>def l2_penalty(w):\n    # TODO: \u4f7f\u7528torch.sum\u548c.pow\u65b9\u6cd5\u5b9e\u73b0L2\u8303\u6570\u60e9\u7f5a\n    # \u63d0\u793a: \u5bf9\u6743\u91cd\u53c2\u6570w\u5e73\u65b9\u6c42\u548c\uff0c\u518d\u9664\u4ee52\n</code></pre>"},{"location":"lab2/%E6%AD%A3%E5%88%99%E5%8C%96%E5%92%8C%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E6%8E%A2%E7%B4%A2/#_7","title":"\u5bf9\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u548c\u6d4b\u8bd5","text":"<p>\u8ba9\u6211\u4eec\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8bc4\u4f30\u6a21\u578b\u5728\u7ed9\u5b9a\u6570\u636e\u96c6\u4e0a\u7684\u635f\u5931\uff0c\u53ca\u8bad\u7ec3\u51fd\u6570\u3002</p> <pre><code>class Accumulator:\n    \"\"\"\u5728n\u4e2a\u53d8\u91cf\u4e0a\u7d2f\u52a0\"\"\"\n    def __init__(self, n):\n        self.data = [0.0] * n\n\n    def add(self, *args):\n        self.data = [a + float(b) for a, b in zip(self.data, args)]\n\n    def reset(self):\n        self.data = [0.0] * len(self.data)\n\n    def __getitem__(self, idx):\n        return self.data[idx]\n\ndef evaluate_loss(net, data_iter, loss):\n    \"\"\"\u8bc4\u4f30\u7ed9\u5b9a\u6570\u636e\u96c6\u4e0a\u6a21\u578b\u7684\u635f\u5931\"\"\"\n    metric = Accumulator(2)  # \u635f\u5931\u7684\u603b\u548c,\u6837\u672c\u6570\u91cf\n    for X, y in data_iter:\n        out = net(X)\n        y = y.reshape(out.shape)\n        l = loss(out, y)\n        metric.add(l.sum(), l.numel())\n    return metric[0] / metric[1]\n\ndef train_epoch(net, train_iter, loss, trainer, penalty_lambda):\n    \"\"\"\u8bad\u7ec3\u6a21\u578b\u4e00\u4e2aepoch\"\"\"\n    # \u5c06\u6a21\u578b\u8bbe\u7f6e\u4e3a\u8bad\u7ec3\u6a21\u5f0f\n    net.train()\n    # \u8bad\u7ec3\u635f\u5931\u603b\u548c\u3001\u8bad\u7ec3\u6837\u672c\u6570\u3001\u5b9e\u4f8b\u6570\n    metric = Accumulator(3)\n    for X, y in train_iter:\n        trainer.zero_grad()\n        y_hat = net(X)\n        weight = net[0].weight\n        l = loss(y_hat, y.reshape(y_hat.shape)) + penalty_lambda * l2_penalty(weight)\n        l.mean().backward()\n        trainer.step()\n        metric.add(float(l.sum()), y.numel(), 1)\n    # \u8fd4\u56de\u8bad\u7ec3\u635f\u5931\u548c\u8bad\u7ec3\u51c6\u786e\u7387\n    return metric[0] / metric[2]\n\ndef train(train_features, test_features, train_labels, test_labels,\n          num_epochs=100, penalty_lambda=0):\n    loss = nn.MSELoss(reduction='none')\n    input_shape = train_features.shape[-1]\n    # \u4e0d\u8bbe\u7f6e\u504f\u7f6e\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u5728\u591a\u9879\u5f0f\u4e2d\u5b9e\u73b0\u4e86\u5b83\n    net = nn.Sequential(nn.Linear(input_shape, 1, bias=False))\n    batch_size = min(10, train_labels.shape[0])\n\n    # \u521b\u5efa\u6570\u636e\u8fed\u4ee3\u5668\n    train_iter = DataLoader(\n        torch.utils.data.TensorDataset(train_features, train_labels.reshape(-1,1)),\n        batch_size=batch_size)\n    test_iter = DataLoader(\n        torch.utils.data.TensorDataset(test_features, test_labels.reshape(-1,1)),\n        batch_size=batch_size)\n\n    trainer = torch.optim.SGD(net.parameters(), lr=0.003)\n\n    # \u8bb0\u5f55\u8bad\u7ec3\u8fc7\u7a0b\n    train_loss = []\n    test_loss = []\n\n    for epoch in range(num_epochs):\n        train_epoch(net, train_iter, loss, trainer, penalty_lambda)\n        if epoch == 0 or (epoch + 1) % 20 == 0:\n            train_l = evaluate_loss(net, train_iter, loss)\n            test_l = evaluate_loss(net, test_iter, loss)\n            train_loss.append(train_l)\n            test_loss.append(test_l)\n            print(f'epoch {epoch+1}, train loss {train_l:.3f}, test loss {test_l:.3f}')\n\n    # \u7ed8\u5236\u635f\u5931\u66f2\u7ebf\n    plt.figure(figsize=(10, 6))\n    plt.semilogy(range(1, len(train_loss) * 20 + 1, 20), train_loss, label='train')\n    plt.semilogy(range(1, len(test_loss) * 20 + 1, 20), test_loss, label='test')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\n    print('weight:', net[0].weight.data.numpy())\n</code></pre> <pre><code># \u4e0d\u4f7f\u7528\u6b63\u5219\u5316\ntrain(train_features, test_features,\n      train_labels, test_labels)\n</code></pre> <pre><code># \u4f7f\u7528L2\u6b63\u5219\u5316\ntrain(train_features, test_features,\n      train_labels, test_labels, penalty_lambda=3)\n</code></pre>"},{"location":"lab2/%E6%AD%A3%E5%88%99%E5%8C%96%E5%92%8C%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E6%8E%A2%E7%B4%A2/#_8","title":"\u7b80\u6d01\u5b9e\u73b0","text":"<p>\u5728\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2d\uff0c\u6211\u4eec\u65e0\u9700\u5b9e\u73b0L2\u6b63\u5219\u5316\uff0c\u53ea\u9700\u8981\u5728\u635f\u5931\u51fd\u6570\u4e2d\u6dfb\u52a0\u6b63\u5219\u9879\u3002</p> <pre><code>def train_epoch(net, train_iter, loss, trainer):\n    \"\"\"\u8bad\u7ec3\u6a21\u578b\u4e00\u4e2aepoch\"\"\"\n    # \u5c06\u6a21\u578b\u8bbe\u7f6e\u4e3a\u8bad\u7ec3\u6a21\u5f0f\n    net.train()\n    # \u8bad\u7ec3\u635f\u5931\u603b\u548c\u3001\u8bad\u7ec3\u6837\u672c\u6570\u3001\u5b9e\u4f8b\u6570\n    metric = Accumulator(3)\n    for X, y in train_iter:\n        trainer.zero_grad()\n        y_hat = net(X)\n        weight = net[0].weight\n        l = loss(y_hat, y.reshape(y_hat.shape))\n        l.mean().backward()\n        trainer.step()\n        metric.add(float(l.sum()), y.numel(), 1)\n    # \u8fd4\u56de\u8bad\u7ec3\u635f\u5931\u548c\u8bad\u7ec3\u51c6\u786e\u7387\n    return metric[0] / metric[2]\n\ndef train(train_features, test_features, train_labels, test_labels,\n          num_epochs=100, penalty_lambda=0):\n    loss = nn.MSELoss(reduction='none')\n    input_shape = train_features.shape[-1]\n    # \u4e0d\u8bbe\u7f6e\u504f\u7f6e\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u5728\u591a\u9879\u5f0f\u4e2d\u5b9e\u73b0\u4e86\u5b83\n    net = nn.Sequential(nn.Linear(input_shape, 1, bias=False))\n    batch_size = min(10, train_labels.shape[0])\n\n    # \u521b\u5efa\u6570\u636e\u8fed\u4ee3\u5668\n    train_iter = DataLoader(\n        torch.utils.data.TensorDataset(train_features, train_labels.reshape(-1,1)),\n        batch_size=batch_size)\n    test_iter = DataLoader(\n        torch.utils.data.TensorDataset(test_features, test_labels.reshape(-1,1)),\n        batch_size=batch_size)\n\n    trainer = torch.optim.SGD(net.parameters(), lr=0.003, weight_decay=penalty_lambda)\n\n    # \u8bb0\u5f55\u8bad\u7ec3\u8fc7\u7a0b\n    train_loss = []\n    test_loss = []\n\n    for epoch in range(num_epochs):\n        train_epoch(net, train_iter, loss, trainer)\n        if epoch == 0 or (epoch + 1) % 20 == 0:\n            train_l = evaluate_loss(net, train_iter, loss)\n            test_l = evaluate_loss(net, test_iter, loss)\n            train_loss.append(train_l)\n            test_loss.append(test_l)\n            print(f'epoch {epoch+1}, train loss {train_l:.3f}, test loss {test_l:.3f}')\n\n    # \u7ed8\u5236\u635f\u5931\u66f2\u7ebf\n    plt.figure(figsize=(10, 6))\n    plt.semilogy(range(1, len(train_loss) * 20 + 1, 20), train_loss, label='train')\n    plt.semilogy(range(1, len(test_loss) * 20 + 1, 20), test_loss, label='test')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\n    print('weight:', net[0].weight.data.numpy())\n</code></pre> <pre><code># \u4f7f\u7528L2\u6b63\u5219\u5316\ntrain(train_features, test_features,\n      train_labels, test_labels, penalty_lambda=3)\n</code></pre> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98984\uff1a\u4f7f\u7528L2\u6b63\u5219\u5316\u540e\uff0c\u6a21\u578b\u7684\u53c2\u6570\u4f1a\u53d1\u751f\u4ec0\u4e48\u53d8\u5316\uff1f\u4e3a\u4ec0\u4e48\u8fd9\u79cd\u53d8\u5316\u6709\u52a9\u4e8e\u9632\u6b62\u8fc7\u62df\u5408\uff1f</p> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u89c2\u5bdf\u6743\u91cd\u7684\u6570\u503c\u5206\u5e03\u53d8\u5316</li> <li>\u5206\u6790\u6b63\u5219\u5316\u7cfb\u6570\u03bb\u7684\u5f71\u54cd</li> <li>\u601d\u8003\u4e3a\u4ec0\u4e48\u8f83\u5c0f\u7684\u6743\u91cd\u6709\u52a9\u4e8e\u6cdb\u5316</li> </ul>"},{"location":"lab2/%E6%AD%A3%E5%88%99%E5%8C%96%E5%92%8C%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E6%8E%A2%E7%B4%A2/#dropout","title":"Dropout","text":"<p>Dropout\u539f\u7406</p> <p>Dropout \u662f\u4e00\u79cd\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u7684\u6b63\u5219\u5316\u6280\u672f\u3002 \u4e0eL2\u6b63\u5219\u5316\u901a\u8fc7\u9650\u5236\u6743\u91cd\u5927\u5c0f\u6765\u9632\u6b62\u8fc7\u62df\u5408\u4e0d\u540c\uff0c Dropout\u901a\u8fc7\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u968f\u673a\"\u4e22\u5f03\"\uff08\u8bbe\u7f6e\u4e3a\u96f6\uff09\u795e\u7ecf\u5143\u6765\u5b9e\u73b0\u6b63\u5219\u5316\u3002</p> <p>Dropout\u6570\u5b66\u8868\u8fbe</p> <p>\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6837\u672c\uff0c\u6bcf\u4e00\u5c42\u7684\u6bcf\u4e2a\u795e\u7ecf\u5143\u90fd\u6709\u6982\u7387 \\(p\\) \u88ab\u6682\u65f6\u4ece\u7f51\u7edc\u4e2d\u79fb\u9664\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u795e\u7ecf\u5143\u7684\u8f93\u51fa\u4e3a \\(h\\)\uff0c\u5219\uff1a</p> \\[ \\begin{cases}  \\frac{h}{1-p} &amp; \\text{\u6982\u7387 } 1-p \\text{ (\u4fdd\u7559)} \\\\ 0 &amp; \\text{\u6982\u7387 } p \\text{ (\u4e22\u5f03)} \\end{cases} \\] <p>\u8fd9\u91cc\u7684 \\(\\frac{1}{1-p}\\) \u662f\u4e00\u4e2a\u7f29\u653e\u56e0\u5b50\uff0c\u7528\u4e8e\u4fdd\u6301\u8f93\u51fa\u7684\u671f\u671b\u503c\u4e0d\u53d8\u3002</p> <p>Dropout\u4f18\u70b9</p> <ol> <li> <p>\u9632\u6b62\u795e\u7ecf\u5143\u7684\u5171\u9002\u5e94\u6027\uff08Co-adaptation\uff09</p> <ul> <li>\u56e0\u4e3a\u795e\u7ecf\u5143\u4e0d\u80fd\u4f9d\u8d56\u4e8e\u7279\u5b9a\u7684\u5176\u4ed6\u795e\u7ecf\u5143\u7684\u5b58\u5728 </li> <li>\u5fc5\u987b\u5b66\u4f1a\u4e0e\u968f\u673a\u7684\u795e\u7ecf\u5143\u5b50\u96c6\u4e00\u8d77\u5de5\u4f5c </li> </ul> </li> <li> <p>\u63d0\u4f9b\u4e86\u4e00\u79cd\u5ec9\u4ef7\u7684\u6a21\u578b\u96c6\u6210\u65b9\u6cd5</p> <ul> <li>\u6bcf\u6b21\u4f7f\u7528Dropout\u76f8\u5f53\u4e8e\u8bad\u7ec3\u4e00\u4e2a\u65b0\u7684\u7f51\u7edc\u67b6\u6784</li> <li>\u6700\u7ec8\u6a21\u578b\u53ef\u4ee5\u770b\u4f5c\u662f\u591a\u4e2a\u5b50\u7f51\u7edc\u7684\u96c6\u6210</li> </ul> </li> <li> <p>\u51cf\u5c11\u795e\u7ecf\u5143\u4e4b\u95f4\u7684\u590d\u6742\u5171\u9002\u5e94\u5173\u7cfb</p> <ul> <li>\u6bcf\u4e2a\u795e\u7ecf\u5143\u5fc5\u987b\u5b66\u4f1a\u66f4\u9c81\u68d2\u7684\u7279\u5f81</li> <li>\u4e0d\u80fd\u8fc7\u5206\u4f9d\u8d56\u67d0\u4e9b\u7279\u5b9a\u7684\u7279\u5f81\u7ec4\u5408</li> </ul> </li> </ol> <p>\u5b9e\u8df5\u5efa\u8bae</p> <p>\u5728\u5b9e\u8df5\u4e2d\uff0cDropout\u901a\u5e38\u5728\u5168\u8fde\u63a5\u5c42\u4e2d\u4f7f\u7528\uff0c \u4e22\u5f03\u6982\u7387 \\(p\\) \u901a\u5e38\u8bbe\u7f6e\u4e3a0.5\uff0c \u800c\u5728\u5377\u79ef\u5c42\u4e2d\u8f83\u5c11\u4f7f\u7528\u6216\u4f7f\u7528\u8f83\u5c0f\u7684\u4e22\u5f03\u6982\u7387\uff08\u59820.1\uff09\u3002</p> <pre><code>def dropout_layer(X, dropout):\n    assert 0 &lt;= dropout &lt;= 1\n    device = X.device\n    # TODO: \u5b9e\u73b0dropout\u5c42\n    # 1. \u5982\u679cdropout=1\uff0c\u8fd4\u56de\u51680\u5f20\u91cf\n    # 2. \u5982\u679cdropout=0\uff0c\u76f4\u63a5\u8fd4\u56de\u8f93\u5165X\n    # 3. \u5426\u5219\uff0c\u751f\u6210\u4e00\u4e2a\u4e0eX\u5f62\u72b6\u76f8\u540c\u7684\u968f\u673a\u63a9\u7801(mask)\n    #    - \u4f7f\u7528torch.rand\u751f\u6210\u968f\u673a\u6570\uff0c\u5e76\u4e0edropout\u6bd4\u8f83\u521b\u5efa\u4e8c\u5143\u63a9\u7801\n    #    - \u5c06X\u4e0e\u63a9\u7801\u76f8\u4e58\uff0c\u5e76\u9664\u4ee5(1-dropout)\u8fdb\u884c\u7f29\u653e\n    # \u6ce8\u610f\uff1a\u8fc7\u7a0b\u4e2ddevice\u53c2\u6570\u9700\u8981\u4e0eX\u7684\u8bbe\u5907\u76f8\u540c\n    # \u5728\u672c\u60c5\u51b5\u4e2d\uff0c\u6240\u6709\u5143\u7d20\u90fd\u88ab\u4e22\u5f03\n    if dropout == 1:\n        return torch.zeros_like(X, device=device)\n    # \u5728\u672c\u60c5\u51b5\u4e2d\uff0c\u6240\u6709\u5143\u7d20\u90fd\u88ab\u4fdd\u7559\n    if dropout == 0:\n        # TODO: \u5b9e\u73b0dropout=0\u7684\u60c5\u51b5\n    # TODO: \u5b9e\u73b0dropout=\u5176\u4ed6\u503c\u7684\u60c5\u51b5\n    mask = \n    return mask * X / (1.0 - dropout)\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u51e0\u4e2a\u4f8b\u5b50\u6765\u6d4b\u8bd5<code>dropout_layer</code>\u51fd\u6570\u3002 \u6211\u4eec\u5c06\u8f93\u5165<code>X</code>\u901a\u8fc7dropout\u64cd\u4f5c\uff0cdropout\u6982\u7387\u5206\u522b\u4e3a0\u30010.5\u548c1\u3002</p> <pre><code>X= torch.arange(16, dtype = torch.float32).reshape((2, 8))\nprint(X)\nprint(dropout_layer(X, 0.))\nprint(dropout_layer(X, 0.5))\nprint(dropout_layer(X, 1.))\n</code></pre>"},{"location":"lab2/%E6%AD%A3%E5%88%99%E5%8C%96%E5%92%8C%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E6%8E%A2%E7%B4%A2/#_9","title":"\u5b9a\u4e49\u6a21\u578b","text":"<p>\u6211\u4eec\u53ef\u4ee5\u5c06dropout\u5e94\u7528\u4e8e\u6bcf\u4e2a\u9690\u85cf\u5c42\u7684\u8f93\u51fa\uff08\u5728\u6fc0\u6d3b\u51fd\u6570\u4e4b\u540e\uff09\uff0c\u5e76\u4e14dropout\u53ea\u5728\u8bad\u7ec3\u671f\u95f4\u6709\u6548\u3002</p> <pre><code>class RegularizedNetwork(nn.Module):\n    def __init__(self, dropout_rate=0.0):\n        super(RegularizedNetwork, self).__init__()\n        self.dropout_rate = dropout_rate\n        self.training = True\n        self.conv1 = nn.Conv2d(1, 32, 3, 1)\n        self.conv2 = nn.Conv2d(32, 64, 3, 1)\n        self.fc1 = nn.Linear(1600, 128)\n        self.fc2 = nn.Linear(128, 10)\n\n    def forward(self, x):\n        x = torch.relu(self.conv1(x))\n        x = torch.max_pool2d(x, 2)\n        x = torch.relu(self.conv2(x))\n        x = torch.max_pool2d(x, 2)\n        x = torch.flatten(x, 1)\n        if self.training:\n            x = dropout_layer(x, self.dropout_rate)\n        x = torch.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\n</code></pre> <pre><code>def experiment_regularization():\n    \"\"\"\u6bd4\u8f83\u4e0d\u540c\u6b63\u5219\u5316\u65b9\u6cd5\u7684\u6548\u679c\"\"\"\n\n    # \u5b9e\u9a8c\u914d\u7f6e\n    configs = {\n        'No Regularization': {'dropout': 0.0},\n        'Dropout': {'dropout': 0.3},\n    }\n\n    results = {name: {'train_acc': [], 'test_acc': []} for name in configs.keys()}\n    n_epochs = 15\n\n    for name, config in configs.items():\n        print(f\"\\nTraining with {name}\")\n        model = RegularizedNetwork(dropout_rate=config['dropout']).to(device)\n\n        optimizer = optim.SGD(model.parameters(),lr=0.5)\n        criterion = nn.CrossEntropyLoss()\n        train_loader,test_loader = get_data(batch_size=256)\n        for epoch in range(n_epochs):\n            # \u8bad\u7ec3\u9636\u6bb5\n            model.train()\n            train_correct = 0\n            train_total = 0\n            for data, target in train_loader:\n                data, target = data.to(device), target.to(device)\n                optimizer.zero_grad()\n                output = model(data)\n                loss = criterion(output, target)\n                loss.backward()\n                optimizer.step()\n\n                pred = output.argmax(dim=1, keepdim=True)\n                train_correct += pred.eq(target.view_as(pred)).sum().item()\n                train_total += target.size(0)\n\n            train_acc = 100. * train_correct / train_total\n\n            # \u6d4b\u8bd5\u9636\u6bb5\n            model.eval()\n            test_correct = 0\n            test_total = 0\n\n            with torch.no_grad():\n                for data, target in test_loader:\n                    data, target = data.to(device), target.to(device)\n                    output = model(data)\n                    pred = output.argmax(dim=1, keepdim=True)\n                    test_correct += pred.eq(target.view_as(pred)).sum().item()\n                    test_total += target.size(0)\n\n            test_acc = 100. * test_correct / test_total\n\n            # \u8bb0\u5f55\u7ed3\u679c\n            results[name]['train_acc'].append(train_acc)\n            results[name]['test_acc'].append(test_acc)\n\n            print(f'Epoch {epoch}: Train Acc: {train_acc:.2f}%, Test Acc: {test_acc:.2f}%')\n\n    # \u7ed8\u5236\u7ed3\u679c\n    plt.figure(figsize=(15, 5))\n\n    # \u8bad\u7ec3\u51c6\u786e\u7387\n    plt.subplot(1, 2, 1)\n    for name in results:\n        plt.plot(results[name]['train_acc'], label=name)\n    plt.title('Training Accuracy')\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy (%)')\n    plt.legend()\n    plt.grid(True)\n    # \u6d4b\u8bd5\u51c6\u786e\u7387\n    plt.subplot(1, 2, 2)\n    for name in results:\n        plt.plot(results[name]['test_acc'], label=name)\n    plt.title('Test Accuracy')\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy (%)')\n    plt.legend()\n    plt.grid(True)\n\n    plt.tight_layout()\n    plt.show()\n\n# \u8fd0\u884c\u5b9e\u9a8c\nexperiment_regularization()\n</code></pre>"},{"location":"lab2/%E6%AD%A3%E5%88%99%E5%8C%96%E5%92%8C%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E6%8E%A2%E7%B4%A2/#pytorch","title":"Pytorch\u7b80\u6d01\u5b9e\u73b0","text":"<p>dropout\u53ef\u4ee5\u4f5c\u4e3a<code>nn.Module</code>\u7c7b\u7684\u4e00\u4e2a\u6a21\u5757\u6765\u4f7f\u7528\uff0c</p> <pre><code>nn.Dropout(dropout_rate)\n</code></pre> <pre><code>class RegularizedNetwork(nn.Module):\n    def __init__(self, dropout_rate=0.0):\n        super(RegularizedNetwork, self).__init__()\n        self.conv1 = nn.Conv2d(1, 32, 3, 1)\n        self.conv2 = nn.Conv2d(32, 64, 3, 1)\n        self.dropout = nn.Dropout(dropout_rate) if dropout_rate&gt;0 else None\n        self.fc1 = nn.Linear(1600, 128)\n        self.fc2 = nn.Linear(128, 10)\n\n    def forward(self, x):\n        x = torch.relu(self.conv1(x))\n        x = torch.max_pool2d(x, 2)\n        x = torch.relu(self.conv2(x))\n        x = torch.max_pool2d(x, 2)\n        x = torch.flatten(x, 1)\n        if self.dropout:\n            x = self.dropout(x)\n        x = torch.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\n\nexperiment_regularization()\n</code></pre> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98985\uff1aDropout\u4e3a\u4ec0\u4e48\u80fd\u591f\u8d77\u5230\u6b63\u5219\u5316\u7684\u4f5c\u7528\uff1f\u8bad\u7ec3\u65f6\u548c\u6d4b\u8bd5\u65f6\u7684\u5dee\u5f02\u5904\u7406\u6709\u4ec0\u4e48\u610f\u4e49\uff1f</p> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u5206\u6790Dropout\u7684\u96c6\u6210\u5b66\u4e60\u89c2\u70b9</li> <li>\u601d\u8003\u4e3a\u4ec0\u4e48\u8981\u8fdb\u884c\u6bd4\u4f8b\u7f29\u653e</li> <li>\u8003\u8651Dropout\u5bf9\u7279\u5f81\u4f9d\u8d56\u7684\u5f71\u54cd</li> </ul>"},{"location":"lab3/CNN%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/","title":"\u5b9e\u9a8c\u4efb\u52a1\u4e8c\uff1a\u4f7f\u7528CNN\u6765\u8fdb\u884c\u56fe\u50cf\u5206\u7c7b","text":""},{"location":"lab3/CNN%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/#cifar-10","title":"CIFAR-10 \u6570\u636e\u96c6","text":"<p>\u672c\u6b21\u5b9e\u9a8c\u4f7f\u7528CIFAR-10 \u6570\u636e\u96c6\u6765\u8fdb\u884c\u5b9e\u9a8c\u3002 CIFAR-10 \u6570\u636e\u96c6\u5305\u542b 60,000 \u5f20 32\u00d732 \u50cf\u7d20\u7684\u5f69\u8272\u56fe\u50cf\uff0c \u5206\u4e3a 10 \u4e2a\u7c7b\u522b\uff0c\u6bcf\u4e2a\u7c7b\u522b\u6709 6,000 \u5f20\u56fe\u50cf\u3002 \u5177\u4f53\u7c7b\u522b\u5305\u62ec\u98de\u673a\u3001\u6c7d\u8f66\u3001\u9e1f\u3001\u732b\u3001\u9e7f\u3001\u72d7\u3001\u9752\u86d9\u3001\u9a6c\u3001\u8239\u548c\u5361\u8f66\u3002 \u6570\u636e\u96c6\u88ab\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\uff0c \u5176\u4e2d\u8bad\u7ec3\u96c6\u5305\u542b 50,000 \u5f20\u56fe\u50cf\uff0c\u6d4b\u8bd5\u96c6\u5305\u542b 10,000 \u5f20\u56fe\u50cf\u3002</p>"},{"location":"lab3/CNN%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/#1-cnn","title":"1. CNN\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1","text":"<p>\u672c\u6b21\u4efb\u52a1\u8981\u6c42\u8865\u5168\u4ee3\u7801\u4e2d\u7a7a\u7f3a\u90e8\u5206\uff0c\u5305\u62ec\u5b9e\u73b0\u4e00\u4e2aCNN\u7c7b\uff0c\u4ee5\u53ca\u8bad\u7ec3\u8fc7\u7a0b\u4ee3\u7801</p> <p>\u6570\u636e\u96c6\u4e0b\u8f7d\u94fe\u63a5\uff1a</p> <p>https://box.nju.edu.cn/f/d59d5d910d754c3091f5/</p> <p><pre><code>import torchvision.transforms as transforms\nfrom torchvision import datasets\nimport torchvision\nimport torch.nn.functional as F\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom PIL import Image\nimport os\n</code></pre> \u5bfc\u5165CIFAR-10\u6570\u636e\u96c6\uff1a <pre><code>transform = transforms.Compose([\n    transforms.ToTensor(),\n    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n])\n\n# \u4e0b\u8f7d\u5e76\u52a0\u8f7d\u8bad\u7ec3\u96c6\ntrainset = torchvision.datasets.CIFAR10(\n    root='./data',\n    train=True,\n    download=True,\n    transform=transform\n)\n\n# \u521b\u5efa\u6570\u636e\u52a0\u8f7d\u5668\ntrainloader = torch.utils.data.DataLoader(\n    trainset,\n    batch_size=32,\n    shuffle=True\n)\ntestset = torchvision.datasets.CIFAR10(\n    root='./data',\n    train=False,\n    download=True,\n    transform=transform\n)\n\ntestloader = torch.utils.data.DataLoader(\n    testset,\n    batch_size=32,\n    shuffle=False\n)\n</code></pre> \u5b9a\u4e49CNN\u7f51\u7edc\uff1a <pre><code>class SimpleCNN(nn.Module):\n    def __init__(self):\n        super(SimpleCNN, self).__init__()\n        #TODO: \u5b9e\u73b0\u6a21\u578b\u7ed3\u6784\n        #TODO \u5b9e\u73b0self.conv1:\u5377\u79ef\u5c42\n        #TODO \u5b9e\u73b0self.conv2:\u5377\u79ef\u5c42\n        #TODO \u5b9e\u73b0self.pool: MaxPool2d\n        #TODO \u5b9e\u73b0self.fc1: \u7ebf\u6027\u5c42\n        #TODO \u5b9e\u73b0self.fc2\uff1a\u7ebf\u6027\u5c42\n        #TODO \u5b9e\u73b0 self.dropout: Dropout\u5c42\n\n    def forward(self, x):\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.pool(F.relu(self.conv2(x)))\n        x = x.view(-1, 64 * 8 * 8)\n        x = F.relu(self.fc1(x))\n        x = self.dropout(x)\n        x = self.fc2(x)\n\n        return x\n</code></pre> \u8bad\u7ec3\u51fd\u6570\uff1a <pre><code>def train(model, train_loader, test_loader, device):\n    num_epochs = 15\n    criterion = nn.CrossEntropyLoss()\n    optimizer = optim.Adam(model.parameters(), lr=0.001)\n\n    for epoch in range(num_epochs):\n        model.train()\n        running_loss = 0.0\n        for i, (inputs, labels) in enumerate(train_loader):\n            inputs, labels = inputs.to(device), labels.to(device)\n            #TODO:\u5b9e\u73b0\u8bad\u7ec3\u90e8\u5206\uff0c\u5b8c\u6210\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\n            #TODO: optimizer\u68af\u5ea6\u6e05\u9664\n            #TODO: \u6a21\u578b\u8f93\u5165\n            #TODO: \u8ba1\u7b97\u635f\u5931\n            #TODO: \u53cd\u5411\u4f20\u64ad\n            #TODO: \u66f4\u65b0\u53c2\u6570\n\n            running_loss += loss.item()\n            if i % 100 == 99:  # \u6bcf100\u4e2abatch\u6253\u5370\u4e00\u6b21\u635f\u5931\n                print(\n                    f'Epoch [{epoch + 1}/{num_epochs}], Step [{i + 1}/{len(train_loader)}], Loss: {running_loss / 100:.4f}')\n                running_loss = 0.0\n\n        # \u6bcf\u4e2aepoch\u7ed3\u675f\u540e\u5728\u6d4b\u8bd5\u96c6\u4e0a\u8bc4\u4f30\u6a21\u578b\n        model.eval()\n        correct = 0\n        total = 0\n        with torch.no_grad():\n            for inputs, labels in test_loader:\n                inputs, labels = inputs.to(device), labels.to(device)\n                outputs = model(inputs)\n                _, predicted = torch.max(outputs.data, 1)\n                total += labels.size(0)\n                correct += (predicted == labels).sum().item()\n\n        print(f'Test Accuracy: {100 * correct / total:.2f}%')\n</code></pre> <pre><code>device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n#\u521b\u5efa\u6a21\u578b\nmodel = SimpleCNN().to(device)\ntrain(model, trainloader, testloader, device)\n</code></pre> <pre><code>def denormalize(tensor):\n    # \u8f93\u5165\u662f\u5f52\u4e00\u5316\u540e\u7684\u5f20\u91cf [C, H, W]\n    # \u53cd\u5f52\u4e00\u5316\uff1a(tensor * std) + mean\n    # \u539f\u59cb\u5f52\u4e00\u5316\u53c2\u6570\uff1amean=0.5, std=0.5\n    return tensor * 0.5 + 0.5\n</code></pre> <pre><code>data_iter = iter(trainloader)\nimages, labels = next(data_iter)  # \u83b7\u53d6\u7b2c\u4e00\u4e2abatch\n\n# \u53cd\u5f52\u4e00\u5316\u5e76\u8f6c\u6362\u4e3anumpy\nimg = denormalize(images[0]).numpy()  # \u53d6batch\u4e2d\u7684\u7b2c\u4e00\u5f20\nimg = np.transpose(img, (1, 2, 0))    # \u4ece(C, H, W)\u8f6c\u4e3a(H, W, C)\n\n# \u663e\u793a\u56fe\u50cf\nplt.imshow(img)\nplt.title(f\"Label: {trainset.classes[labels[0]]}\")\nplt.axis('off')\nplt.show()\n</code></pre></p>"},{"location":"lab3/CNN%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/#2-mnistcnn","title":"2. \u5728MNIST\u6570\u636e\u96c6\u4e0a\u5b9e\u73b0CNN\uff1a","text":"<p>TODO: \u5728\u5b9e\u9a8c\u4e8c\u4e2d\u6211\u4eec\u5b9e\u73b0\u4e86\u5728MNIST\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u5206\u7c7b\uff0c \u4f7f\u7528\u672c\u8282\u7684CNN\u53c8\u8be5\u5982\u4f55\u5b9e\u73b0\uff0c\u7ed3\u5408\u672c\u8282\u5185\u5bb9\u4ee5\u53ca\u5b9e\u9a8c\u4e8c\u5185\u5bb9\u5c1d\u8bd5\u5b9e\u73b0</p>"},{"location":"lab3/CNN%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/#3-lenet","title":"3. \u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08LeNet\uff09","text":"<p>\u672c\u8282\u5c06\u4ecb\u7ecdLeNet\uff0c\u5b83\u662f\u6700\u65e9\u53d1\u5e03\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u4e4b\u4e00\uff0c \u56e0\u5176\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u4efb\u52a1\u4e2d\u7684\u9ad8\u6548\u6027\u80fd\u800c\u53d7\u5230\u5e7f\u6cdb\u5173\u6ce8\u3002  \u8fd9\u4e2a\u6a21\u578b\u662f\u7531AT&amp;T\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u7684\u7814\u7a76\u5458Yann LeCun\u57281989\u5e74\u63d0\u51fa\u7684\uff08\u5e76\u4ee5\u5176\u547d\u540d\uff09\uff0c \u76ee\u7684\u662f\u8bc6\u522b\u56fe\u50cf (LeCun et al., 1998)\u4e2d\u7684\u624b\u5199\u6570\u5b57\u3002  \u5f53\u65f6\uff0cYann LeCun\u53d1\u8868\u4e86\u7b2c\u4e00\u7bc7\u901a\u8fc7\u53cd\u5411\u4f20\u64ad\u6210\u529f\u8bad\u7ec3\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7684\u7814\u7a76\uff0c \u8fd9\u9879\u5de5\u4f5c\u4ee3\u8868\u4e86\u5341\u591a\u5e74\u6765\u795e\u7ecf\u7f51\u7edc\u7814\u7a76\u5f00\u53d1\u7684\u6210\u679c\u3002</p> <p>\u6211\u4eec\u5bf9\u539f\u59cb\u6a21\u578b\u505a\u4e86\u4e00\u70b9\u5c0f\u6539\u52a8\uff0c\u53bb\u6389\u4e86\u6700\u540e\u4e00\u5c42\u7684\u9ad8\u65af\u6fc0\u6d3b\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd9\u4e2a\u7f51\u7edc\u4e0e\u6700\u521d\u7684LeNet-5\u4e00\u81f4\u3002</p> <p></p> <p>\u4ee5\u4e0b\u662f\u901a\u8fc7\u5b9e\u4f8b\u5316\u4e00\u4e2aSequential\u6765\u5b9e\u73b0LeNet\u4ee3\u7801. <pre><code>import torch\nfrom torch import nn\nfrom d2l import torch as d2l\n\nnet = nn.Sequential(\n    nn.Conv2d(1, 6, kernel_size=5, padding=2), nn.Sigmoid(),\n    nn.AvgPool2d(kernel_size=2, stride=2),\n    nn.Conv2d(6, 16, kernel_size=5), nn.Sigmoid(),\n    nn.AvgPool2d(kernel_size=2, stride=2),\n    nn.Flatten(),\n    nn.Linear(16 * 5 * 5, 120), nn.Sigmoid(),\n    nn.Linear(120, 84), nn.Sigmoid(),\n    nn.Linear(84, 10))\n</code></pre> \u4e0b\u9762\uff0c\u6211\u4eec\u5c06\u4e00\u4e2a\u5927\u5c0f\u4e3a28x28 \u7684\u5355\u901a\u9053\uff08\u9ed1\u767d\uff09\u56fe\u50cf\u901a\u8fc7LeNet\u3002 \u901a\u8fc7\u5728\u6bcf\u4e00\u5c42\u6253\u5370\u8f93\u51fa\u7684\u5f62\u72b6\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u6a21\u578b\uff0c\u4ee5\u786e\u4fdd\u5176\u64cd\u4f5c\u4e0e\u6211\u4eec\u671f\u671b\u7684\u56fe\u4e2d\u4e00\u81f4 <pre><code>X = torch.rand(size=(1, 1, 28, 28), dtype=torch.float32)\nfor layer in net:\n    X = layer(X)\n    print(layer.__class__.__name__,'output shape: \\t',X.shape)\n</code></pre> \u8f93\u51fa\u4e3a\uff1a <pre><code>Conv2d output shape:         torch.Size([1, 6, 28, 28])\nSigmoid output shape:        torch.Size([1, 6, 28, 28])\nAvgPool2d output shape:      torch.Size([1, 6, 14, 14])\nConv2d output shape:         torch.Size([1, 16, 10, 10])\nSigmoid output shape:        torch.Size([1, 16, 10, 10])\nAvgPool2d output shape:      torch.Size([1, 16, 5, 5])\nFlatten output shape:        torch.Size([1, 400])\nLinear output shape:         torch.Size([1, 120])\nSigmoid output shape:        torch.Size([1, 120])\nLinear output shape:         torch.Size([1, 84])\nSigmoid output shape:        torch.Size([1, 84])\nLinear output shape:         torch.Size([1, 10])\n</code></pre> TODO: \u7ed3\u5408\u56fe\u7247\u4e2d\u6240\u7ed9\u51fa\u7684LeNet\u4ee5\u53ca\u7ed9\u51fa\u7684nn.Sequential\uff0c\u5c06\u524d\u6587\u7ed9\u51fa\u7684net\u7ed3\u6784\u4ee5\u7c7b\u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u5e76\u5b9e\u73b0\u5728 MNIST\u6570\u636e\u96c6\u4e0a\u7684\u5206\u7c7b</p>"},{"location":"lab3/CNN%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/#4","title":"4. \u6279\u91cf\u89c4\u8303\u5316","text":"<p>\u8bad\u7ec3\u6df1\u5c42\u795e\u7ecf\u7f51\u7edc\u662f\u5341\u5206\u56f0\u96be\u7684\uff0c\u7279\u522b\u662f\u5728\u8f83\u77ed\u7684\u65f6\u95f4\u5185\u4f7f\u4ed6\u4eec\u6536\u655b\u66f4\u52a0\u68d8\u624b\u3002  \u672c\u8282\u5c06\u4ecb\u7ecd\u6279\u91cf\u89c4\u8303\u5316\uff08batch normalization\uff09 (Ioffe and Szegedy, 2015)\uff0c \u8fd9\u662f\u4e00\u79cd\u6d41\u884c\u4e14\u6709\u6548\u7684\u6280\u672f\uff0c\u53ef\u6301\u7eed\u52a0\u901f\u6df1\u5c42\u7f51\u7edc\u7684\u6536\u655b\u901f\u5ea6\u3002</p> <p>\u4e3a\u4ec0\u4e48\u9700\u8981\u6279\u91cf\u89c4\u8303\u5316\u5c42\u5462\uff1f\u8ba9\u6211\u4eec\u6765\u56de\u987e\u4e00\u4e0b\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc\u65f6\u51fa\u73b0\u7684\u4e00\u4e9b\u5b9e\u9645\u6311\u6218\u3002</p> <p>\u9996\u5148\uff0c\u6570\u636e\u9884\u5904\u7406\u7684\u65b9\u5f0f\u901a\u5e38\u4f1a\u5bf9\u6700\u7ec8\u7ed3\u679c\u4ea7\u751f\u5de8\u5927\u5f71\u54cd\u3002 \u4f7f\u7528\u771f\u5b9e\u6570\u636e\u65f6\uff0c\u6211\u4eec\u7684\u7b2c\u4e00\u6b65\u662f\u6807\u51c6\u5316\u8f93\u5165\u7279\u5f81\uff0c\u4f7f\u5176\u5e73\u5747\u503c\u4e3a0\uff0c\u65b9\u5dee\u4e3a1\u3002  \u76f4\u89c2\u5730\u8bf4\uff0c\u8fd9\u79cd\u6807\u51c6\u5316\u53ef\u4ee5\u5f88\u597d\u5730\u4e0e\u6211\u4eec\u7684\u4f18\u5316\u5668\u914d\u5408\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u5c06\u53c2\u6570\u7684\u91cf\u7ea7\u8fdb\u884c\u7edf\u4e00\u3002</p> <p>\u7b2c\u4e8c\uff0c\u5bf9\u4e8e\u5178\u578b\u7684\u591a\u5c42\u611f\u77e5\u673a\u6216\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u3002\u5f53\u6211\u4eec\u8bad\u7ec3\u65f6\uff0c\u4e2d\u95f4\u5c42\u4e2d\u7684\u53d8\u91cf\uff08 \u4f8b\u5982\uff0c\u591a\u5c42\u611f\u77e5\u673a\u4e2d\u7684\u4eff\u5c04\u53d8\u6362\u8f93\u51fa\uff09 \u53ef\u80fd\u5177\u6709\u66f4\u5e7f\u7684\u53d8\u5316\u8303\u56f4\uff1a\u4e0d\u8bba\u662f\u6cbf\u7740\u4ece\u8f93\u5165\u5230\u8f93\u51fa\u7684\u5c42\uff0c\u8de8\u540c\u4e00\u5c42\u4e2d\u7684\u5355\u5143\uff0c \u6216\u662f\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u6a21\u578b\u53c2\u6570\u7684\u968f\u7740\u8bad\u7ec3\u66f4\u65b0\u53d8\u5e7b\u83ab\u6d4b\u3002 \u6279\u91cf\u89c4\u8303\u5316\u7684\u53d1\u660e\u8005\u975e\u6b63\u5f0f\u5730\u5047\u8bbe\uff0c \u8fd9\u4e9b\u53d8\u91cf\u5206\u5e03\u4e2d\u7684\u8fd9\u79cd\u504f\u79fb\u53ef\u80fd\u4f1a\u963b\u788d\u7f51\u7edc\u7684\u6536\u655b\u3002  \u76f4\u89c2\u5730\u8bf4\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u731c\u60f3\uff0c\u5982\u679c\u4e00\u4e2a\u5c42\u7684\u53ef\u53d8\u503c\u662f\u53e6\u4e00\u5c42\u7684100\u500d\uff0c\u8fd9\u53ef\u80fd\u9700\u8981\u5bf9\u5b66\u4e60\u7387\u8fdb\u884c\u8865\u507f\u8c03\u6574\u3002</p> <p>\u7b2c\u4e09\uff0c\u66f4\u6df1\u5c42\u7684\u7f51\u7edc\u5f88\u590d\u6742\uff0c\u5bb9\u6613\u8fc7\u62df\u5408\u3002 \u8fd9\u610f\u5473\u7740\u6b63\u5219\u5316\u53d8\u5f97\u66f4\u52a0\u91cd\u8981\u3002</p> <p>\u6279\u91cf\u89c4\u8303\u5316\u5e94\u7528\u4e8e\u5355\u4e2a\u53ef\u9009\u5c42\uff08\u4e5f\u53ef\u4ee5\u5e94\u7528\u5230\u6240\u6709\u5c42\uff09\uff0c\u5176\u539f\u7406\u5982\u4e0b\uff1a\u5728\u6bcf\u6b21\u8bad\u7ec3\u8fed\u4ee3\u4e2d\uff0c \u6211\u4eec\u9996\u5148\u89c4\u8303\u5316\u8f93\u5165\uff0c\u5373\u901a\u8fc7\u51cf\u53bb\u5176\u5747\u503c\u5e76\u9664\u4ee5\u5176\u6807\u51c6\u5dee\uff0c\u5176\u4e2d\u4e24\u8005\u5747\u57fa\u4e8e\u5f53\u524d\u5c0f\u6279\u91cf\u5904\u7406\u3002  \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5e94\u7528\u6bd4\u4f8b\u7cfb\u6570\u548c\u6bd4\u4f8b\u504f\u79fb\u3002 \u6b63\u662f\u7531\u4e8e\u8fd9\u4e2a\u57fa\u4e8e\u6279\u91cf\u7edf\u8ba1\u7684\u6807\u51c6\u5316\uff0c\u624d\u6709\u4e86\u6279\u91cf\u89c4\u8303\u5316\u7684\u540d\u79f0\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528\u5927\u5c0f\u4e3a1\u7684\u5c0f\u6279\u91cf\u5e94\u7528\u6279\u91cf\u89c4\u8303\u5316\uff0c\u6211\u4eec\u5c06\u65e0\u6cd5\u5b66\u5230\u4efb\u4f55\u4e1c\u897f\u3002  \u8fd9\u662f\u56e0\u4e3a\u5728\u51cf\u53bb\u5747\u503c\u4e4b\u540e\uff0c\u6bcf\u4e2a\u9690\u85cf\u5355\u5143\u5c06\u4e3a0\u3002 \u6240\u4ee5\uff0c \u53ea\u6709\u4f7f\u7528\u8db3\u591f\u5927\u7684\u5c0f\u6279\u91cf\uff0c\u6279\u91cf\u89c4\u8303\u5316\u8fd9\u79cd\u65b9\u6cd5\u624d\u662f\u6709\u6548\u4e14\u7a33\u5b9a\u7684\u3002  \u8bf7\u6ce8\u610f\uff0c\u5728\u5e94\u7528\u6279\u91cf\u89c4\u8303\u5316\u65f6\uff0c\u6279\u91cf\u5927\u5c0f\u7684\u9009\u62e9\u53ef\u80fd\u6bd4\u6ca1\u6709\u6279\u91cf\u89c4\u8303\u5316\u65f6\u66f4\u91cd\u8981\u3002</p> <p>\u4ece\u5f62\u5f0f\u4e0a\u6765\u8bf4\u5982\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u901a\u8fc7\u5bf9\u6570\u636e\u51cf\u53bb\u5747\u503c\u518d\u9664\u4ee5\u65b9\u5dee\u83b7\u5f97\uff0c\u7531\u4e8e\u5355\u4f4d\u65b9\u5dee\uff08\u4e0e\u5176\u4ed6\u4e00\u4e9b\u9b54\u6cd5\u6570\uff09\u662f\u4e00\u4e2a\u4e3b\u89c2\u7684\u9009\u62e9\uff0c \u56e0\u6b64\u6211\u4eec\u901a\u5e38\u5305\u542b\u62c9\u4f38\u53c2\u6570\uff08scale\uff09\u03b3 \u548c\u504f\u79fb\u53c2\u6570\uff08shift\uff09\u03b2 \uff0c\u5b83\u4eec\u7684\u5f62\u72b6\u4e0ex \u76f8\u540c\u3002  \u8bf7\u6ce8\u610f\uff0c\u03b3\u548c\u03b2 \u662f\u9700\u8981\u4e0e\u5176\u4ed6\u6a21\u578b\u53c2\u6570\u4e00\u8d77\u5b66\u4e60\u7684\u53c2\u6570\u3002 \u540c\u65f6\u03b3\u548c\u03b2\u53ef\u4ee5\u5b89\u88c5\u5982\u4e0b\u7ed9\u51fa</p> <p></p>"},{"location":"lab3/CNN%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/#_1","title":"\u6279\u91cf\u89c4\u8303\u5316\u5c42","text":"<p>\u56de\u60f3\u4e00\u4e0b\uff0c\u6279\u91cf\u89c4\u8303\u5316\u548c\u5176\u4ed6\u5c42\u4e4b\u95f4\u7684\u4e00\u4e2a\u5173\u952e\u533a\u522b\u662f\uff0c\u7531\u4e8e\u6279\u91cf\u89c4\u8303\u5316\u5728\u5b8c\u6574\u7684\u5c0f\u6279\u91cf\u4e0a\u8fd0\u884c\uff0c \u56e0\u6b64\u6211\u4eec\u4e0d\u80fd\u50cf\u4ee5\u524d\u5728\u5f15\u5165\u5176\u4ed6\u5c42\u65f6\u90a3\u6837\u5ffd\u7565\u6279\u91cf\u5927\u5c0f\u3002  \u6211\u4eec\u5728\u4e0b\u9762\u8ba8\u8bba\u8fd9\u4e24\u79cd\u60c5\u51b5\uff1a\u5168\u8fde\u63a5\u5c42\u548c\u5377\u79ef\u5c42\uff0c\u4ed6\u4eec\u7684\u6279\u91cf\u89c4\u8303\u5316\u5b9e\u73b0\u7565\u6709\u4e0d\u540c\u3002</p>"},{"location":"lab3/CNN%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/#_2","title":"\u5168\u8fde\u63a5\u5c42","text":"<p>\u901a\u5e38\uff0c\u6211\u4eec\u5c06\u6279\u91cf\u89c4\u8303\u5316\u5c42\u7f6e\u4e8e\u5168\u8fde\u63a5\u5c42\u4e2d\u7684\u4eff\u5c04\u53d8\u6362\u548c\u6fc0\u6d3b\u51fd\u6570\u4e4b\u95f4\u3002 \u4f7f\u7528\u6279\u91cf\u89c4\u8303\u5316\u7684\u5168\u8fde\u63a5\u5c42\u7684\u8f93\u51fa\u7684\u8ba1\u7b97\u8be6\u60c5\u5982\u4e0b</p> <p></p>"},{"location":"lab3/CNN%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/#_3","title":"\u5377\u79ef\u5c42","text":"<p>\u540c\u6837\uff0c\u5bf9\u4e8e\u5377\u79ef\u5c42\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5377\u79ef\u5c42\u4e4b\u540e\u548c\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\u4e4b\u524d\u5e94\u7528\u6279\u91cf\u89c4\u8303\u5316\u3002 \u5f53\u5377\u79ef\u6709\u591a\u4e2a\u8f93\u51fa\u901a\u9053\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u8fd9\u4e9b\u901a\u9053\u7684\u201c\u6bcf\u4e2a\u201d\u8f93\u51fa\u6267\u884c\u6279\u91cf\u89c4\u8303\u5316\uff0c \u6bcf\u4e2a\u901a\u9053\u90fd\u6709\u81ea\u5df1\u7684\u62c9\u4f38\uff08scale\uff09\u548c\u504f\u79fb\uff08shift\uff09\u53c2\u6570\uff0c\u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u662f\u6807\u91cf\u3002 </p>"},{"location":"lab3/CNN%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/#_4","title":"\u9884\u6d4b\u8fc7\u7a0b\u4e2d\u7684\u6279\u91cf\u89c4\u8303\u5316","text":"<p>\u6b63\u5982\u6211\u4eec\u524d\u9762\u63d0\u5230\u7684\uff0c\u6279\u91cf\u89c4\u8303\u5316\u5728\u8bad\u7ec3\u6a21\u5f0f\u548c\u9884\u6d4b\u6a21\u5f0f\u4e0b\u7684\u884c\u4e3a\u901a\u5e38\u4e0d\u540c\u3002  \u9996\u5148\uff0c\u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u7528\u4e8e\u9884\u6d4b\u65f6\uff0c\u6211\u4eec\u4e0d\u518d\u9700\u8981\u6837\u672c\u5747\u503c\u4e2d\u7684\u566a\u58f0\u4ee5\u53ca\u5728\u5fae\u6279\u6b21\u4e0a\u4f30\u8ba1\u6bcf\u4e2a\u5c0f\u6279\u6b21\u4ea7\u751f\u7684 \u6837\u672c\u65b9\u5dee\u4e86\u3002 \u5176\u6b21\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u6211\u4eec\u7684\u6a21\u578b\u5bf9\u9010\u4e2a\u6837\u672c\u8fdb\u884c\u9884\u6d4b\u3002  \u4e00\u79cd\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u79fb\u52a8\u5e73\u5747\u4f30\u7b97\u6574\u4e2a\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u672c\u5747\u503c\u548c\u65b9\u5dee\uff0c\u5e76\u5728\u9884\u6d4b\u65f6\u4f7f\u7528\u5b83\u4eec\u5f97\u5230\u786e\u5b9a\u7684\u8f93\u51fa\u3002  \u53ef\u89c1\uff0c\u548c\u6682\u9000\u6cd5\u4e00\u6837\uff0c\u6279\u91cf\u89c4\u8303\u5316\u5c42\u5728\u8bad\u7ec3\u6a21\u5f0f\u548c\u9884\u6d4b\u6a21\u5f0f\u4e0b\u7684\u8ba1\u7b97\u7ed3\u679c\u4e5f\u662f\u4e0d\u4e00\u6837\u7684\u3002</p>"},{"location":"lab3/CNN%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/#_5","title":"\u4ece\u96f6\u5b9e\u73b0","text":"<pre><code>import torch\nfrom torch import nn\nfrom d2l import torch as d2l\n\n\ndef batch_norm(X, gamma, beta, moving_mean, moving_var, eps, momentum):\n    # \u901a\u8fc7is_grad_enabled\u6765\u5224\u65ad\u5f53\u524d\u6a21\u5f0f\u662f\u8bad\u7ec3\u6a21\u5f0f\u8fd8\u662f\u9884\u6d4b\u6a21\u5f0f\n    if not torch.is_grad_enabled():\n        # \u5982\u679c\u662f\u5728\u9884\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u76f4\u63a5\u4f7f\u7528\u4f20\u5165\u7684\u79fb\u52a8\u5e73\u5747\u6240\u5f97\u7684\u5747\u503c\u548c\u65b9\u5dee\n        X_hat = (X - moving_mean) / torch.sqrt(moving_var + eps)\n    else:\n        assert len(X.shape) in (2, 4)\n        if len(X.shape) == 2:\n            # \u4f7f\u7528\u5168\u8fde\u63a5\u5c42\u7684\u60c5\u51b5\uff0c\u8ba1\u7b97\u7279\u5f81\u7ef4\u4e0a\u7684\u5747\u503c\u548c\u65b9\u5dee\n            mean = X.mean(dim=0)\n            var = ((X - mean) ** 2).mean(dim=0)\n        else:\n            # \u4f7f\u7528\u4e8c\u7ef4\u5377\u79ef\u5c42\u7684\u60c5\u51b5\uff0c\u8ba1\u7b97\u901a\u9053\u7ef4\u4e0a\uff08axis=1\uff09\u7684\u5747\u503c\u548c\u65b9\u5dee\u3002\n            # \u8fd9\u91cc\u6211\u4eec\u9700\u8981\u4fdd\u6301X\u7684\u5f62\u72b6\u4ee5\u4fbf\u540e\u9762\u53ef\u4ee5\u505a\u5e7f\u64ad\u8fd0\u7b97\n            mean = X.mean(dim=(0, 2, 3), keepdim=True)\n            var = ((X - mean) ** 2).mean(dim=(0, 2, 3), keepdim=True)\n        # \u8bad\u7ec3\u6a21\u5f0f\u4e0b\uff0c\u7528\u5f53\u524d\u7684\u5747\u503c\u548c\u65b9\u5dee\u505a\u6807\u51c6\u5316\n        X_hat = (X - mean) / torch.sqrt(var + eps)\n        # \u66f4\u65b0\u79fb\u52a8\u5e73\u5747\u7684\u5747\u503c\u548c\u65b9\u5dee\n        moving_mean = momentum * moving_mean + (1.0 - momentum) * mean\n        moving_var = momentum * moving_var + (1.0 - momentum) * var\n    Y = gamma * X_hat + beta  # \u7f29\u653e\u548c\u79fb\u4f4d\n    return Y, moving_mean.data, moving_var.data\n</code></pre> <pre><code>class BatchNorm(nn.Module):\n    # num_features\uff1a\u5b8c\u5168\u8fde\u63a5\u5c42\u7684\u8f93\u51fa\u6570\u91cf\u6216\u5377\u79ef\u5c42\u7684\u8f93\u51fa\u901a\u9053\u6570\u3002\n    # num_dims\uff1a2\u8868\u793a\u5b8c\u5168\u8fde\u63a5\u5c42\uff0c4\u8868\u793a\u5377\u79ef\u5c42\n    def __init__(self, num_features, num_dims):\n        super().__init__()\n        if num_dims == 2:\n            shape = (1, num_features)\n        else:\n            shape = (1, num_features, 1, 1)\n        # \u53c2\u4e0e\u6c42\u68af\u5ea6\u548c\u8fed\u4ee3\u7684\u62c9\u4f38\u548c\u504f\u79fb\u53c2\u6570\uff0c\u5206\u522b\u521d\u59cb\u5316\u62101\u548c0\n        self.gamma = nn.Parameter(torch.ones(shape))\n        self.beta = nn.Parameter(torch.zeros(shape))\n        # \u975e\u6a21\u578b\u53c2\u6570\u7684\u53d8\u91cf\u521d\u59cb\u5316\u4e3a0\u548c1\n        self.moving_mean = torch.zeros(shape)\n        self.moving_var = torch.ones(shape)\n\n    def forward(self, X):\n        # \u5982\u679cX\u4e0d\u5728\u5185\u5b58\u4e0a\uff0c\u5c06moving_mean\u548cmoving_var\n        # \u590d\u5236\u5230X\u6240\u5728\u663e\u5b58\u4e0a\n        if self.moving_mean.device != X.device:\n            self.moving_mean = self.moving_mean.to(X.device)\n            self.moving_var = self.moving_var.to(X.device)\n        # \u4fdd\u5b58\u66f4\u65b0\u8fc7\u7684moving_mean\u548cmoving_var\n        Y, self.moving_mean, self.moving_var = batch_norm(\n            X, self.gamma, self.beta, self.moving_mean,\n            self.moving_var, eps=1e-5, momentum=0.9)\n        return Y\n</code></pre> <p>\u4e3a\u4e86\u66f4\u597d\u7406\u89e3\u5982\u4f55\u5e94\u7528BatchNorm\uff0c\u4e0b\u9762\u6211\u4eec\u5c06\u5176\u5e94\u7528\u4e8eLeNet\u6a21\u578b  \u56de\u60f3\u4e00\u4e0b\uff0c\u6279\u91cf\u89c4\u8303\u5316\u662f\u5728\u5377\u79ef\u5c42\u6216\u5168\u8fde\u63a5\u5c42\u4e4b\u540e\u3001\u76f8\u5e94\u7684\u6fc0\u6d3b\u51fd\u6570\u4e4b\u524d\u5e94\u7528\u7684.</p> <pre><code>net = nn.Sequential(\n    nn.Conv2d(1, 6, kernel_size=5), BatchNorm(6, num_dims=4), nn.Sigmoid(),\n    nn.AvgPool2d(kernel_size=2, stride=2),\n    nn.Conv2d(6, 16, kernel_size=5), BatchNorm(16, num_dims=4), nn.Sigmoid(),\n    nn.AvgPool2d(kernel_size=2, stride=2), nn.Flatten(),\n    nn.Linear(16*4*4, 120), BatchNorm(120, num_dims=2), nn.Sigmoid(),\n    nn.Linear(120, 84), BatchNorm(84, num_dims=2), nn.Sigmoid(),\n    nn.Linear(84, 10))\n</code></pre>"},{"location":"lab3/CNN%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/#_6","title":"\u7b80\u5355\u5b9e\u73b0","text":"<p>\u9664\u4e86\u4f7f\u7528\u6211\u4eec\u521a\u521a\u5b9a\u4e49\u7684BatchNorm\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2d\u5b9a\u4e49\u7684BatchNorm\u3002 \u8be5\u4ee3\u7801\u770b\u8d77\u6765\u51e0\u4e4e\u4e0e\u6211\u4eec\u4e0a\u9762\u7684\u4ee3\u7801\u76f8\u540c\u3002 <pre><code>net = nn.Sequential(\n    nn.Conv2d(1, 6, kernel_size=5), nn.BatchNorm2d(6), nn.Sigmoid(),\n    nn.AvgPool2d(kernel_size=2, stride=2),\n    nn.Conv2d(6, 16, kernel_size=5), nn.BatchNorm2d(16), nn.Sigmoid(),\n    nn.AvgPool2d(kernel_size=2, stride=2), nn.Flatten(),\n    nn.Linear(256, 120), nn.BatchNorm1d(120), nn.Sigmoid(),\n    nn.Linear(120, 84), nn.BatchNorm1d(84), nn.Sigmoid(),\n    nn.Linear(84, 10))\n</code></pre> TODO: \u4f7f\u7528\u4e0a\u8ff0\u5b9a\u4e49\u7684\u5305\u542bBatchNorm\u7684LeNet\u7f51\u7edc\uff0c \u5b9e\u73b0\u5728MNIST\u6570\u636e\u96c6\u4e0a\u7684\u56fe\u50cf\u5206\u7c7b(\u76f4\u63a5\u4f7f\u7528nn.Sequential\u6216\u8005\u81ea\u5b9a\u4e49\u7c7b\u5747\u53ef)</p>"},{"location":"lab3/%E5%9B%BE%E5%83%8F%E5%8D%B7%E7%A7%AF/","title":"\u5b9e\u9a8c\u4efb\u52a1\u4e00\uff1a \u56fe\u50cf\u5377\u79ef","text":""},{"location":"lab3/%E5%9B%BE%E5%83%8F%E5%8D%B7%E7%A7%AF/#_2","title":"\u4e92\u76f8\u5173\u8fd0\u7b97","text":"<p>\u5982\u56fe\u4e2d\u6240\u793a\uff0c\u8003\u8651\u4e00\u4e2a3x3\u77e9\u9635\u4f5c\u4e3a\u8f93\u5165\u5f20\u91cf\uff0c\u5377\u79ef\u6838\u5b9a\u4e49\u4e3a\u4e00\u4e2a2x2\u77e9\u9635\u3002</p> <p></p> <p>\u5728\u4e8c\u7ef4\u4e92\u76f8\u5173\u8fd0\u7b97\u4e2d\uff0c\u5377\u79ef\u7a97\u53e3\u4ece\u8f93\u5165\u5f20\u91cf\u7684\u5de6\u4e0a\u89d2\u5f00\u59cb\uff0c\u4ece\u5de6\u5230\u53f3\u3001\u4ece\u4e0a\u5230\u4e0b\u6ed1\u52a8\u3002  \u5f53\u5377\u79ef\u7a97\u53e3\u6ed1\u52a8\u5230\u65b0\u4e00\u4e2a\u4f4d\u7f6e\u65f6\uff0c\u5305\u542b\u5728\u8be5\u7a97\u53e3\u4e2d\u7684\u90e8\u5206\u5f20\u91cf\u4e0e\u5377\u79ef\u6838\u5f20\u91cf\u8fdb\u884c\u6309\u5143\u7d20\u76f8\u4e58\uff0c \u5f97\u5230\u7684\u5f20\u91cf\u518d\u6c42\u548c\u5f97\u5230\u4e00\u4e2a\u5355\u4e00\u7684\u6807\u91cf\u503c\uff0c\u7531\u6b64\u6211\u4eec\u5f97\u51fa\u4e86\u8fd9\u4e00\u4f4d\u7f6e\u7684\u8f93\u51fa\u5f20\u91cf\u503c\u3002  \u5728\u5982\u4e0a\u4f8b\u5b50\u4e2d\uff0c\u8f93\u51fa\u5f20\u91cf\u7684\u56db\u4e2a\u5143\u7d20\u7531\u4e8c\u7ef4\u4e92\u76f8\u5173\u8fd0\u7b97\u5f97\u5230\uff0c\u8fd9\u4e2a\u8f93\u51fa\u9ad8\u5ea6\u4e3a2\u3001\u5bbd\u5ea6\u4e3a2</p> <p>\u5177\u4f53\u8ba1\u7b97\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a</p> <p></p> <p>\u6ce8\u610f\uff0c\u8f93\u51fa\u5927\u5c0f\u7565\u5c0f\u4e8e\u8f93\u5165\u5927\u5c0f\u3002\u8fd9\u662f\u56e0\u4e3a\u5377\u79ef\u6838\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5927\u4e8e1\uff0c \u800c\u5377\u79ef\u6838\u53ea\u4e0e\u56fe\u50cf\u4e2d \u6bcf\u4e2a\u5927\u5c0f\u5b8c\u5168\u9002\u5408\u7684\u4f4d\u7f6e\u8fdb\u884c\u4e92\u76f8\u5173\u8fd0\u7b97\u3002\u7ed9\u51fa\u5982\u4e0b\u8ba1\u7b97\u516c\u5f0f\u8ba1\u7b97\u8f93\u51fa\u77e9\u9635\u7684\u5927\u5c0f\u3002</p> <p></p> <p>\u5728\u4e4b\u524d\u56fe\u4e2d\u4f8b\u5b50\u4e2d\uff0c\u8f93\u5165\u4e3a3x3\u5f20\u91cf\uff0c\u5377\u79ef\u6838\u4e3a2x2\u5f20\u91cf\uff0c\u90a3\u4e48\u8f93\u51fa\u5f20\u91cf\u5f62\u72b6\u5219\u4e3a(3-2+1)x (3-2+1)</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5728corr2d\u51fd\u6570\u4e2d\u5b9e\u73b0\u5982\u4e0a\u8fc7\u7a0b\uff0c\u8be5\u51fd\u6570\u63a5\u53d7\u8f93\u5165\u5f20\u91cfX\u548c\u5377\u79ef\u6838\u5f20\u91cfK\uff0c \u5e76\u8fd4\u56de\u8f93\u51fa\u5f20\u91cfY</p> <p><pre><code>import torch\nfrom torch import nn\n\ndef corr2d(X, K):  #@save\n    \"\"\"\u8ba1\u7b97\u4e8c\u7ef4\u4e92\u76f8\u5173\u8fd0\u7b97\"\"\"\n    h, w = K.shape\n    Y = torch.zeros((X.shape[0] - h + 1, X.shape[1] - w + 1))\n    for i in range(Y.shape[0]):\n        for j in range(Y.shape[1]):\n            Y[i, j] = (X[i:i + h, j:j + w] * K).sum()\n    return Y\n</code></pre> \u6d4b\u8bd5 <pre><code>X = torch.tensor([[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]])\nK = torch.tensor([[0.0, 1.0], [2.0, 3.0]])\ncorr2d(X, K)\n</code></pre> \u8f93\u51fa <pre><code>tensor([[19., 25.],\n        [37., 43.]])\n</code></pre> \u5377\u79ef\u5c42\u5bf9\u8f93\u5165\u548c\u5377\u79ef\u6838\u6743\u91cd\u8fdb\u884c\u4e92\u76f8\u5173\u8fd0\u7b97\uff0c\u5e76\u5728\u6dfb\u52a0\u6807\u91cf\u504f\u7f6e\u4e4b\u540e\u4ea7\u751f\u8f93\u51fa\u3002 \u6240\u4ee5\uff0c \u5377\u79ef\u5c42\u4e2d\u7684\u4e24\u4e2a\u88ab\u8bad\u7ec3\u7684\u53c2\u6570\u662f\u5377\u79ef\u6838\u6743\u91cd\u548c\u6807\u91cf\u504f\u7f6e\u3002 \u5c31\u50cf\u6211\u4eec\u4e4b\u524d\u968f\u673a\u521d\u59cb\u5316\u5168\u8fde\u63a5 \u5c42\u4e00\u6837\uff0c\u5728\u8bad\u7ec3\u57fa\u4e8e\u5377\u79ef\u5c42\u7684\u6a21\u578b\u65f6\uff0c\u6211\u4eec\u4e5f\u968f\u673a\u521d\u59cb\u5316\u5377\u79ef\u6838\u6743\u91cd\u3002</p> <p>\u57fa\u4e8e\u4e0a\u9762\u5b9a\u4e49\u7684corr2d\u51fd\u6570\u5b9e\u73b0\u4e8c\u7ef4\u5377\u79ef\u5c42\u3002\u5728__init__\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u5c06weight \u548cbias\u58f0\u660e\u4e3a\u4e24\u4e2a\u6a21\u578b\u53c2\u6570\u3002\u524d\u5411\u4f20\u64ad\u51fd\u6570\u8c03\u7528corr2d\u51fd\u6570\u5e76\u6dfb\u52a0\u504f\u7f6e\u3002</p> <pre><code>class Conv2D(nn.Module):\n    def __init__(self, kernel_size):\n        super().__init__()\n        self.weight = nn.Parameter(torch.rand(kernel_size))\n        self.bias = nn.Parameter(torch.zeros(1))\n\n    def forward(self, x):\n        return corr2d(x, self.weight) + self.bias\n</code></pre>"},{"location":"lab3/%E5%9B%BE%E5%83%8F%E5%8D%B7%E7%A7%AF/#_3","title":"\u586b\u5145\u548c\u6b65\u5e45","text":"<p>\u672c\u8282\u6211\u4eec\u5c06\u4ecb\u7ecd\u586b\u5145\uff08padding\uff09\u548c\u6b65\u5e45\uff08stride\uff09\u3002\u5047\u8bbe\u4ee5\u4e0b\u60c5\u666f\uff1a  \u6709\u65f6\uff0c\u5728\u5e94\u7528\u4e86\u8fde\u7eed\u7684\u5377\u79ef\u4e4b\u540e\uff0c\u6211\u4eec\u6700\u7ec8\u5f97\u5230\u7684\u8f93\u51fa\u8fdc\u5c0f\u4e8e\u8f93\u5165\u5927\u5c0f\u3002 \u8fd9\u662f\u7531\u4e8e\u5377\u79ef\u6838\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u901a\u5e38\u5927\u4e8e \u6240\u5bfc\u81f4\u7684\u3002\u6bd4\u5982\uff0c\u4e00\u4e2a240x240 \u50cf\u7d20\u7684\u56fe\u50cf\uff0c\u7ecf\u8fc710\u5c42 5x5\u7684\u5377\u79ef\u540e\uff0c\u5c06\u51cf\u5c11\u5230200x200 \u50cf\u7d20\u3002\u5982\u6b64\u4e00\u6765\uff0c\u539f\u59cb\u56fe\u50cf\u7684\u8fb9\u754c\u4e22\u5931\u4e86\u8bb8\u591a\u6709\u7528\u4fe1\u606f\u3002 \u800c\u586b\u5145\u662f\u89e3\u51b3\u6b64\u95ee\u9898\u6700\u6709\u6548\u7684\u65b9\u6cd5\uff1b  \u6709\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u5927\u5e45\u964d\u4f4e\u56fe\u50cf\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u3002\u4f8b\u5982\uff0c \u5982\u679c\u6211\u4eec\u53d1\u73b0\u539f\u59cb\u7684\u8f93\u5165\u5206\u8fa8\u7387\u5341\u5206\u5197\u4f59\u3002\u6b65\u5e45\u5219\u53ef\u4ee5\u5728\u8fd9\u7c7b\u60c5\u51b5\u4e0b\u63d0\u4f9b\u5e2e\u52a9\u3002</p>"},{"location":"lab3/%E5%9B%BE%E5%83%8F%E5%8D%B7%E7%A7%AF/#_4","title":"\u586b\u5145","text":"<p>\u5982\u4e0a\u6240\u8ff0\uff0c\u5728\u5e94\u7528\u591a\u5c42\u5377\u79ef\u65f6\uff0c\u6211\u4eec\u5e38\u5e38\u4e22\u5931\u8fb9\u7f18\u50cf\u7d20\u3002 \u7531\u4e8e\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u5c0f\u5377\u79ef\u6838\uff0c \u56e0\u6b64\u5bf9\u4e8e\u4efb\u4f55\u5355\u4e2a\u5377\u79ef\uff0c\u6211\u4eec\u53ef\u80fd\u53ea\u4f1a\u4e22\u5931\u51e0\u4e2a\u50cf\u7d20\u3002 \u4f46\u968f\u7740\u6211\u4eec\u5e94\u7528\u8bb8\u591a\u8fde\u7eed\u5377\u79ef\u5c42\uff0c \u7d2f\u79ef\u4e22\u5931\u7684\u50cf\u7d20\u6570\u5c31\u591a\u4e86\u3002 \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u7b80\u5355\u65b9\u6cd5\u5373\u4e3a\u586b\u5145\uff08padding\uff09\uff1a \u5728\u8f93\u5165\u56fe\u50cf\u7684\u8fb9\u754c\u586b\u5145\u5143\u7d20\uff08\u901a\u5e38\u586b\u5145\u5143\u7d20\u662f 0\uff09\u3002  \u4f8b\u5982\uff0c\u5728\u4e0b\u56fe\u4e2d\uff0c\u6211\u4eec\u5c063x3\u8f93\u5165\u586b\u5145\u52305x5\uff0c\u90a3\u4e48\u5b83\u7684\u8f93\u51fa\u5c31\u589e\u52a0\u4e3a4x4 \u3002 \u9634\u5f71\u90e8\u5206\u662f\u7b2c\u4e00\u4e2a\u8f93\u51fa\u5143\u7d20\u4ee5\u53ca\u7528\u4e8e\u8f93\u51fa\u8ba1\u7b97\u7684\u8f93\u5165\u548c\u6838\u5f20\u91cf\u5143\u7d20\uff1a0x0+0x1+0x2+0x3=0 \u3002</p> <p></p> <p>\u5047\u8bbe\u6211\u4eec\u539f\u5f20\u91cf\u5f62\u72b6\u4e3anxn\uff0c\u5377\u79ef\u6838\u4e3akxk\uff0c\u6211\u4eec\u5728\u539f\u5f20\u91cf\u7684\u57fa\u7840\u4e0a\u586b\u5145A\u884c\uff0c\u5728\u539f\u5f20\u91cf\u57fa\u7840\u4e0a \u586b\u5145B\u5217\uff0c\u90a3\u4e48\u5728\u8fdb\u884c\u4e92\u76f8\u5173\u8fd0\u7b97\u540e\uff0c\u5f97\u5230\u7684\u8f93\u51fa\u5f62\u72b6\u4e3a(n+A-k+1)x(n+B-K+1), \u5728\u56fe\u4e2d\u7684\u4f8b\u5b50\u4e2d\uff0c\u8f93\u51fa\u521d\u59cb\u662f3x3\uff0c\u6211\u4eec\u5728\u586b\u5145\u4e86\u4e24\u884c\uff08\u4e0a\u4e0b\u5404\u4e00\u884c\uff09\u4ee5\u53ca\u4e24\u5217\uff0c\u90a3\u4e48\u65b0\u7684\u5f20\u91cf \u4e3a5x5\uff0c \u901a\u8fc7\u8fd0\u7b97\u540e\uff0c\u5f97\u5230\u5f62\u72b6\u4e3a(5-2+1)x(5-2+1)</p> <p>\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u4e3a3\u7684\u4e8c\u7ef4\u5377\u79ef\u5c42\uff0c\u5e76\u5728\u6240\u6709\u4fa7\u8fb9\u586b\u51451\u4e2a\u50cf\u7d20\u3002 \u7ed9\u5b9a\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u4e3a8\u7684\u8f93\u5165\uff0c\u5219\u8f93\u51fa\u7684\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u4e5f\u662f8\u3002 <pre><code>import torch\nfrom torch import nn\n\n\n# \u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8ba1\u7b97\u5377\u79ef\u5c42\u7684\u51fd\u6570\u3002\n# \u6b64\u51fd\u6570\u521d\u59cb\u5316\u5377\u79ef\u5c42\u6743\u91cd\uff0c\u5e76\u5bf9\u8f93\u5165\u548c\u8f93\u51fa\u63d0\u9ad8\u548c\u7f29\u51cf\u76f8\u5e94\u7684\u7ef4\u6570\ndef comp_conv2d(conv2d, X):\n    # \u8fd9\u91cc\u7684\uff081\uff0c1\uff09\u8868\u793a\u6279\u91cf\u5927\u5c0f\u548c\u901a\u9053\u6570\u90fd\u662f1\n    X = X.reshape((1, 1) + X.shape)\n    Y = conv2d(X)\n    # \u7701\u7565\u524d\u4e24\u4e2a\u7ef4\u5ea6\uff1a\u6279\u91cf\u5927\u5c0f\u548c\u901a\u9053\n    return Y.reshape(Y.shape[2:])\n\n# \u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u6bcf\u8fb9\u90fd\u586b\u5145\u4e861\u884c\u62161\u5217\uff0c\u56e0\u6b64\u603b\u5171\u6dfb\u52a0\u4e862\u884c\u62162\u5217\nconv2d = nn.Conv2d(1, 1, kernel_size=3, padding=1)\nX = torch.rand(size=(8, 8))\ncomp_conv2d(conv2d, X).shape\n</code></pre> \u8f93\u51fa\u662f\uff1a <pre><code>torch.Size([8, 8])\n</code></pre></p>"},{"location":"lab3/%E5%9B%BE%E5%83%8F%E5%8D%B7%E7%A7%AF/#_5","title":"\u6b65\u5e45","text":"<p>\u5728\u8ba1\u7b97\u4e92\u76f8\u5173\u65f6\uff0c\u5377\u79ef\u7a97\u53e3\u4ece\u8f93\u5165\u5f20\u91cf\u7684\u5de6\u4e0a\u89d2\u5f00\u59cb\uff0c\u5411\u4e0b\u3001\u5411\u53f3\u6ed1\u52a8\u3002 \u5728\u524d\u9762\u7684\u4f8b\u5b50\u4e2d \uff0c\u6211\u4eec\u9ed8\u8ba4\u6bcf\u6b21\u6ed1\u52a8\u4e00\u4e2a\u5143\u7d20\u3002 \u4f46\u662f\uff0c\u6709\u65f6\u5019\u4e3a\u4e86\u9ad8\u6548\u8ba1\u7b97\u6216\u662f\u7f29\u51cf\u91c7\u6837\u6b21\u6570\uff0c \u5377\u79ef\u7a97\u53e3\u53ef\u4ee5\u8df3\u8fc7\u4e2d\u95f4\u4f4d\u7f6e\uff0c\u6bcf\u6b21\u6ed1\u52a8\u591a\u4e2a\u5143\u7d20\u3002</p> <p>\u6211\u4eec\u5c06\u6bcf\u6b21\u6ed1\u52a8\u5143\u7d20\u7684\u6570\u91cf\u79f0\u4e3a\u6b65\u5e45\uff08stride\uff09\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u4f7f\u7528\u8fc7\u9ad8\u5ea6\u6216 \u5bbd\u5ea6\u4e3a1 \u7684\u6b65\u5e45\uff0c\u90a3\u4e48\u5982\u4f55\u4f7f\u7528\u8f83\u5927\u7684\u6b65\u5e45\u5462\uff1f \u4e0b\u56fe\u662f\u5782\u76f4\u6b65\u5e45\u4e3a3 \uff0c\u6c34\u5e73\u6b65\u5e45\u4e3a2 \u7684\u4e8c\u7ef4\u4e92\u76f8\u5173\u8fd0\u7b97\u3002 \u7740\u8272\u90e8\u5206\u662f\u8f93\u51fa\u5143\u7d20\u4ee5\u53ca\u7528\u4e8e\u8f93\u51fa\u8ba1\u7b97\u7684\u8f93\u5165\u548c\u5185\u6838\u5f20\u91cf\u5143\u7d20\uff1a</p> <p></p> <p>\u5728\u8fd9\u91cc\u7ed9\u51fa\u8f93\u51fa\u5f62\u72b6\u7684\u65b0\u8ba1\u7b97\u516c\u5f0f\uff1a</p> <p></p> <p>\u5176\u4e2d\u9664\u6cd5\u8fd0\u7b97\u5747\u5411\u4e0b\u53d6\u6574\u3002\u4ee5\u56fe\u4e2d\u4e3e\u4f8b\uff0c\u521d\u59cb\u4e3a3x3\uff0c\u586b\u51452\u884c2\u5217\uff0c\u5728\u6c34\u5e73\u65b9\u5411\u6b65\u957f\u4e3a2 \uff0c\u5728\u7ad6\u76f4\u65b9\u5411\u6b65\u957f\u4e3a3\uff0c\u90a3\u4e48\u6709\u5728\u6c34\u5e73\u65b9\u5411\u6709(3-2+2+2)/2=2(\u6ce8\u610f\u5411\u4e0b\u53d6\u6574)\uff0c\u5728\u7ad6\u76f4 \u65b9\u5411(3-2+2+3)/3=2,\u6700\u540e\u8f93\u51fa\u4e3a2x2</p> <p><pre><code>conv2d = nn.Conv2d(1, 1, kernel_size=3, padding=1, stride=2)\ncomp_conv2d(conv2d, X).shape\n</code></pre> \u8f93\u51fa\uff1a <pre><code>torch.Size([4, 4])\n</code></pre> <pre><code>conv2d = nn.Conv2d(1, 1, kernel_size=(3, 5), padding=(0, 1), stride=(3, 4))\ncomp_conv2d(conv2d, X).shape\n</code></pre> \u8f93\u51fa\uff1a <pre><code>torch.Size([2, 2])\n</code></pre></p>"},{"location":"lab3/%E5%9B%BE%E5%83%8F%E5%8D%B7%E7%A7%AF/#_6","title":"\u591a\u8f93\u5165\u8f93\u51fa\u901a\u9053","text":"<p>\u5f69\u8272\u56fe\u50cf\u5177\u6709\u6807\u51c6\u7684RGB\u901a\u9053\u6765\u4ee3\u8868\u7ea2\u3001\u7eff\u548c\u84dd\u3002 \u4f46\u662f\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4ec5\u5c55\u793a\u4e86\u5355\u4e2a\u8f93\u5165 \u548c\u5355\u4e2a\u8f93\u51fa\u901a\u9053\u7684\u7b80\u5316\u4f8b\u5b50\u3002 \u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5c06\u8f93\u5165\u3001\u5377\u79ef\u6838\u548c\u8f93\u51fa\u770b\u4f5c\u4e8c\u7ef4\u5f20\u91cf\u3002</p> <p>\u5f53\u6211\u4eec\u6dfb\u52a0\u901a\u9053\u65f6\uff0c\u6211\u4eec\u7684\u8f93\u5165\u548c\u9690\u85cf\u7684\u8868\u793a\u90fd\u53d8\u6210\u4e86\u4e09\u7ef4\u5f20\u91cf\u3002\u4f8b\u5982\uff0c\u6bcf\u4e2aRGB\u8f93\u5165\u56fe\u50cf \u5177\u67093 x h x w \u7684\u5f62\u72b6\u3002\u6211\u4eec\u5c06\u8fd9\u4e2a\u5927\u5c0f\u4e3a3\u7684\u8f74\u79f0\u4e3a\u901a\u9053\uff08channel\uff09\u7ef4\u5ea6\u3002 \u672c\u8282\u5c06\u66f4\u6df1\u5165\u5730\u7814\u7a76\u5177\u6709\u591a\u8f93\u5165\u548c\u591a\u8f93\u51fa\u901a\u9053\u7684\u5377\u79ef\u6838\u3002</p>"},{"location":"lab3/%E5%9B%BE%E5%83%8F%E5%8D%B7%E7%A7%AF/#_7","title":"\u591a\u8f93\u5165\u901a\u9053","text":"<p>\u5f53\u8f93\u5165\u5305\u542b\u591a\u4e2a\u901a\u9053\u65f6\uff0c\u9700\u8981\u6784\u9020\u4e00\u4e2a\u4e0e\u8f93\u5165\u6570\u636e\u5177\u6709 \u76f8\u540c\u8f93\u5165\u901a\u9053\u6570\u7684\u5377\u79ef\u6838\uff0c\u4ee5\u4fbf\u4e0e\u8f93\u5165\u6570\u636e\u8fdb\u884c\u4e92\u76f8\u5173\u8fd0\u7b97\u3002</p> <p></p> <p>\u5982\u56fe\u4e2d\u6240\u793a\uff0c\u73b0\u5728\u8f93\u5165\u5f62\u72b6\u4e3a2x3x3\uff0c\u5373\u6709\u4e24\u4e2a\u901a\u9053\uff0c\u5377\u79ef\u6838\u5f62\u72b6\u4e3a2x2x2\u3002 \u56fe\u4e2d\u52a0\u6df1\u90e8\u5206\u8ba1\u7b97\u8fc7\u7a0b\u4e3a\uff1a(1x1+2x2+4x3+5x4)+(0x0+1x1+3x2+4x3)=56</p> <p><pre><code>import torch\nfrom torch import nn\n\ndef corr2d(X, K):  #@save\n    \"\"\"\u8ba1\u7b97\u4e8c\u7ef4\u4e92\u76f8\u5173\u8fd0\u7b97\"\"\"\n    h, w = K.shape\n    Y = torch.zeros((X.shape[0] - h + 1, X.shape[1] - w + 1))\n    for i in range(Y.shape[0]):\n        for j in range(Y.shape[1]):\n            Y[i, j] = (X[i:i + h, j:j + w] * K).sum()\n    return Y\n\nimport torch\n\ndef corr2d_multi_in(X, K):\n    # \u5148\u904d\u5386\u201cX\u201d\u548c\u201cK\u201d\u7684\u7b2c0\u4e2a\u7ef4\u5ea6\uff08\u901a\u9053\u7ef4\u5ea6\uff09\uff0c\u518d\u628a\u5b83\u4eec\u52a0\u5728\u4e00\u8d77\n    return sum(corr2d(x, k) for x, k in zip(X, K))\n</code></pre> \u6784\u9020\u4e0e\u56fe\u4e2d\u76f8\u540c\u8f93\u5165\u4e0e\u5377\u79ef\u6838 <pre><code>X = torch.tensor([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]],\n               [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]])\nK = torch.tensor([[[0.0, 1.0], [2.0, 3.0]], [[1.0, 2.0], [3.0, 4.0]]])\n\ncorr2d_multi_in(X, K)\n</code></pre> \u8f93\u51fa\uff1a <pre><code>tensor([[ 56.,  72.],\n        [104., 120.]])\n</code></pre></p>"},{"location":"lab3/%E5%9B%BE%E5%83%8F%E5%8D%B7%E7%A7%AF/#_8","title":"\u591a\u8f93\u51fa\u901a\u9053","text":"<p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4e0d\u8bba\u6709\u591a\u5c11\u8f93\u5165\u901a\u9053\uff0c\u6211\u4eec\u8fd8\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\u901a\u9053\u3002\u5728\u6700\u6d41\u884c\u7684\u795e\u7ecf\u7f51\u7edc\u67b6\u6784\u4e2d \uff0c\u968f\u7740\u795e\u7ecf\u7f51\u7edc\u5c42\u6570\u7684\u52a0\u6df1\uff0c \u6211\u4eec\u5e38\u4f1a\u589e\u52a0\u8f93\u51fa\u901a\u9053\u7684\u7ef4\u6570\uff0c \u901a\u8fc7\u51cf\u5c11\u7a7a\u95f4\u5206\u8fa8\u7387\u4ee5\u83b7\u5f97\u66f4\u5927\u7684\u901a\u9053\u6df1\u5ea6\u3002</p> <p></p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u8f93\u5165\u5f62\u72b6\u4e3a3x3x3\uff0c\u5377\u79ef\u6838\u4e3a3x1x1x2\uff0c \u5377\u79ef\u6838\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u8868\u793a3\u4e2a\u8f93\u5165\u901a\u9053,(\u6ce8\u610f\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u5404\u4e2a\u7ef4\u5ea6\u4ee3\u8868\u7684\u542b\u4e49\u6839\u636e\u4f8b\u5b50 \u6765\u51b3\u5b9a)\uff0c \u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u8868\u793a2\u4e2a\u8f93\u51fa\u901a\u9053\uff0c\u8f93\u51fa\u5f62\u72b6\u4e3a2x3x3</p> <p>\u5982\u4e0b\u6240\u793a\uff0c\u6211\u4eec\u5b9e\u73b0\u4e00\u4e2a\u8ba1\u7b97\u591a\u4e2a\u901a\u9053\u7684\u8f93\u51fa\u7684\u4e92\u76f8\u5173\u51fd\u6570\u3002 <pre><code>def corr2d_multi_in_out(X, K):\n    # \u8fed\u4ee3\u201cK\u201d\u7684\u7b2c0\u4e2a\u7ef4\u5ea6\uff0c\u6bcf\u6b21\u90fd\u5bf9\u8f93\u5165\u201cX\u201d\u6267\u884c\u4e92\u76f8\u5173\u8fd0\u7b97\u3002\n    # \u6700\u540e\u5c06\u6240\u6709\u7ed3\u679c\u90fd\u53e0\u52a0\u5728\u4e00\u8d77\n    return torch.stack([corr2d_multi_in(X, k) for k in K], 0)\n\nK = torch.stack((K, K + 1, K + 2), 0)\nK.shape \n</code></pre> \u7ed3\u679c\u5982\u4e0b\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u7684\u8f93\u51fa\u901a\u9053\u653e\u5728\u7b2c0\u7ef4\uff1a <pre><code>torch.Size([3, 2, 2, 2])\n</code></pre></p> <p>\u4e0b\u9762\uff0c\u6211\u4eec\u5bf9\u8f93\u5165\u5f20\u91cfX\u4e0e\u5377\u79ef\u6838\u5f20\u91cfK\u6267\u884c\u4e92\u76f8\u5173\u8fd0\u7b97\u3002\u73b0\u5728\u7684\u8f93\u51fa\u5305\u542b3 \u4e2a\u901a\u9053\uff0c <pre><code>X = torch.tensor([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]],\n               [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]])\ncorr2d_multi_in_out(X, K)\n</code></pre> <pre><code>tensor([[[ 56.,  72.],\n         [104., 120.]],\n\n        [[ 76., 100.],\n         [148., 172.]],\n\n        [[ 96., 128.],\n         [192., 224.]]])\n</code></pre></p>"},{"location":"lab3/%E5%9B%BE%E5%83%8F%E5%8D%B7%E7%A7%AF/#_9","title":"\u6c47\u805a\u5c42","text":"<p>\u901a\u5e38\u5f53\u6211\u4eec\u5904\u7406\u56fe\u50cf\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u9010\u6e10\u964d\u4f4e\u9690\u85cf\u8868\u793a\u7684\u7a7a\u95f4\u5206\u8fa8\u7387\u3001\u805a\u96c6\u4fe1\u606f\uff0c \u8fd9\u6837\u968f\u7740\u6211\u4eec\u5728\u795e\u7ecf\u7f51\u7edc\u4e2d\u5c42\u53e0\u7684\u4e0a\u5347\uff0c\u6bcf\u4e2a\u795e\u7ecf\u5143\u5bf9\u5176\u654f\u611f\u7684\u611f\u53d7\u91ce\uff08\u8f93\u5165\uff09\u5c31\u8d8a\u5927\u3002</p> <p>\u672c\u8282\u5c06\u4ecb\u7ecd\u6c47\u805a\uff08pooling\uff09\u5c42\uff0c\u5b83\u5177\u6709\u53cc\u91cd\u76ee\u7684\uff1a \u964d\u4f4e\u5377\u79ef\u5c42\u5bf9\u4f4d\u7f6e\u7684\u654f\u611f\u6027\uff0c\u540c\u65f6\u964d\u4f4e\u5bf9\u7a7a\u95f4\u964d\u91c7\u6837\u8868\u793a\u7684\u654f\u611f\u6027\u3002</p>"},{"location":"lab3/%E5%9B%BE%E5%83%8F%E5%8D%B7%E7%A7%AF/#_10","title":"\u6700\u5927\u6c47\u805a\u5c42\u548c\u5e73\u5747\u6c47\u805a\u5c42","text":"<p>\u4e0e\u5377\u79ef\u5c42\u7c7b\u4f3c\uff0c\u6c47\u805a\u5c42\u8fd0\u7b97\u7b26\u7531\u4e00\u4e2a\u56fa\u5b9a\u5f62\u72b6\u7684\u7a97\u53e3\u7ec4\u6210\uff0c\u8be5\u7a97\u53e3\u6839\u636e\u5176\u6b65\u5e45\u5927\u5c0f\u5728\u8f93\u5165\u7684 \u6240\u6709\u533a\u57df\u4e0a\u6ed1\u52a8\uff0c\u4e3a\u56fa\u5b9a\u5f62\u72b6\u7a97\u53e3\uff08\u6709\u65f6\u79f0\u4e3a\u6c47\u805a\u7a97\u53e3\uff09\u904d\u5386\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u8ba1\u7b97\u4e00\u4e2a\u8f93\u51fa\u3002  \u7136\u800c\uff0c\u4e0d\u540c\u4e8e\u5377\u79ef\u5c42\u4e2d\u7684\u8f93\u5165\u4e0e\u5377\u79ef\u6838\u4e4b\u95f4\u7684\u4e92\u76f8\u5173\u8ba1\u7b97\uff0c\u6c47\u805a\u5c42\u4e0d\u5305\u542b\u53c2\u6570\u3002 \u76f8\u53cd\uff0c\u6c60\u8fd0\u7b97\u662f\u786e\u5b9a\u6027\u7684\uff0c\u6211\u4eec\u901a\u5e38\u8ba1\u7b97\u6c47\u805a\u7a97\u53e3\u4e2d\u6240\u6709\u5143\u7d20\u7684\u6700\u5927\u503c\u6216\u5e73\u5747\u503c\u3002 \u8fd9\u4e9b\u64cd\u4f5c\u5206\u522b\u79f0\u4e3a\u6700\u5927\u6c47\u805a\u5c42\uff08maximum pooling\uff09\u548c\u5e73\u5747\u6c47\u805a\u5c42\uff08average pooling\uff09\u3002</p> <p>\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e0e\u4e92\u76f8\u5173\u8fd0\u7b97\u7b26\u4e00\u6837\uff0c \u6c47\u805a\u7a97\u53e3\u4ece\u8f93\u5165\u5f20\u91cf\u7684\u5de6\u4e0a\u89d2\u5f00\u59cb\uff0c\u4ece\u5de6\u5f80\u53f3\u3001\u4ece\u4e0a\u5f80\u4e0b\u7684\u5728\u8f93\u5165\u5f20\u91cf\u5185\u6ed1\u52a8\u3002 \u5728\u6c47\u805a\u7a97\u53e3\u5230\u8fbe\u7684\u6bcf\u4e2a\u4f4d\u7f6e\uff0c\u5b83\u8ba1\u7b97\u8be5\u7a97\u53e3\u4e2d\u8f93\u5165\u5b50\u5f20\u91cf\u7684\u6700\u5927\u503c\u6216\u5e73\u5747\u503c\u3002 \u8ba1\u7b97\u6700\u5927\u503c\u6216\u5e73\u5747\u503c\u662f\u53d6\u51b3\u4e8e\u4f7f\u7528\u4e86\u6700\u5927\u6c47\u805a\u5c42\u8fd8\u662f\u5e73\u5747\u6c47\u805a\u5c42\u3002</p> <p></p> <p>\u56fe\u4e2d\u7684\u8f93\u51fa\u5f20\u91cf\u7684\u9ad8\u5ea6\u4e3a2\uff0c\u5bbd\u5ea6\u4e3a2 \u3002\u8fd9\u56db\u4e2a\u5143\u7d20\u4e3a\u6bcf\u4e2a\u6c47\u805a\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\uff1a</p> <p></p> <p>\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u7684pool2d\u51fd\u6570\uff0c\u6211\u4eec\u5b9e\u73b0\u6c47\u805a\u5c42\u7684\u524d\u5411\u4f20\u64ad\u3002 \u7136\u800c\uff0c\u8fd9\u91cc\u6211\u4eec\u6ca1\u6709\u5377\u79ef\u6838\uff0c\u8f93\u51fa\u4e3a\u8f93\u5165\u4e2d\u6bcf\u4e2a\u533a\u57df\u7684\u6700\u5927\u503c\u6216\u5e73\u5747\u503c\u3002</p> <p><pre><code>import torch\nfrom torch import nn\n\ndef pool2d(X, pool_size, mode='max'):\n    p_h, p_w = pool_size\n    Y = torch.zeros((X.shape[0] - p_h + 1, X.shape[1] - p_w + 1))\n    for i in range(Y.shape[0]):\n        for j in range(Y.shape[1]):\n            if mode == 'max':\n                Y[i, j] = X[i: i + p_h, j: j + p_w].max()\n            elif mode == 'avg':\n                Y[i, j] = X[i: i + p_h, j: j + p_w].mean()\n    return Y\n</code></pre> \u6784\u9020\u8f93\u5165\uff1a <pre><code>X = torch.tensor([[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]])\npool2d(X, (2, 2))\n</code></pre> \u8f93\u51fa\u4e3a\uff1a <pre><code>tensor([[4., 5.],\n        [7., 8.]])\n</code></pre> \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u9a8c\u8bc1\u5e73\u5747\u6c47\u805a\u5c42\u3002 <pre><code>pool2d(X, (2, 2), 'avg')\n</code></pre> <pre><code>tensor([[2., 3.],\n        [5., 6.]])\n</code></pre></p>"},{"location":"lab3/%E5%9B%BE%E5%83%8F%E5%8D%B7%E7%A7%AF/#_11","title":"\u6c47\u805a\u5c42\u586b\u5145\u4e0e\u6b65\u5e45","text":"<p>\u4e0e\u5377\u79ef\u5c42\u4e00\u6837\uff0c\u6c47\u805a\u5c42\u4e5f\u53ef\u4ee5\u6539\u53d8\u8f93\u51fa\u5f62\u72b6\u3002\u548c\u4ee5\u524d\u4e00\u6837\uff0c \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u586b\u5145\u548c\u6b65\u5e45\u4ee5\u83b7\u5f97\u6240\u9700\u7684\u8f93\u51fa\u5f62\u72b6\u3002  \u4e0b\u9762\uff0c\u6211\u4eec\u7528\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2d\u5185\u7f6e\u7684\u4e8c\u7ef4\u6700\u5927\u6c47\u805a\u5c42\uff0c \u6765\u6f14\u793a\u6c47\u805a\u5c42\u4e2d\u586b\u5145\u548c\u6b65\u5e45\u7684\u4f7f\u7528\u3002  \u6211\u4eec\u9996\u5148\u6784\u9020\u4e86\u4e00\u4e2a\u8f93\u5165\u5f20\u91cfX\uff0c\u5b83\u6709\u56db\u4e2a\u7ef4\u5ea6\uff0c\u5176\u4e2d\u6837\u672c\u6570\u548c\u901a\u9053\u6570\u90fd\u662f1\u3002 <pre><code>X = torch.arange(16, dtype=torch.float32).reshape((1, 1, 4, 4))\nX\n</code></pre> <pre><code>tensor([[[[ 0.,  1.,  2.,  3.],\n          [ 4.,  5.,  6.,  7.],\n          [ 8.,  9., 10., 11.],\n          [12., 13., 14., 15.]]]])\n</code></pre> \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2d\u7684\u6b65\u5e45\u4e0e\u6c47\u805a\u7a97\u53e3\u7684\u5927\u5c0f\u76f8\u540c\u3002  \u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u5f62\u72b6\u4e3a(3, 3)\u7684\u6c47\u805a\u7a97\u53e3\uff0c \u90a3\u4e48\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5f97\u5230\u7684\u6b65\u5e45\u5f62\u72b6\u4e3a(3, 3)\u3002 <pre><code>pool2d = nn.MaxPool2d(3)\npool2d(X)\n</code></pre> <pre><code>tensor([[[[10.]]]])\n</code></pre></p>"},{"location":"lab3/%E5%9B%BE%E5%83%8F%E5%8D%B7%E7%A7%AF/#_12","title":"\u591a\u4e2a\u901a\u9053","text":"<p>\u5728\u5904\u7406\u591a\u901a\u9053\u8f93\u5165\u6570\u636e\u65f6\uff0c\u6c47\u805a\u5c42\u5728\u6bcf\u4e2a\u8f93\u5165\u901a\u9053\u4e0a\u5355\u72ec\u8fd0\u7b97\uff0c \u800c\u4e0d\u662f\u50cf\u5377\u79ef\u5c42\u4e00\u6837\u5728\u901a\u9053\u4e0a\u5bf9\u8f93\u5165\u8fdb\u884c\u6c47\u603b\u3002 \u8fd9\u610f\u5473\u7740\u6c47\u805a\u5c42\u7684\u8f93\u51fa\u901a\u9053\u6570\u4e0e\u8f93\u5165\u901a\u9053\u6570\u76f8\u540c\u3002  \u4e0b\u9762\uff0c\u6211\u4eec\u5c06\u5728\u901a\u9053\u7ef4\u5ea6\u4e0a\u8fde\u7ed3\u5f20\u91cfX\u548cX + 1\uff0c\u4ee5\u6784\u5efa\u5177\u67092\u4e2a\u901a\u9053\u7684\u8f93\u5165\u3002</p> <p><pre><code>X = torch.cat((X, X + 1), 1)\nX\n</code></pre> <pre><code>tensor([[[[ 0.,  1.,  2.,  3.],\n          [ 4.,  5.,  6.,  7.],\n          [ 8.,  9., 10., 11.],\n          [12., 13., 14., 15.]],\n\n         [[ 1.,  2.,  3.,  4.],\n          [ 5.,  6.,  7.,  8.],\n          [ 9., 10., 11., 12.],\n          [13., 14., 15., 16.]]]])\n</code></pre> \u5982\u4e0b\u6240\u793a\uff0c\u6c47\u805a\u540e\u8f93\u51fa\u901a\u9053\u7684\u6570\u91cf\u4ecd\u7136\u662f2\u3002 <pre><code>pool2d = nn.MaxPool2d(3, padding=1, stride=2)\npool2d(X)\n</code></pre> <pre><code>tensor([[[[ 5.,  7.],\n          [13., 15.]],\n\n         [[ 6.,  8.],\n          [14., 16.]]]])\n</code></pre></p>"},{"location":"lab3/%E5%9B%BE%E5%83%8F%E5%8D%B7%E7%A7%AF/#_13","title":"\u7ec3\u4e60  \u56fe\u50cf\u4e2d\u76ee\u6807\u7684\u8fb9\u7f18\u68c0\u6d4b","text":"<p>\u5982\u4e0b\u662f\u5377\u79ef\u5c42\u7684\u4e00\u4e2a\u7b80\u5355\u5e94\u7528\uff1a\u901a\u8fc7\u627e\u5230\u50cf\u7d20\u53d8\u5316\u7684\u4f4d\u7f6e\uff0c\u6765\u68c0\u6d4b\u56fe\u50cf\u4e2d\u4e0d\u540c\u989c\u8272\u7684\u8fb9\u7f18\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6784\u9020\u4e00\u4e2a 6x8\u50cf\u7d20\u7684\u9ed1\u767d\u56fe\u50cf\u3002\u4e2d\u95f4\u56db\u5217\u4e3a\u9ed1\u8272\uff080\uff09\uff0c\u5176\u4f59\u50cf\u7d20\u4e3a\u767d\u8272\uff081\uff09\u3002</p> <p><pre><code>import torch\nfrom torch import nn\nX = torch.ones((6, 8))\nX[:, 2:6] = 0\nX\n</code></pre> <pre><code>tensor([[1., 1., 0., 0., 0., 0., 1., 1.],\n        [1., 1., 0., 0., 0., 0., 1., 1.],\n        [1., 1., 0., 0., 0., 0., 1., 1.],\n        [1., 1., 0., 0., 0., 0., 1., 1.],\n        [1., 1., 0., 0., 0., 0., 1., 1.],\n        [1., 1., 0., 0., 0., 0., 1., 1.]])\n</code></pre> \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6784\u9020\u4e00\u4e2a\u9ad8\u5ea6\u4e3a1\u3001\u5bbd\u5ea6\u4e3a2\u7684\u5377\u79ef\u6838K\u3002\u5f53\u8fdb\u884c\u4e92\u76f8\u5173\u8fd0\u7b97\u65f6\uff0c \u5982\u679c\u6c34\u5e73\u76f8\u90bb\u7684\u4e24\u5143\u7d20\u76f8\u540c\uff0c\u5219\u8f93\u51fa\u4e3a\u96f6\uff0c\u5426\u5219\u8f93\u51fa\u4e3a\u975e\u96f6\u3002 <pre><code>K = torch.tensor([[1.0, -1.0]])\n</code></pre> <pre><code>def corr2d(X, K):  #@save\n    \"\"\"\u8ba1\u7b97\u4e8c\u7ef4\u4e92\u76f8\u5173\u8fd0\u7b97\"\"\"\n    h, w = K.shape\n    Y = torch.zeros((X.shape[0] - h + 1, X.shape[1] - w + 1))\n    for i in range(Y.shape[0]):\n        for j in range(Y.shape[1]):\n            Y[i, j] = (X[i:i + h, j:j + w] * K).sum()\n    return Y\nY = corr2d(X, K)\nY\n</code></pre> \u8f93\u51fa\u4e3a\uff1a <pre><code>tensor([[ 0.,  1.,  0.,  0.,  0., -1.,  0.],\n        [ 0.,  1.,  0.,  0.,  0., -1.,  0.],\n        [ 0.,  1.,  0.,  0.,  0., -1.,  0.],\n        [ 0.,  1.,  0.,  0.,  0., -1.,  0.],\n        [ 0.,  1.,  0.,  0.,  0., -1.,  0.],\n        [ 0.,  1.,  0.,  0.,  0., -1.,  0.]])\n</code></pre> \u73b0\u5728\u6211\u4eec\u5c06\u8f93\u5165\u7684\u4e8c\u7ef4\u56fe\u50cf\u8f6c\u7f6e\uff0c\u518d\u8fdb\u884c\u5982\u4e0a\u7684\u4e92\u76f8\u5173\u8fd0\u7b97\u3002 \u5176\u8f93\u51fa\u5982\u4e0b\uff0c\u4e4b\u524d\u68c0\u6d4b\u5230\u7684\u5782\u76f4\u8fb9\u7f18\u6d88\u5931\u4e86\u3002 \u4e0d\u51fa\u6240\u6599\uff0c\u8fd9\u4e2a\u5377\u79ef\u6838K\u53ea\u53ef\u4ee5\u68c0\u6d4b\u5782\u76f4\u8fb9\u7f18\uff0c\u65e0\u6cd5\u68c0\u6d4b\u6c34\u5e73\u8fb9\u7f18\u3002 <pre><code>corr2d(X.t(), K)\n</code></pre> \u8f93\u51fa\uff1a <pre><code>tensor([[0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.]])\n````\n1.\u8bf7\u4f7f\u7528Conv2D\u7c7b,\u8865\u5168\u8bad\u7ec3\u90e8\u5206\u4ee3\u7801\uff0c\n\u4f7f\u5f97\u8bad\u7ec3\u5f97\u5230\u7684\u5377\u79ef\u6838\u53c2\u6570\u63a5\u8fd1torch.tensor([[1.0, -1.0]])\n```bash\nclass Conv2D(nn.Module):\n    def __init__(self, kernel_size):\n        super().__init__()\n        self.weight = nn.Parameter(torch.rand(kernel_size))\n        self.bias = nn.Parameter(torch.zeros(1))\n\n    def forward(self, x):\n        return corr2d(x, self.weight) + self.bias\n</code></pre> <pre><code># \u6784\u9020\u4e00\u4e2a\u4e8c\u7ef4\u5377\u79ef\u5c42\uff0c\u5b83\u5177\u67091\u4e2a\u8f93\u51fa\u901a\u9053\u548c\u5f62\u72b6\u4e3a\uff081\uff0c2\uff09\u7684\u5377\u79ef\u6838\nconv2d = nn.Conv2d(1,1, kernel_size=(1, 2), bias=False)\n\n# \u8fd9\u4e2a\u4e8c\u7ef4\u5377\u79ef\u5c42\u4f7f\u7528\u56db\u7ef4\u8f93\u5165\u548c\u8f93\u51fa\u683c\u5f0f\uff08\u6279\u91cf\u5927\u5c0f\u3001\u901a\u9053\u3001\u9ad8\u5ea6\u3001\u5bbd\u5ea6\uff09\uff0c\n# \u5176\u4e2d\u6279\u91cf\u5927\u5c0f\u548c\u901a\u9053\u6570\u90fd\u4e3a1\nX = X.reshape((1, 1, 6, 8))#\nY = Y.reshape((1, 1, 6, 7))#\u6807\u7b7e\n\n#\u8bad\u7ec3\u8865\u5168\u90e8\u5206(\u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570\uff0c\u8bad\u7ec3epoch\uff0c\u5b66\u4e60\u7387\u7b49)\n#TODO\uff1afor\u5faa\u73afepoch\u6b21\n#TODO\uff1a\u524d\u5411\u4f20\u64ad\n#TODO\uff1a\u8ba1\u7b97\u635f\u5931\n#TODO: \u6e05\u9664\u68af\u5ea6\n#TODO: \u53cd\u5411\u4f20\u64ad\n#TODO: \u66f4\u65b0\u53c2\u6570\n</code></pre> <pre><code>conv2d.weight.data.reshape((1, 2))\n#\u8981\u6c42\u6b64\u8f93\u51fa\u63a5\u8fd1torch.tensor([[1.0, -1.0]])\uff0c\n# \u5982tensor([[ 0.9997, -0.9810]])\n</code></pre></p>"},{"location":"lab3/%E5%AE%9E%E9%AA%8C%E4%B8%89%E4%BB%8B%E7%BB%8D/","title":"\u5b9e\u9a8c\u4e09 CNN\u7f51\u7edc\u5b9e\u73b0","text":""},{"location":"lab3/%E5%AE%9E%E9%AA%8C%E4%B8%89%E4%BB%8B%E7%BB%8D/#_1","title":"\u5f00\u59cb\u4e4b\u524d","text":"<p>\u6211\u4eec\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\u4f7f\u7528jupyter Notebook\u8fdb\u884c\u5b9e\u9a8c\uff0c \u8bf7\u53c2\u8003Jupyter Notebook\u4f7f\u7528\uff0c \u6309\u7167\u6587\u6863\u4e2d\u8be6\u7ec6\u6b65\u9aa4\u8fdb\u884c\u64cd\u4f5c\uff0c\u5b8c\u6210Jupyter Notebook\u7684\u914d\u7f6e\u3002</p>"},{"location":"lab3/%E5%AE%9E%E9%AA%8C%E4%B8%89%E4%BB%8B%E7%BB%8D/#_2","title":"\u5b9e\u9a8c\u4efb\u52a1","text":"<p>\u672c\u6b21\u5b9e\u9a8c\u5305\u62ec\u4e24\u4e2a\u4efb\u52a1\uff1a 1. \u9605\u8bfb\u5b9e\u9a8c\u4efb\u52a1\u4e00\u56fe\u50cf\u5377\u79ef\u4e2d\u7684\u5185\u5bb9\uff0c\u5b8c\u6210\u56fe\u50cf\u4e2d\u76ee\u6807\u7684\u8fb9\u7f18\u68c0\u6d4b\u7ec3\u4e60(\u7ea660\u5206\u949f) 2. \u5b8c\u6210\u5b9e\u9a8c\u4efb\u52a1\u4e8c\uff0c\u4f7f\u7528CNN\u8fdb\u884c\u56fe\u50cf\u5206\u7c7b(\u7ea690\u5206\u949f)</p>"},{"location":"lab3/%E5%AE%9E%E9%AA%8C%E4%B8%89%E4%BB%8B%E7%BB%8D/#_3","title":"\u4efb\u52a1\u4e00\uff1a\u56fe\u50cf\u5377\u79ef","text":"<p>\u4e0b\u8f7d\u4efb\u52a1\u4e00\u4ee3\u7801</p> <p>\u5728\u8fd9\u4e2a\u4efb\u52a1\u4e2d\uff0c\u4f60\u5c06\uff1a</p> <ol> <li>\u9605\u8bfb\u5e76\u5b66\u4e60\u4e92\u76f8\u5173\u8fd0\u7b97\uff0c\u586b\u5145\u548c\u6b65\u5e45\uff0c\u591a\u8f93\u5165\u8f93\u51fa\u901a\u9053\u7b49\u77e5\u8bc6</li> <li>\u5b66\u4e60\u6709\u5173\u6c47\u805a\u5c42\u7684\u77e5\u8bc6</li> <li>\u5b8c\u6210\u56fe\u50cf\u50cf\u4e2d\u76ee\u6807\u8fb9\u7f18\u68c0\u6d4b\u7ec3\u4e60</li> </ol> <p>\u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a</p> <ul> <li>\u4e92\u76f8\u5173\u8fd0\u7b97</li> <li>\u586b\u5145\u548c\u6b65\u5e45</li> <li>\u591a\u8f93\u5165\u548c\u8f93\u51fa\u901a\u9053</li> <li>\u6c47\u805a\u5c42</li> <li>\u76ee\u6807\u8fb9\u7f18\u68c0\u6d4b</li> </ul>"},{"location":"lab3/%E5%AE%9E%E9%AA%8C%E4%B8%89%E4%BB%8B%E7%BB%8D/#cnn_1","title":"\u4efb\u52a1\u4e8c\uff1aCNN\u56fe\u50cf\u5206\u7c7b","text":"<p>\u4e0b\u8f7d\u4efb\u52a1\u4e8c\u4ee3\u7801</p> <p>\u5728\u8fd9\u4e2a\u4efb\u52a1\u4e2d\uff0c\u4f60\u5c06\u5b9e\u73b0\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7684\u57fa\u672c\u67b6\u6784\uff0c\u5e76\u5b8c\u6210\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1</p> <p>\u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a</p> <ol> <li>\u5229\u7528\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u5b9e\u73b0\u56fe\u50cf\u5206\u7c7b<ul> <li>\u4e86\u89e3 CIFAR-10 \u6570\u636e\u96c6</li> <li>\u5b9e\u73b0\u5377\u79ef\u7f51\u7edc\u642d\u5efa</li> <li>\u5b8c\u6210\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3</li> </ul> </li> <li>\u5c1d\u8bd5\u5728MNIST\u6570\u636e\u96c6\u4e0a\u4f7f\u7528CNN\u7f51\u7edc\u5b9e\u73b0\u5206\u7c7b</li> <li>\u5b9e\u73b0\u5377\u79ef\u795e\u7ecf\u7f51\u7edcLeNet</li> <li>\u4e86\u89e3\u6279\u91cf\u89c4\u8303\u5316\u5e76\u5e94\u7528</li> </ol> <p>\u901a\u8fc7\u672c\u4efb\u52a1\uff0c\u4f60\u5c06\u6df1\u5165\u4e86\u89e3\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u67b6\u6784\uff0c\u5b8c\u6210\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1</p>"},{"location":"lab3/%E5%AE%9E%E9%AA%8C%E4%B8%89%E4%BB%8B%E7%BB%8D/#_4","title":"\u5b9e\u9a8c\u63d0\u4ea4","text":"<p>\u5b9e\u9a8c\u5b8c\u6210\u540e\uff0c\u8bf7\u63d0\u4ea4\u4ee5\u4e0b\u6750\u6599\uff1a</p> <ol> <li>\u8fd0\u884c\u6210\u529f\u7684Jupyter Notebook\u6587\u4ef6</li> <li>\u4e00\u4efdPDF\u62a5\u544a\uff0c\u62a5\u544a\u5185\u5bb9\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a<ol> <li>\u4efb\u52a1\u4e2d\u7684\u586b\u5145\u4ee3\u7801\u548c\u76f8\u5e94\u5b9e\u9a8c\u7ed3\u679c</li> <li>\u5b9e\u9a8c\u5fc3\u5f97\u4e0e\u4f53\u4f1a</li> </ol> </li> </ol>"},{"location":"lab3/%E5%AE%9E%E9%AA%8C%E4%B8%89%E4%BB%8B%E7%BB%8D/#_5","title":"\u63d0\u4ea4\u8bf4\u660e","text":"<ol> <li>\u672c\u6b21\u63d0\u4ea4\u7684\u5185\u5bb9\u4e3a: \u5b9e\u9a8c\u4e09\u8981\u6c42\u63d0\u4ea4\u7684\u5185\u5bb9\uff0c\u5177\u4f53\u8981\u6c42\u8bf7\u53c2\u89c1\u5b9e\u9a8c\u7f51\u7ad9\uff08https://zhiweinju.github.io/nju-dl-lab-2025spring/\uff09</li> <li>\u63d0\u4ea4\u7684\u62a5\u544a\u6587\u4ef6\u8bf7\u4ee5PDF\u6587\u4ef6\u683c\u5f0f\u4e0a\u4f20\u5230selearning\u7f51\u7ad9\uff0c\u4e0a\u4f20\u6587\u4ef6\u7684\u6587\u4ef6\u547d\u540d\u683c\u5f0f\u4e3a: \u5b66\u53f7_\u59d3\u540d_\u5b9e\u9a8c\u4e09.pdf\uff0c\u6bd4\u5982\uff1a123456789_\u5f20\u4e09_\u5b9e\u9a8c\u4e09.pdf</li> <li>\u5176\u4ed6\u63d0\u4ea4\u6587\u4ef6\uff08\u5982 \u8fd0\u884c\u6210\u529f\u7684Jupyter Notebook\u6587\u4ef6\uff09\uff0c\u8bf7\u52a0\u4e0a\u524d\u7f00: \u5b66\u53f7_\u59d3\u540d_lab3_\uff0c\u6bd4\u5982: 123456789_\u5f20\u4e09_lab3_CNN_main.ipynb</li> <li>\u672c\u6b21\u63d0\u4ea4\u7684\u622a\u6b62\u65f6\u95f4\u4e3a 3\u670814\u65e523:59:59</li> <li>\u5bf9\u4e8e\u8fdf\u4ea4\u7684\u5904\u7406: \u8fdf\u4ea4\u4e00\u5468\u4ee5\u5185\uff0c\u6298\u6263\u7cfb\u6570\u4e3a0.8\uff0c\u8fdf\u4ea4\u8d85\u8fc7\u4e00\u5468\uff0c\u6298\u6263\u7cfb\u6570\u4e3a0.6\uff0c\u8d85\u8fc7\u4e00\u4e2a\u6708\u505c\u6b62\u63a5\u6536\u63d0\u4ea4\uff0c\u5c1a\u672a\u63d0\u4ea4\u8005\u672c\u6b21\u4f5c\u4e1a\u8ba10\u5206</li> </ol>"},{"location":"lab4/RNN%E6%96%87%E6%9C%AC%E7%94%9F%E6%88%90%E6%B1%87%E6%80%BB/","title":"\u5b9e\u9a8c\u4efb\u52a1\u4e8c: RNN\u3001LSTM\u548cGRU\u6587\u672c\u751f\u6210\u4efb\u52a1","text":""},{"location":"lab4/RNN%E6%96%87%E6%9C%AC%E7%94%9F%E6%88%90%E6%B1%87%E6%80%BB/#1","title":"1. \u6587\u672c\u9884\u5904\u7406","text":"<p>\u6587\u672c\u9884\u5904\u7406\u7b80\u4ecb</p> <p>\u6587\u672c\u9884\u5904\u7406\u662f\u5728\u6df1\u5ea6\u5b66\u4e60\u548c\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff08NLP\uff09\u4efb\u52a1\u4e2d\uff0c\u5bf9\u539f\u59cb\u6587\u672c\u8fdb\u884c\u6e05\u7406\u3001\u8f6c\u6362\u548c\u683c\u5f0f\u5316\uff0c\u4f7f\u5176\u80fd\u591f\u88ab\u6a21\u578b\u7406\u89e3\u548c\u5904\u7406\u7684\u8fc7\u7a0b\u3002</p> <p>\u9884\u5904\u7406\u7684\u5fc5\u8981\u6027</p> <p>\u539f\u59cb\u6587\u672c\u53ef\u80fd\u5305\u542b\u566a\u58f0\uff0c\u4e14\u6587\u672c\u957f\u5ea6\u4e0d\u4e00\u81f4\uff0c\u5bfc\u81f4\u6279\u91cf\u8bad\u7ec3\u65f6\u9700\u8981\u586b\u5145</p> <p>AG News \u6570\u636e\u96c6\u7b80\u4ecb</p> <p>AG News \u6570\u636e\u96c6\u6765\u6e90\u4e8e AG's corpus of news articles\uff0c\u662f\u4e00\u4e2a\u5927\u578b\u7684\u65b0\u95fb\u6570\u636e\u96c6\uff0c\u7531 Antonio Gulli \u4ece\u591a\u4e2a\u65b0\u95fb\u7f51\u7ad9\u6536\u96c6\u6574\u7406\u3002 AG News \u6570\u636e\u96c6\u5305\u542b 4 \u7c7b\u65b0\u95fb\uff0c\u6bcf\u7c7b 30,000 \u6761\u8bad\u7ec3\u6570\u636e\uff0c\u5171 120,000 \u6761\u8bad\u7ec3\u6837\u672c \u548c 7,600 \u6761\u6d4b\u8bd5\u6837\u672c\u3002</p> <p>\u9996\u5148\u5bfc\u5165\u6240\u9700\u6a21\u5757\uff1a</p> <p>\u53ef\u80fd\u9700\u8981\u5148\u5b89\u88c5datasets\u5305</p> <pre><code>   pip install datasets\n</code></pre> <pre><code>import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom datasets import load_dataset, load_from_disk\nfrom collections import Counter\nfrom torch.nn.utils.rnn import pad_sequence\nimport torch.nn.functional as F\nfrom tqdm import tqdm\nimport os\n</code></pre> <p>\u6211\u4eec\u4eceAG News \u6570\u636e\u96c6\u4e2d\u52a0\u8f7d\u6587\u672c\u3002 \u8fd9\u662f\u4e00\u4e2a\u8f83\u5c0f\u7684\u8bed\u6599\u5e93\uff0c\u6709150000\u591a\u4e2a\u5355\u8bcd\uff0c\u4f46\u8db3\u591f\u6211\u4eec\u5c0f\u8bd5\u725b\u5200.</p> <pre><code>data_path = \"ag_news\u6587\u4ef6\u5939\u4fdd\u5b58\u8def\u5f84\"\ndataset = load_from_disk(data_path)\n\n# \u63d0\u53d6\u6240\u6709\u6587\u672c\u6570\u636e\ntrain_text = [item['text'] for item in dataset['train']]\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n</code></pre> <p>\u8bcd\u5143\u5316 \u4e0b\u9762\u7684tokenize\u51fd\u6570\u5c06\u6587\u672c\u884c\u5217\u8868\uff08lines\uff09\u4f5c\u4e3a\u8f93\u5165\uff0c \u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u6587\u672c\u5e8f\u5217\uff08\u5982\u4e00\u6761\u6587\u672c\u884c\uff09\u3002 \u6bcf\u4e2a\u6587\u672c\u5e8f\u5217\u53c8\u88ab\u62c6\u5206\u6210\u4e00\u4e2a\u8bcd\u5143\u5217\u8868\uff0c\u8bcd\u5143\uff08token\uff09\u662f\u6587\u672c\u7684\u57fa\u672c\u5355\u4f4d\u3002 \u6700\u540e\uff0c\u8fd4\u56de\u4e00\u4e2a\u7531\u8bcd\u5143\u5217\u8868\u7ec4\u6210\u7684\u5217\u8868\uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u8bcd\u5143\u90fd\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08string\uff09\u3002</p> <pre><code># \u4f7f\u7528 split \u8fdb\u884c\u5206\u8bcd\ndef tokenize(text):\n    return text.lower().split()\n\n# \u751f\u6210\u8bcd\u6c47\u8868\ncounter = Counter()\nfor text in train_text:\n    counter.update(tokenize(text))\n</code></pre> <p>\u8bcd\u5143\u7684\u7c7b\u578b\u662f\u5b57\u7b26\u4e32\uff0c\u800c\u6a21\u578b\u9700\u8981\u7684\u8f93\u5165\u662f\u6570\u5b57\uff0c\u56e0\u6b64\u8fd9\u79cd\u7c7b\u578b\u4e0d\u65b9\u4fbf\u6a21\u578b\u4f7f\u7528\u3002 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u5b57\u5178\uff0c\u901a\u5e38\u4e5f\u53eb\u505a\u8bcd\u8868\uff08vocabulary\uff09\uff0c \u7528\u6765\u5c06\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u8bcd\u5143\u6620\u5c04\u5230\u4ece0\u5f00\u59cb\u7684\u6570\u5b57\u7d22\u5f15\u4e2d\u3002 \u9996\u5148\uff0c\u5b9a\u4e49\u7279\u6b8a\u6807\u8bb0\uff08\u5982  \u4ee3\u8868\u672a\u77e5\u8bcd\uff0c \u7528\u4e8e\u5e8f\u5217\u586b\u5145\uff0c\u8868\u793a\u5e8f\u5217\u5f00\u59cb\uff0c\u8868\u793a\u5e8f\u5217\u7ed3\u675f\uff09\u3002\u7136\u540e\uff0c\u4ece Counter \u7edf\u8ba1\u7684\u5355\u8bcd\u9891\u7387\u5217\u8868\u4e2d\u63d0\u53d6\u6240\u6709\u5355\u8bcd\uff0c\u5e76\u6309\u9891\u7387\u6392\u5e8f\uff0c\u5c06\u5176\u6dfb\u52a0\u5230\u8bcd\u6c47\u8868\u4e2d\u3002\u6700\u540e\uff0c\u4f7f\u7528 enumerate \u4e3a\u6bcf\u4e2a\u5355\u8bcd\u5206\u914d\u552f\u4e00\u7d22\u5f15\uff0c\u521b\u5efa\u4e00\u4e2a word-to-index \u6620\u5c04\uff0c\u65b9\u4fbf\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u6570\u503c\u5e8f\u5217\u4f9b\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u4f7f\u7528\u3002 <pre><code># \u751f\u6210\u8bcd\u6c47\u8868\uff0c\u5305\u542b\u7279\u6b8a token\nspecial_tokens = [\"&lt;unk&gt;\", \"&lt;pad&gt;\", \"&lt;bos&gt;\", \"&lt;eos&gt;\"]\nvocab = special_tokens + [word for word, _ in counter.most_common()]\nvocab_dict = {word: idx for idx, word in enumerate(vocab)}\n</code></pre> <p>\u6253\u5370\u8bcd\u6c47\u8868\u5927\u5c0f\uff0c\u524d10\u4e2a\u9ad8\u9891\u8bcd\u5143\u53ca\u5176\u7d22\u5f15\u3002</p> <pre><code>print(\"\u8bcd\u6c47\u8868\u5927\u5c0f:\", len(vocab_dict))\nprint(\"\u524d 10 \u4e2a\u6700\u5e38\u89c1\u7684\u5355\u8bcd\u53ca\u5176\u7d22\u5f15:\")\n#TODO:\u6253\u5370\u524d10\u4e2a\u9ad8\u9891\u8bcd\u5143\u53ca\u5176\u7d22\u5f15\n</code></pre> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98981\uff1a\u5728\u6587\u672c\u5904\u7406\u4e2d\uff0c\u4e3a\u4ec0\u4e48\u9700\u8981\u5bf9\u6587\u672c\u8fdb\u884c\u5206\u8bcd\uff08Tokenization\uff09\uff1f</p> <p>\u601d\u8003\u98982\uff1a\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u5355\u8bcd\u800c\u9700\u8981\u5c06\u5176\u8f6c\u6362\u4e3a\u7d22\u5f15\uff1f</p>"},{"location":"lab4/RNN%E6%96%87%E6%9C%AC%E7%94%9F%E6%88%90%E6%B1%87%E6%80%BB/#2-rnn","title":"2. RNN\u6587\u672c\u751f\u6210\u5b9e\u9a8c","text":"<p>RNN\u6587\u672c\u751f\u6210\u6982\u8ff0</p> <p>\u4f7f\u7528RNN\u8fdb\u884c\u6587\u672c\u751f\u6210\u4efb\u52a1\u7684\u6838\u5fc3\u601d\u60f3\u662f \u6839\u636e\u524d\u9762\u7684\u6587\u672c\u9884\u6d4b\u4e0b\u4e00\u4e2a\u5355\u8bcd\uff0c\u7136\u540e\u5c06\u9884\u6d4b\u51fa\u7684\u5355\u8bcd\u4f5c\u4e3a\u8f93\u5165\uff0c\u5faa\u73af\u8fed\u4ee3\u751f\u6210\u5b8c\u6574\u6587\u672c\u3002\u672c\u5b9e\u9a8c\u4ee5AG News \u6570\u636e\u4e3a\u4f8b\uff0c\u7ed9\u5b9a\u524d100\u4e2a\u5355\u8bcd\u4f5c\u4e3a\u8f93\u5165\uff0c\u9884\u6d4b\u4e0b\u4e00\u4e2a\u5355\u8bcd\uff0c\u5b9e\u73b0\u6587\u672c\u751f\u6210\u4efb\u52a1\u3002</p> <p>RNN\u7684\u5c40\u9650\u6027</p> <p>RNN\u7684\u5c40\u9650\u6027\u5728\u4e8e\u96be\u4ee5\u8bb0\u4f4f\u957f\u8ddd\u79bb\u4e0a\u4e0b\u6587\uff0c\u5bb9\u6613\u5bfc\u81f4\u751f\u6210\u5185\u5bb9\u7f3a\u4e4f\u8fde\u8d2f\u6027\uff0c\u4e14\u53ef\u80fd\u51fa\u73b0\u91cd\u590d\u6216\u6a21\u5f0f\u5316\u7684\u6587\u672c\u3002</p> <p></p>"},{"location":"lab4/RNN%E6%96%87%E6%9C%AC%E7%94%9F%E6%88%90%E6%B1%87%E6%80%BB/#_1","title":"\u524d\u7f6e\u4ee3\u7801","text":"<p>\u9996\u5148\u5bfc\u5165\u6240\u9700\u6a21\u5757\uff1a</p> <pre><code>import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom datasets import load_dataset, load_from_disk\nfrom collections import Counter\nfrom torch.nn.utils.rnn import pad_sequence\nimport torch.nn.functional as F\nfrom tqdm import tqdm\nimport os\n</code></pre> <p>\u8bfb\u53d6\u6570\u636e\u96c6</p> <pre><code>data_path = \"ag_news\u6587\u4ef6\u5939\u4fdd\u5b58\u8def\u5f84\"\ndataset = load_from_disk(data_path)\n\n# \u63d0\u53d6\u6240\u6709\u6587\u672c\u6570\u636e\ntrain_text = [item['text'] for item in dataset['train']]\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n</code></pre> <p>\u6587\u672c\u7684\u9884\u5904\u7406</p> <pre><code># \u4f7f\u7528 split \u8fdb\u884c\u5206\u8bcd\ndef tokenize(text):\n    return text.lower().split()\n\n# \u751f\u6210\u8bcd\u6c47\u8868\ncounter = Counter()\nfor text in train_text:\n    counter.update(tokenize(text))\n\n# \u751f\u6210\u8bcd\u6c47\u8868\uff0c\u5305\u542b\u7279\u6b8a token\nspecial_tokens = [\"&lt;unk&gt;\", \"&lt;pad&gt;\", \"&lt;bos&gt;\", \"&lt;eos&gt;\"]\nvocab = special_tokens + [word for word, _ in counter.most_common()]\nvocab_dict = {word: idx for idx, word in enumerate(vocab)}\n</code></pre>"},{"location":"lab4/RNN%E6%96%87%E6%9C%AC%E7%94%9F%E6%88%90%E6%B1%87%E6%80%BB/#_2","title":"\u8bad\u7ec3\u6570\u636e\u751f\u6210","text":"<p>\u5c06\u6587\u672c\u6570\u636e\u8f6c\u6362\u4e3a\u6570\u503c\u8868\u793a\uff0c\u5e76\u6309100\u4e2a\u5355\u8bcd\u4f5c\u4e3a\u8f93\u5165\u3001\u4e0b\u4e00\u4e2a\u5355\u8bcd\u4f5c\u4e3a\u76ee\u6807\u7684\u65b9\u5f0f\u6784\u9020\u8bad\u7ec3\u6570\u636e\u3002\u6700\u7ec8\u751f\u6210 X_train\uff08\u8f93\u5165\u5e8f\u5217\uff09\u548c Y_train\uff08\u9884\u6d4b\u76ee\u6807\uff09\uff0c\u7528\u4e8e RNN \u8bad\u7ec3\u6587\u672c\u751f\u6210\u6a21\u578b\u3002</p> <pre><code>def numericalize(text):\n    return torch.tensor([vocab_dict.get(word, vocab_dict[\"&lt;unk&gt;\"]) for word in tokenize(text)], dtype=torch.long)\n\n# \u751f\u6210\u8bad\u7ec3\u6570\u636e\uff08\u8f93\u5165 100 \u4e2a\u8bcd\uff0c\u9884\u6d4b\u4e0b\u4e00\u4e2a\u8bcd\uff09\ndef create_data(text_list, seq_len=100):\n    X, Y = [], []\n    for text in text_list:\n        token_ids = numericalize(text)\n        if len(token_ids) &lt;= seq_len:\n            continue  # \u5ffd\u7565\u8fc7\u77ed\u7684\u6587\u672c\n        for i in range(len(token_ids) - seq_len):\n            X.append(token_ids[i:i + seq_len])\n            Y.append(token_ids[i + seq_len])\n    return torch.stack(X), torch.tensor(Y)\n\n# \u751f\u6210\u8bad\u7ec3\u6570\u636e\nX_train, Y_train = create_data(train_text, seq_len=100)\n\n\n# \u521b\u5efa DataLoader\nbatch_size = 32\ntrain_data = torch.utils.data.TensorDataset(X_train, Y_train)\ntrain_loader = torch.utils.data.DataLoader(train_data, batch_size=batch_size, shuffle=True)\n</code></pre> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98983\uff1a\u5982\u679c\u4e0d\u6253\u4e71\u8bad\u7ec3\u96c6\uff0c\u4f1a\u5bf9\u751f\u6210\u4efb\u52a1\u6709\u4ec0\u4e48\u5f71\u54cd\uff1f</p>"},{"location":"lab4/RNN%E6%96%87%E6%9C%AC%E7%94%9F%E6%88%90%E6%B1%87%E6%80%BB/#rnn","title":"RNN \u6a21\u578b\u6784\u5efa","text":"<p>\u5b9e\u73b0\u4e86\u4e00\u4e2a\u57fa\u4e8e RNN \u7684\u6587\u672c\u751f\u6210\u6a21\u578b\uff0c\u901a\u8fc7\u8f93\u5165\u6587\u672c\u5e8f\u5217\u9884\u6d4b\u4e0b\u4e00\u4e2a\u5355\u8bcd\u3002</p> <pre><code>class RNNTextGenerator(nn.Module):\n    def __init__(self, vocab_size, embed_dim, hidden_dim, num_layers=2):\n        super(RNNTextGenerator, self).__init__()\n        self.embedding = nn.Embedding(vocab_size, embed_dim)#\u5c06\u8f93\u5165\u7684\u5355\u8bcd\u7d22\u5f15\u8f6c\u6362\u4e3a embed_dim \u7ef4\u7684\u5411\u91cf\u3002\n        self.rnn = nn.RNN(embed_dim, hidden_dim, num_layers=num_layers, batch_first=True)#\u6784\u5efa\u4e00\u4e2a RNN \u5c42\uff0c\u7528\u4e8e\u5904\u7406\u5e8f\u5217\u6570\u636e\u3002\n        self.fc = nn.Linear(hidden_dim, vocab_size)#\u5c06 RNN \u9690\u85cf\u72b6\u6001 \u6620\u5c04\u5230 \u8bcd\u6c47\u8868\u5927\u5c0f\u7684\u5411\u91cf\uff0c\u7528\u4e8e\u9884\u6d4b\u4e0b\u4e00\u4e2a\u5355\u8bcd\u7684\u6982\u7387\u5206\u5e03\u3002\n\n    def forward(self, x, hidden=None):\n        #\u8f93\u5165 x \u5f62\u72b6\uff1a(batch_size, seq_len)\n        #\u8f93\u51fa embedded \u5f62\u72b6\uff1a(batch_size, seq_len, embed_dim)\n        embedded = self.embedding(x)\n        #\u8f93\u5165 embedded \u5f62\u72b6\uff1a(batch_size, seq_len, embed_dim)\n        #\u8f93\u51fa output \u5f62\u72b6\uff1a(batch_size, seq_len, hidden_dim)\uff08\u6240\u6709\u65f6\u95f4\u6b65\u7684\u9690\u85cf\u72b6\u6001\uff09\n        #\u8f93\u51fa hidden \u5f62\u72b6\uff1a(num_layers, batch_size, hidden_dim)\uff08\u6700\u540e\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u9690\u85cf\u72b6\u6001\uff09\n        output, hidden = self.rnn(embedded, hidden) \n        #\u53ea\u53d6 \u6700\u540e\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u9690\u85cf\u72b6\u6001 output[:, -1, :] \u4f5c\u4e3a\u8f93\u5165\n        #\u901a\u8fc7\u5168\u8fde\u63a5\u5c42 self.fc \u5c06\u9690\u85cf\u72b6\u6001\u8f6c\u6362\u4e3a\u8bcd\u6c47\u8868\u5927\u5c0f\u7684\u5206\u5e03\uff08\u7528\u4e8e\u9884\u6d4b\u4e0b\u4e00\u4e2a\u5355\u8bcd\uff09\n        #\u6700\u7ec8 output \u5f62\u72b6\uff1a(batch_size, vocab_size)\n        output = self.fc(output[:, -1, :])\n        return output, hidden\n</code></pre> <p>\u5b9a\u4e49\u6a21\u578b\u6240\u9700\u53c2\u6570\u3001\u5b9e\u4f8b\u5316\u6a21\u578b\u3001\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668</p> <pre><code>embed_dim = 128\nhidden_dim = 512  \nvocab_size = len(vocab)\n\nmodel = RNNTextGenerator(vocab_size, embed_dim, hidden_dim, num_layers=2).to(device)\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)  \n</code></pre>"},{"location":"lab4/RNN%E6%96%87%E6%9C%AC%E7%94%9F%E6%88%90%E6%B1%87%E6%80%BB/#rnn_1","title":"RNN \u6a21\u578b\u8bad\u7ec3","text":"<p>RNN \u8bad\u7ec3\u8fc7\u7a0b</p> <pre><code>def train_model(model, train_loader, epochs=5):\n    model.train()# \u5c06\u6a21\u578b\u8bbe\u7f6e\u4e3a\u8bad\u7ec3\u6a21\u5f0f\n    for epoch in range(epochs):\n        total_loss = 0\n        progress_bar = tqdm(train_loader, desc=f\"Epoch {epoch + 1}/{epochs}\")# \u4f7f\u7528 tqdm \u521b\u5efa\u8fdb\u5ea6\u6761\n        epoch_grad_norm = None\n\n        for X_batch, Y_batch in progress_bar:\n            X_batch, Y_batch = X_batch.to(device), Y_batch.to(device)# \u5c06\u6570\u636e\u79fb\u52a8\u5230\u6307\u5b9a\u8bbe\u5907\uff08GPU/CPU\uff09\n            optimizer.zero_grad()# \u6e05\u7a7a\u4e0a\u4e00\u8f6e\u7684\u68af\u5ea6\uff0c\u9632\u6b62\u68af\u5ea6\u7d2f\u79ef\n\n            output, _ = model(X_batch)# \u524d\u5411\u4f20\u64ad\uff0c\u8ba1\u7b97\u6a21\u578b\u8f93\u51fa\n            loss = criterion(output, Y_batch) # \u8ba1\u7b97\u635f\u5931\u51fd\u6570\u503c\n            loss.backward()# \u53cd\u5411\u4f20\u64ad\uff0c\u8ba1\u7b97\u68af\u5ea6\n\n            optimizer.step() # \u66f4\u65b0\u6a21\u578b\u53c2\u6570\n            total_loss += loss.item()# \u7d2f\u52a0\u5f53\u524d batch \u7684\u635f\u5931\u503c\n            progress_bar.set_postfix(loss=loss.item())# \u5728\u8fdb\u5ea6\u6761\u4e0a\u663e\u793a\u5f53\u524d batch \u7684\u635f\u5931\u503c\n\n        print(f\"Epoch {epoch + 1}, Avg Loss: {total_loss / len(train_loader):.4f}\")\n        # \u8ba1\u7b97\u5e76\u8f93\u51fa\u672c\u8f6e\u8bad\u7ec3\u7684\u5e73\u5747\u635f\u5931\n\n# \u8bad\u7ec3\u6a21\u578b\ntrain_model(model, train_loader, epochs=20)  \n</code></pre>"},{"location":"lab4/RNN%E6%96%87%E6%9C%AC%E7%94%9F%E6%88%90%E6%B1%87%E6%80%BB/#rnn_2","title":"RNN \u6a21\u578b\u6d4b\u8bd5","text":"<p>RNN \u751f\u6210\u6587\u672c\u6d4b\u8bd5</p> <pre><code>def generate_text(model, start_text, num_words=100, temperature=1.0):\n    model.eval()# \u5c06\u6a21\u578b\u8bbe\u7f6e\u4e3a\u8bc4\u4f30\u6a21\u5f0f\uff0c\u7981\u7528 dropout \u548c batch normalization\n    words = tokenize(start_text)# \u5bf9\u8f93\u5165\u6587\u672c\u8fdb\u884c\u5206\u8bcd\uff0c\u83b7\u53d6\u521d\u59cb\u8bcd\u5217\u8868\n    input_seq = numericalize(start_text).unsqueeze(0).to(device)\n    # \u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u6570\u503c\u8868\u793a\uff0c\u5e76\u8c03\u6574\u5f62\u72b6\u4ee5\u7b26\u5408\u6a21\u578b\u8f93\u5165\u683c\u5f0f\uff08\u589e\u52a0 batch \u7ef4\u5ea6\uff09\uff0c\u518d\u79fb\u52a8\u5230\u6307\u5b9a\u8bbe\u5907\uff08CPU/GPU\uff09\n\n    hidden = None\n\n    for _ in range(num_words): # \u751f\u6210 num_words \u4e2a\u5355\u8bcd\n        with torch.no_grad(): # \u5728\u63a8\u7406\u65f6\u5173\u95ed\u68af\u5ea6\u8ba1\u7b97\uff0c\u63d0\u9ad8\u6548\u7387\n            output, hidden = model(input_seq, hidden)# \u524d\u5411\u4f20\u64ad\uff0c\u83b7\u53d6\u6a21\u578b\u8f93\u51fa\u548c\u65b0\u7684\u9690\u85cf\u72b6\u6001\n\n        # \u8ba1\u7b97 softmax\uff0c\u5e76\u5e94\u7528\u6e29\u5ea6\u7cfb\u6570\n        logits = output.squeeze(0) / temperature # \u5bf9 logits \u9664\u4ee5 temperature \u8c03\u8282\u6982\u7387\u5206\u5e03\u7684\u5e73\u6ed1\u5ea6\n        probs = F.softmax(logits, dim=-1) # \u8ba1\u7b97 softmax \u5f97\u5230\u6982\u7387\u5206\u5e03\n\n        # \u91c7\u6837\u65b0\u8bcd\n        predicted_id = torch.multinomial(probs, num_samples=1).item()\n        # \u57fa\u4e8e\u6982\u7387\u5206\u5e03 \u968f\u673a\u91c7\u6837\u4e00\u4e2a\u8bcd\u7684\u7d22\u5f15\n\n        next_word = vocab[predicted_id]  # \u4ece\u8bcd\u8868\u4e2d\u67e5\u627e\u5bf9\u5e94\u7684\u5355\u8bcd\n        words.append(next_word)# \u5c06\u751f\u6210\u7684\u5355\u8bcd\u6dfb\u52a0\u5230\u6587\u672c\u5217\u8868\u4e2d\n\n        # \u66f4\u65b0\u8f93\u5165\u5e8f\u5217\uff08\u5c06\u65b0\u8bcd\u52a0\u5165\uff0c\u5e76\u79fb\u9664\u6700\u65e7\u7684\u8bcd\uff0c\u7ef4\u6301\u8f93\u5165\u957f\u5ea6\uff09\n        input_seq = torch.cat([input_seq[:, 1:], torch.tensor([[predicted_id]], dtype=torch.long, device=device)],\n                              dim=1)\n\n    return \" \".join(words) \n\n# \u751f\u6210\u6587\u672c\nprint(\"\\nGenerated Text:\")\ntest_text = dataset[\"test\"][1][\"text\"]\n# \u53d6\u524d 100 \u4e2a\u5355\u8bcd\u4f5c\u4e3a\u524d\u7f00\ntest_prefix = \" \".join(test_text.split()[:100])\n\n# \u8ba9\u6a21\u578b\u57fa\u4e8e\u8be5\u524d\u7f00\u751f\u6210 100 \u4e2a\u8bcd\ngenerated_text = generate_text(model, test_prefix, 100, temperature=0.8)\n\nprint(\"\\n\ud83d\udd39 \u6a21\u578b\u751f\u6210\u7684\u6587\u672c\uff1a\\n\")\nprint(generated_text)\n</code></pre>"},{"location":"lab4/RNN%E6%96%87%E6%9C%AC%E7%94%9F%E6%88%90%E6%B1%87%E6%80%BB/#_3","title":"\u56f0\u60d1\u5ea6\u8bc4\u4f30","text":"<p>1. \u57fa\u672c\u6982\u5ff5 \u56f0\u60d1\u5ea6\uff08Perplexity, PPL\uff09\u662f\u8861\u91cf\u8bed\u8a00\u6a21\u578b\u597d\u574f\u7684\u4e00\u4e2a\u5e38\u89c1\u6307\u6807\uff0c\u5b83\u8868\u793a\u6a21\u578b\u5bf9\u6d4b\u8bd5\u6570\u636e\u7684\u4e0d\u786e\u5b9a\u6027\uff0c\u5373\u6a21\u578b\u5728\u9884\u6d4b\u4e0b\u4e00\u4e2a\u8bcd\u65f6\u7684\u56f0\u60d1\u7a0b\u5ea6\u3002 \u5982\u679c\u4e00\u4e2a\u6a21\u578b\u7684\u56f0\u60d1\u5ea6\u8d8a\u4f4e\uff0c\u8bf4\u660e\u5b83\u5bf9\u6570\u636e\u7684\u9884\u6d4b\u8d8a\u51c6\u786e\uff0c\u5373\u66f4\u201c\u786e\u4fe1\u201d\u81ea\u5df1\u751f\u6210\u7684\u8bcd\u8bed\uff1b\u5982\u679c\u56f0\u60d1\u5ea6\u9ad8\uff0c\u8bf4\u660e\u6a21\u578b\u7684\u9884\u6d4b\u4e0d\u592a\u786e\u5b9a\uff0c\u53ef\u80fd\u5728\u591a\u4e2a\u8bcd\u4e4b\u95f4\u6447\u6446\u4e0d\u5b9a\u3002</p> <p>2. \u6570\u5b66\u5b9a\u4e49</p> <p>\u5047\u8bbe\u4e00\u4e2a\u53e5\u5b50\u7531\\(N\\)\u4e2a\u5355\u8bcd\u7ec4\u6210\uff1a</p> \\[W=(w_1,w_2,...,w_N)L_{total}(\\mathbf{w}, b) = L_{original}(\\mathbf{w}, b) + \\frac{\\lambda}{2} \\|\\mathbf{w}\\|^2\\] <p>\u6a21\u578b\u7ed9\u51fa\u7684\u6982\u7387\u4e3a\uff1a</p> \\[P(W)=P(w_1,w_2,...,w_N)=P(w_1)P(w_2|w_1)P(w_3|w_1,w_2)...P(w_N|w_1,...,w_{N-1})\\] <p>\u90a3\u4e48\uff0c\u56f0\u60d1\u5ea6\uff08Perplexity, PPL\uff09\u5b9a\u4e49\u4e3a\uff1a</p> \\[ PPL=P(W)^{-\\frac{1}{N}} \\] <p>\u6216\u8005\u7b49\u4ef7\u5730\uff1a</p> \\[ PPL = \\exp \\left( -\\frac{1}{N} \\sum_{i=1}^{N} \\log P(w_i | w_1, ..., w_{i-1}) \\right) \\] <p>\u5176\u4e2d\uff1a - \\(P(w_i | w_1, ..., w_{i-1})\\) \u662f\u6a21\u578b\u5728\u7ed9\u5b9a\u524d \\(i-1\\) \u4e2a\u5355\u8bcd\u65f6\u9884\u6d4b \\(w_i\\) \u7684\u6982\u7387 - \\(N\\) \u662f\u53e5\u5b50\u7684\u5355\u8bcd\u603b\u6570</p> <p>\u56f0\u60d1\u5ea6\u7684\u6700\u597d\u7684\u7406\u89e3\u662f\u201c\u4e0b\u4e00\u4e2a\u8bcd\u5143\u7684\u5b9e\u9645\u9009\u62e9\u6570\u7684\u8c03\u548c\u5e73\u5747\u6570\u201d\u3002</p> <ul> <li> <p>\u5728\u6700\u597d\u7684\u60c5\u51b5\u4e0b\uff0c\u6a21\u578b\u603b\u662f\u5b8c\u7f8e\u5730\u4f30\u8ba1\u6807\u7b7e\u8bcd\u5143\u7684\u6982\u7387\u4e3a1\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6a21\u578b\u7684\u56f0\u60d1\u5ea6\u4e3a1\u3002</p> </li> <li> <p>\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u6a21\u578b\u603b\u662f\u9884\u6d4b\u6807\u7b7e\u8bcd\u5143\u7684\u6982\u7387\u4e3a0\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u56f0\u60d1\u5ea6\u662f\u6b63\u65e0\u7a77\u5927\u3002</p> </li> </ul> <p>\u4e0b\u9762\u8bf7\u4f60\u6309\u7167\u8981\u6c42\u8865\u5168\u8ba1\u7b97\u56f0\u60d1\u5ea6\u7684\u4ee3\u7801</p> <pre><code>def compute_perplexity(model, test_text, vocab_dict, seq_len=100):\n    \"\"\"\n    \u8ba1\u7b97\u7ed9\u5b9a\u6587\u672c\u7684\u56f0\u60d1\u5ea6\uff08Perplexity, PPL\uff09\n\n    :param model: \u8bad\u7ec3\u597d\u7684\u8bed\u8a00\u6a21\u578b\uff08RNN/LSTM\uff09\n    :param test_text: \u9700\u8981\u8bc4\u4f30\u7684\u6587\u672c\n    :param vocab_dict: \u8bcd\u6c47\u8868\uff08\u7528\u4e8e\u8f6c\u6362\u6587\u672c\u5230\u7d22\u5f15\uff09\n    :param seq_len: \u8bc4\u4f30\u65f6\u7684\u7a97\u53e3\u5927\u5c0f\n    :return: PPL \u56f0\u60d1\u5ea6\n    \"\"\"\n    model.eval()  # \u8bbe\u4e3a\u8bc4\u4f30\u6a21\u5f0f\n    words = test_text.lower().split()\n\n    # \u5c06\u6587\u672c\u8f6c\u6362\u4e3a token ID\uff0c\u5982\u679c\u8bcd\u4e0d\u5728\u8bcd\u8868\u4e2d\uff0c\u5219\u4f7f\u7528 \"&lt;unk&gt;\"\uff08\u672a\u77e5\u8bcd\uff09\u5bf9\u5e94\u7684\u7d22\u5f15\n    token_ids = torch.tensor([vocab_dict.get(word, vocab_dict[\"&lt;unk&gt;\"]) for word in words], dtype=torch.long)\n\n    # \u8ba1\u7b97 PPL\n    total_log_prob = 0\n    num_tokens = len(token_ids) - 1  # \u9884\u6d4b num_tokens \u6b21\n\n    with torch.no_grad():\n        for i in range(num_tokens):\n            \"\"\"\u904d\u5386\u6587\u672c\u7684\u6bcf\u4e2a token\uff0c\u8ba1\u7b97\u5176\u6761\u4ef6\u6982\u7387\uff0c\u6700\u540e\u7d2f\u52a0log\u6982\u7387\"\"\"\n            input_seq = token_ids[max(0, i - seq_len):i].unsqueeze(0).to(device)  # \u83b7\u53d6\u524d seq_len \u4e2a\u5355\u8bcd\n            if input_seq.shape[1] == 0:  # \u907f\u514d RNN \u8f93\u5165\u7a7a\u5e8f\u5217\n                continue\n\n            target_word = token_ids[i].unsqueeze(0).to(device)  # \u76ee\u6807\u5355\u8bcd\n\n            # TODO: \u524d\u5411\u4f20\u64ad\uff0c\u9884\u6d4b\u4e0b\u4e00\u4e2a\u5355\u8bcd\u7684 logits\n            # TODO: \u8ba1\u7b97 softmax \u5e76\u53d6 log \u6982\u7387\n            # TODO: \u53d6\u76ee\u6807\u8bcd\u7684\u5bf9\u6570\u6982\u7387\n            # TODO: \u7d2f\u52a0 log \u6982\u7387      \n\n    avg_log_prob = total_log_prob / num_tokens  # \u8ba1\u7b97\u5e73\u5747 log \u6982\u7387\n    perplexity = torch.exp(torch.tensor(-avg_log_prob)) # \u8ba1\u7b97 PPL\uff0c\u516c\u5f0f PPL = exp(-avg_log_prob)\n\n    return perplexity.item()\n\n\n# \u793a\u4f8b\u7528\u6cd5\nppl = compute_perplexity(model, generated_text, vocab_dict)\nprint(f\"Perplexity (PPL): {ppl:.4f}\")\n</code></pre> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98984\uff1a\u5047\u8bbe\u4f60\u5728RNN\u548cLSTM\u8bed\u8a00\u6a21\u578b\u4e0a\u5206\u522b\u8ba1\u7b97\u4e86\u56f0\u60d1\u5ea6\uff0c\u53d1\u73b0RNN\u7684PPL\u66f4\u4f4e\u3002\u8fd9\u662f\u5426\u610f\u5473\u7740RNN\u751f\u6210\u7684\u6587\u672c\u4e00\u5b9a\u66f4\u6d41\u7545\u81ea\u7136\uff1f\u5982\u679c\u4e0d\u662f\uff0c\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u8fd9\u4e24\u4e2a\u56f0\u60d1\u5ea6\u53ef\u4ee5\u76f4\u63a5\u6bd4\u8f83\uff1f</p> <p>\u601d\u8003\u98985\uff1a\u56f0\u60d1\u5ea6\u662f\u4e0d\u662f\u8d8a\u4f4e\u8d8a\u597d\uff1f</p>"},{"location":"lab4/RNN%E6%96%87%E6%9C%AC%E7%94%9F%E6%88%90%E6%B1%87%E6%80%BB/#3-lstmgru","title":"3. LSTM\u548cGRU\u6587\u672c\u751f\u6210\u5b9e\u9a8c","text":"<p>LSTM\u6587\u672c\u751f\u6210\u6982\u8ff0</p> <p>LSTM\uff08Long Short-Term Memory\uff09\u662f\u4e00\u79cd\u6539\u8fdb\u7684 RNN\uff0c\u80fd\u591f\u901a\u8fc7 \u95e8\u63a7\u673a\u5236\uff08\u9057\u5fd8\u95e8\u3001\u8f93\u5165\u95e8\u3001\u8f93\u51fa\u95e8\uff09 \u6709\u6548\u6355\u6349\u957f\u671f\u4f9d\u8d56\u5173\u7cfb\uff0c\u9632\u6b62\u68af\u5ea6\u6d88\u5931\u548c\u68af\u5ea6\u7206\u70b8\u95ee\u9898\uff0c\u4f7f\u5176\u5728\u5904\u7406\u957f\u5e8f\u5217\u4efb\u52a1\u65f6\u6bd4\u666e\u901a RNN \u66f4\u5f3a\u5927\u3002 \u672c\u5b9e\u9a8c\u4f9d\u65e7\u4ee5AG News \u6570\u636e\u4e3a\u4f8b\uff0c\u7ed9\u5b9a\u524d100\u4e2a\u5355\u8bcd\u4f5c\u4e3a\u8f93\u5165\uff0c\u9884\u6d4b\u4e0b\u4e00\u4e2a\u5355\u8bcd\uff0c\u5b9e\u73b0\u6587\u672c\u751f\u6210\u4efb\u52a1\u3002</p> <p></p> <p>\u6587\u672c\u7684\u9884\u5904\u7406 \u8bad\u7ec3\u6570\u636e\u751f\u6210\u4e0e\u524d\u9762\u4e00\u81f4</p>"},{"location":"lab4/RNN%E6%96%87%E6%9C%AC%E7%94%9F%E6%88%90%E6%B1%87%E6%80%BB/#lstm","title":"LSTM \u6a21\u578b\u6784\u5efa","text":"<p>\u5b9e\u73b0\u4e86\u4e00\u4e2a\u57fa\u4e8e LSTM \u7684\u6587\u672c\u751f\u6210\u6a21\u578b\uff0c\u901a\u8fc7\u8f93\u5165\u6587\u672c\u5e8f\u5217\u9884\u6d4b\u4e0b\u4e00\u4e2a\u5355\u8bcd\u3002</p> <pre><code>class LSTMTextGenerator(nn.Module):\n    def __init__(self, vocab_size, embed_dim, hidden_dim, num_layers=2):\n        super(LSTMTextGenerator, self).__init__()\n        self.embedding = nn.Embedding(vocab_size, embed_dim)\n        self.lstm = nn.LSTM(embed_dim, hidden_dim, num_layers=num_layers, batch_first=True)\n        self.fc = nn.Linear(hidden_dim, vocab_size)\n\n    def forward(self, x, hidden=None):\n        embedded = self.embedding(x)  # (B, L, embed_dim)\n        output, hidden = self.lstm(embedded, hidden)  # (B, L, hidden_dim)\n        output = self.fc(output[:, -1, :])  # \u53ea\u53d6\u6700\u540e\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u8f93\u51fa\u8fdb\u884c\u9884\u6d4b\n        return output, hidden\n</code></pre> <p>\u5b9a\u4e49\u6a21\u578b\u6240\u9700\u53c2\u6570\u3001\u5b9e\u4f8b\u5316\u6a21\u578b\u3001\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668</p> <pre><code>embed_dim = 128\nhidden_dim = 512  \nvocab_size = len(vocab)\n\nmodel = LSTMTextGenerator(vocab_size, embed_dim, hidden_dim, num_layers=2).to(device)\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)  \n</code></pre>"},{"location":"lab4/RNN%E6%96%87%E6%9C%AC%E7%94%9F%E6%88%90%E6%B1%87%E6%80%BB/#lstm_1","title":"LSTM \u6a21\u578b\u8bad\u7ec3","text":"<p>LSTM \u8bad\u7ec3\u8fc7\u7a0b</p> <pre><code>def train_model(model, train_loader, epochs=5):\n    model.train()\n    for epoch in range(epochs):\n        total_loss = 0\n        progress_bar = tqdm(train_loader, desc=f\"Epoch {epoch + 1}/{epochs}\")\n        epoch_grad_norm = None\n\n        for X_batch, Y_batch in progress_bar:\n            X_batch, Y_batch = X_batch.to(device), Y_batch.to(device)\n            optimizer.zero_grad()\n\n            output, _ = model(X_batch)\n            loss = criterion(output, Y_batch)\n            loss.backward()\n\n            optimizer.step()\n            total_loss += loss.item()\n            progress_bar.set_postfix(loss=loss.item())\n\n        print(f\"Epoch {epoch + 1}, Avg Loss: {total_loss / len(train_loader):.4f}\")\n\n# \u8bad\u7ec3\u6a21\u578b\ntrain_model(model, train_loader, epochs=20)\n</code></pre>"},{"location":"lab4/RNN%E6%96%87%E6%9C%AC%E7%94%9F%E6%88%90%E6%B1%87%E6%80%BB/#lstm_2","title":"LSTM \u6a21\u578b\u6d4b\u8bd5","text":"<p>LSTM \u751f\u6210\u6587\u672c\u6d4b\u8bd5</p> <pre><code>def generate_text(model, start_text, num_words=100, temperature=1.0):\n    model.eval()\n    words = tokenize(start_text)\n    input_seq = numericalize(start_text).unsqueeze(0).to(device)\n    hidden = None\n\n    for _ in range(num_words):\n        with torch.no_grad():\n            output, hidden = model(input_seq, hidden)\n\n        # \u8ba1\u7b97 softmax\uff0c\u5e76\u5e94\u7528\u6e29\u5ea6\u7cfb\u6570\n        logits = output.squeeze(0) / temperature\n        probs = F.softmax(logits, dim=-1)\n\n        # \u91c7\u6837\u65b0\u8bcd\n        predicted_id = torch.multinomial(probs, num_samples=1).item()\n\n        next_word = vocab[predicted_id]\n        words.append(next_word)\n\n        input_seq = torch.cat([input_seq[:, 1:], torch.tensor([[predicted_id]], dtype=torch.long, device=device)],\n                              dim=1)\n\n    return \" \".join(words) \n\n# \u751f\u6210\u6587\u672c\nprint(\"\\nGenerated Text:\")\ntest_text = dataset[\"test\"][1][\"text\"]\n# \u53d6\u524d 100 \u4e2a\u5355\u8bcd\u4f5c\u4e3a\u524d\u7f00\ntest_prefix = \" \".join(test_text.split()[:100])\n\n# \u8ba9\u6a21\u578b\u57fa\u4e8e\u8be5\u524d\u7f00\u751f\u6210 100 \u4e2a\u8bcd\ngenerated_text = generate_text(model, test_prefix, 100, temperature=0.8)\nprint(\"\\n\ud83d\udd39 \u6a21\u578b\u751f\u6210\u7684\u6587\u672c\uff1a\\n\")\nprint(generated_text)\n</code></pre> <p>\u501f\u52a9RNN\u6587\u672c\u751f\u6210\u4efb\u52a1\u4e2d\u8ba1\u7b97\u56f0\u60d1\u5ea6\u7684\u51fd\u6570\uff0c\u8ba1\u7b97\u4e00\u4e0blstm\u5728generated_text\u4e0a\u7684\u56f0\u60d1\u5ea6\u3002</p> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98986\uff1a\u89c2\u5bdf\u4e00\u4e0bRNN\u548cLSTM\u8bad\u7ec3\u8fc7\u7a0b\u4e2dloss\u7684\u53d8\u5316\uff0c\u5e76\u5206\u6790\u4e00\u4e0b\u9020\u6210\u8fd9\u79cd\u73b0\u8c61\u7684\u539f\u56e0\u3002</p> <p>GRU\u6587\u672c\u751f\u6210\u6982\u8ff0</p> <p>GRU\uff08Gated Recurrent Unit\uff09\u662f LSTM \u7684\u7b80\u5316\u7248\u672c\uff0c\u4f7f\u7528 \u66f4\u65b0\u95e8\uff08Update Gate\uff09\u548c\u91cd\u7f6e\u95e8\uff08Reset Gate\uff09 \u6765\u63a7\u5236\u4fe1\u606f\u6d41\u52a8\uff0c\u8ba1\u7b97\u6548\u7387\u66f4\u9ad8\uff0c\u4e14\u80fd\u5728\u8bb8\u591a\u4efb\u52a1\u4e2d\u53d6\u5f97\u4e0e LSTM \u76f8\u4f3c\u7684\u6548\u679c\uff0c\u540c\u65f6\u51cf\u5c11\u8ba1\u7b97\u6210\u672c\u548c\u53c2\u6570\u91cf\u3002 \u672c\u5b9e\u9a8c\u4f9d\u65e7\u4ee5AG News \u6570\u636e\u4e3a\u4f8b\uff0c\u7ed9\u5b9a\u524d100\u4e2a\u5355\u8bcd\u4f5c\u4e3a\u8f93\u5165\uff0c\u9884\u6d4b\u4e0b\u4e00\u4e2a\u5355\u8bcd\uff0c\u5b9e\u73b0\u6587\u672c\u751f\u6210\u4efb\u52a1\u3002</p> <p></p> <p>\u6587\u672c\u7684\u9884\u5904\u7406 \u8bad\u7ec3\u6570\u636e\u751f\u6210\u4e0e\u524d\u9762\u4e00\u81f4</p>"},{"location":"lab4/RNN%E6%96%87%E6%9C%AC%E7%94%9F%E6%88%90%E6%B1%87%E6%80%BB/#gru","title":"GRU \u6a21\u578b\u6784\u5efa","text":"<p>\u5b9e\u73b0\u4e86\u4e00\u4e2a\u57fa\u4e8e GRU \u7684\u6587\u672c\u751f\u6210\u6a21\u578b\uff0c\u901a\u8fc7\u8f93\u5165\u6587\u672c\u5e8f\u5217\u9884\u6d4b\u4e0b\u4e00\u4e2a\u5355\u8bcd\u3002</p> <pre><code>class GRUTextGenerator(nn.Module):\n    def __init__(self, vocab_size, embed_dim, hidden_dim, num_layers=2):\n        super(GRUTextGenerator, self).__init__()\n        self.embedding = nn.Embedding(vocab_size, embed_dim)\n        self.gru = nn.GRU(embed_dim, hidden_dim, num_layers=num_layers, batch_first=True)\n        self.fc = nn.Linear(hidden_dim, vocab_size)\n\n    def forward(self, x, hidden=None):\n        embedded = self.embedding(x)  # (B, L, embed_dim)\n        output, hidden = self.gru(embedded, hidden)  # (B, L, hidden_dim)\n        output = self.fc(output[:, -1, :])  # \u53ea\u53d6\u6700\u540e\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u8f93\u51fa\u8fdb\u884c\u9884\u6d4b\n        return output, hidden\n</code></pre> <p>\u5b9a\u4e49\u6a21\u578b\u6240\u9700\u53c2\u6570\u3001\u5b9e\u4f8b\u5316\u6a21\u578b\u3001\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668</p> <pre><code>embed_dim = 128\nhidden_dim = 512  \nvocab_size = len(vocab)\n\nmodel = GRUTextGenerator(vocab_size, embed_dim, hidden_dim, num_layers=2).to(device)\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n</code></pre>"},{"location":"lab4/RNN%E6%96%87%E6%9C%AC%E7%94%9F%E6%88%90%E6%B1%87%E6%80%BB/#gru_1","title":"GRU \u6a21\u578b\u8bad\u7ec3","text":"<p>GRU \u8bad\u7ec3\u8fc7\u7a0b\u4e5f\u4e0eLSTM\u4fdd\u6301\u4e00\u81f4</p>"},{"location":"lab4/RNN%E6%96%87%E6%9C%AC%E7%94%9F%E6%88%90%E6%B1%87%E6%80%BB/#gru_2","title":"GRU \u6a21\u578b\u6d4b\u8bd5","text":"<p>GRU \u751f\u6210\u6587\u672c\u6d4b\u8bd5</p> <pre><code>def generate_text(model, start_text, num_words=100, temperature=1.0):\n    model.eval()\n    words = tokenize(start_text)\n    input_seq = numericalize(start_text).unsqueeze(0).to(device)\n    hidden = None\n\n    for _ in range(num_words):\n        with torch.no_grad():\n            output, hidden = model(input_seq, hidden)\n\n        # \u8ba1\u7b97 softmax\uff0c\u5e76\u5e94\u7528\u6e29\u5ea6\u7cfb\u6570\n        logits = output.squeeze(0) / temperature\n        probs = F.softmax(logits, dim=-1)\n\n        # \u91c7\u6837\u65b0\u8bcd\n        predicted_id = torch.multinomial(probs, num_samples=1).item()\n\n        next_word = vocab[predicted_id]\n        words.append(next_word)\n\n        input_seq = torch.cat([input_seq[:, 1:], torch.tensor([[predicted_id]], dtype=torch.long, device=device)],\n                              dim=1)\n\n    return \" \".join(words) \n\n# \u751f\u6210\u6587\u672c\nprint(\"\\nGenerated Text:\")\ntest_text = dataset[\"test\"][1][\"text\"]\n# \u53d6\u524d 100 \u4e2a\u5355\u8bcd\u4f5c\u4e3a\u524d\u7f00\ntest_prefix = \" \".join(test_text.split()[:100])\n\n# \u8ba9\u6a21\u578b\u57fa\u4e8e\u8be5\u524d\u7f00\u751f\u6210 100 \u4e2a\u8bcd\ngenerated_text = generate_text(model, test_prefix, 100, temperature=0.8)\nprint(\"\\n\ud83d\udd39 \u6a21\u578b\u751f\u6210\u7684\u6587\u672c\uff1a\\n\")\nprint(generated_text)\n</code></pre> <p>\u501f\u52a9RNN\u6587\u672c\u751f\u6210\u4efb\u52a1\u4e2d\u8ba1\u7b97\u56f0\u60d1\u7684\u51fd\u6570\uff0c\u8ba1\u7b97\u4e00\u4e0bGRU\u5728generated_text\u4e0a\u7684\u56f0\u60d1\u5ea6\u3002</p> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98987\uff1a\u8fd9\u4e09\u4e2a\u56f0\u60d1\u5ea6\u53ef\u4ee5\u76f4\u63a5\u6bd4\u8f83\u5417\uff1f\u5206\u6790\u4e00\u4e0b\u3002  </p> <p>\u601d\u8003\u98988\uff1aGRU \u53ea\u6709\u4e24\u4e2a\u95e8\uff08\u66f4\u65b0\u95e8\u548c\u91cd\u7f6e\u95e8\uff09\uff0c\u76f8\u6bd4 LSTM \u5c11\u4e86\u4e00\u4e2a\u95e8\u63a7\u5355\u5143\uff0c\u8fd9\u6837\u7684\u8bbe\u8ba1\u6709\u4ec0\u4e48\u4f18\u7f3a\u70b9\uff1f </p> <p>\u601d\u8003\u98989\uff1a\u5728\u4f4e\u7b97\u529b\u8bbe\u5907\uff08\u5982\u624b\u673a\uff09\u4e0a\uff0cRNN\u3001LSTM \u548c GRU \u54ea\u4e2a\u66f4\u9002\u5408\u90e8\u7f72\uff1f\u4e3a\u4ec0\u4e48\uff1f</p> <p>\u601d\u8003\u989810\uff1a\u5982\u679c\u5c31\u662f\u8981\u4f7f\u7528RNN\u6a21\u578b\uff0c\u539f\u5148\u7684\u4ee3\u7801\u8fd8\u6709\u54ea\u91cc\u53ef\u4ee5\u4f18\u5316\u7684\u5730\u65b9\uff1f\u8bf7\u7ed9\u51fa\u4fee\u6539\u90e8\u5206\u4ee3\u7801\u4ee5\u53ca\u5b9e\u9a8c\u7ed3\u679c\u3002</p>"},{"location":"lab4/%E5%AE%9E%E9%AA%8C%E5%9B%9B%E4%BB%8B%E7%BB%8D/","title":"\u5b9e\u9a8c\u56db\uff1a\u8bcd\u5d4c\u5165\u548c\u5faa\u73af\u795e\u7ecf\u7f51\u7edc","text":""},{"location":"lab4/%E5%AE%9E%E9%AA%8C%E5%9B%9B%E4%BB%8B%E7%BB%8D/#_2","title":"\u5f00\u59cb\u4e4b\u524d","text":"<p>\u6211\u4eec\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\u4f7f\u7528Jupyter Notebook\u8fdb\u884c\u5b9e\u9a8c\uff0c\u8bf7\u53c2\u8003Jupyter Notebook\u4f7f\u7528\uff0c\u6309\u7167\u6587\u6863\u4e2d\u8be6\u7ec6\u6b65\u9aa4\u8fdb\u884c\u64cd\u4f5c\uff0c\u5b8c\u6210Jupyter Notebook\u7684\u914d\u7f6e\u3002</p>"},{"location":"lab4/%E5%AE%9E%E9%AA%8C%E5%9B%9B%E4%BB%8B%E7%BB%8D/#_3","title":"\u5b9e\u9a8c\u4efb\u52a1","text":"<p>\u672c\u6b21\u5b9e\u9a8c\u5206\u4e3a\u4e24\u4e2a\u4efb\u52a1\uff1a\u8bcd\u5d4c\u5165\uff08\u7ea690\u5206\u949f\uff09\u548cRNN\u3001LSTM\u548cGRU\u6587\u672c\u751f\u6210\u4efb\u52a1\u5b9e\u9a8c\uff08\u7ea660\u5206\u949f\uff09\u3002</p>"},{"location":"lab4/%E5%AE%9E%E9%AA%8C%E5%9B%9B%E4%BB%8B%E7%BB%8D/#_4","title":"\u4efb\u52a1\u4e00\uff1a\u8bcd\u5d4c\u5165","text":"<p>\u4e0b\u8f7d\u4efb\u52a1\u4e00\u4ee3\u7801</p> <p>\u5728\u8fd9\u4e2a\u4efb\u52a1\u4e2d\uff0c\u4f60\u5c06\uff1a</p> <ol> <li>\u63a2\u7d22\u8bcd\u5d4c\u5165\u7684\u57fa\u672c\u6027\u8d28</li> <li>\u4f7f\u7528AG News\u6570\u636e\u96c6\u8fdb\u884c\u6587\u672c\u5206\u7c7b</li> <li>\u638c\u63e1\u4f7f\u7528\u8bcd\u5d4c\u5165\u5206\u7c7b\u7684\u57fa\u672c\u6d41\u7a0b\u548c\u8bad\u7ec3\u8fc7\u7a0b</li> </ol> <p>\u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a</p> <ul> <li>\u8bcd\u5d4c\u5165\u7684\u57fa\u672c\u539f\u7406</li> <li>\u63a2\u7d22\u8bcd\u5d4c\u5165\u53ca\u5176\u57fa\u672c\u6027\u8d28</li> <li>\u4f7f\u7528PyTorch\u6846\u67b6\u5b9e\u73b0\u6587\u672c\u5206\u7c7b</li> <li>\u6a21\u578b\u8bad\u7ec3\u4e0e\u8bc4\u4f30</li> <li>\u601d\u8003\u9898\u8ba8\u8bba</li> </ul> <p>\u901a\u8fc7\u672c\u4efb\u52a1\uff0c\u4f60\u5c06\u638c\u63e1\u8bcd\u5d4c\u5165\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u8ba4\u8bc6\u8bcd\u5d4c\u5165\u7684\u57fa\u672c\u6027\u8d28\uff0c\u5e76\u80fd\u591f\u5728PyTorch\u6846\u67b6\u4e0b\u4f7f\u7528\u8bcd\u5d4c\u5165\u8bad\u7ec3\u4e00\u4e2a\u6587\u672c\u5206\u7c7b\u6a21\u578b\u3002</p>"},{"location":"lab4/%E5%AE%9E%E9%AA%8C%E5%9B%9B%E4%BB%8B%E7%BB%8D/#rnnlstmgru","title":"\u4efb\u52a1\u4e8c\uff1aRNN\u3001LSTM\u548cGRU\u6587\u672c\u751f\u6210\u4efb\u52a1","text":"<p>\u4e0b\u8f7d\u4efb\u52a1\u4e8c\u4ee3\u7801</p> <p>\u5728\u8fd9\u4e2a\u4efb\u52a1\u4e2d\uff0c\u4f60\u5c06\uff1a</p> <ol> <li>\u5b9e\u73b0\u6587\u672c\u6570\u636e\u96c6\u7684\u9884\u5904\u7406\u64cd\u4f5c</li> <li>\u63a2\u7d22RNN\u3001LSTM\u548cGRU\u7684\u5dee\u5f02</li> </ol> <p>\u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a</p> <ul> <li>\u6587\u672c\u9884\u5904\u7406</li> <li>RNN\u6587\u672c\u751f\u6210\u5b9e\u9a8c</li> <li>LSTM\u548cGRU\u6587\u672c\u751f\u6210\u5b9e\u9a8c</li> <li>RNN\u3001LSTM\u548cGRU\u7684\u6bd4\u8f83\u601d\u8003</li> </ul> <p>\u901a\u8fc7\u672c\u4efb\u52a1\uff0c\u4f60\u5c06\u638c\u63e1\u6587\u672c\u9884\u5904\u7406\u64cd\u4f5c\uff0c\u7406\u89e3RNN\u7684\u3001LSTM\u548cGRU\u7684\u5dee\u5f02\uff0c\u5e76\u80fd\u591f\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\u5408\u9002\u7684\u6a21\u578b\u3002</p>"},{"location":"lab4/%E5%AE%9E%E9%AA%8C%E5%9B%9B%E4%BB%8B%E7%BB%8D/#_5","title":"\u5b9e\u9a8c\u63d0\u4ea4","text":"<p>\u5b9e\u9a8c\u5b8c\u6210\u540e\uff0c\u8bf7\u63d0\u4ea4\u4ee5\u4e0b\u6750\u6599\uff1a</p> <ol> <li>\u8fd0\u884c\u6210\u529f\u7684Jupyter Notebook\u6587\u4ef6</li> <li>\u4e00\u4efdPDF\u62a5\u544a\uff0c\u62a5\u544a\u5185\u5bb9\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a<ol> <li>\u4efb\u52a1\u4e2d\u7684\u586b\u5145\u4ee3\u7801\u548c\u76f8\u5e94\u5b9e\u9a8c\u7ed3\u679c</li> <li>\u5b9e\u9a8c\u56db\u601d\u8003\u9898\u7b54\u6848</li> <li>\u5b9e\u9a8c\u5fc3\u5f97\u4e0e\u4f53\u4f1a</li> </ol> </li> </ol>"},{"location":"lab4/%E5%AE%9E%E9%AA%8C%E5%9B%9B%E4%BB%8B%E7%BB%8D/#_6","title":"\u63d0\u4ea4\u8bf4\u660e","text":"<ol> <li>\u672c\u6b21\u63d0\u4ea4\u7684\u5185\u5bb9\u4e3a: \u5b9e\u9a8c\u56db\u8981\u6c42\u63d0\u4ea4\u7684\u5185\u5bb9\uff0c\u5177\u4f53\u8981\u6c42\u8bf7\u53c2\u89c1\u5b9e\u9a8c\u7f51\u7ad9\uff08https://zhiweinju.github.io/nju-dl-lab-2025spring/\uff09</li> <li>\u63d0\u4ea4\u7684\u62a5\u544a\u6587\u4ef6\u8bf7\u4ee5PDF\u6587\u4ef6\u683c\u5f0f\u4e0a\u4f20\u5230selearning\u7f51\u7ad9\uff0c\u4e0a\u4f20\u6587\u4ef6\u7684\u6587\u4ef6\u547d\u540d\u683c\u5f0f\u4e3a: \u5b66\u53f7_\u59d3\u540d_\u5b9e\u9a8c\u56db.pdf\uff0c\u6bd4\u5982\uff1a123456789_\u5f20\u4e09_\u5b9e\u9a8c\u56db.pdf</li> <li>\u5176\u4ed6\u63d0\u4ea4\u6587\u4ef6\uff08\u5982 \u8fd0\u884c\u6210\u529f\u7684Jupyter Notebook\u6587\u4ef6\uff09\uff0c\u8bf7\u52a0\u4e0a\u524d\u7f00: \u5b66\u53f7_\u59d3\u540d_\uff0c\u6bd4\u5982: 123456789_\u5f20\u4e09_lab4.ipynb</li> <li>\u672c\u6b21\u63d0\u4ea4\u7684\u622a\u6b62\u65f6\u95f4\u4e3a 3\u670821\u65e523:59:59</li> <li>\u5bf9\u4e8e\u8fdf\u4ea4\u7684\u5904\u7406: \u8fdf\u4ea4\u4e00\u5468\u4ee5\u5185\uff0c\u6298\u6263\u7cfb\u6570\u4e3a0.8\uff0c\u8fdf\u4ea4\u8d85\u8fc7\u4e00\u5468\uff0c\u6298\u6263\u7cfb\u6570\u4e3a0.6\uff0c\u8d85\u8fc7\u4e00\u4e2a\u6708\u505c\u6b62\u63a5\u6536\u63d0\u4ea4\uff0c\u5c1a\u672a\u63d0\u4ea4\u8005\u672c\u6b21\u4f5c\u4e1a\u8ba10\u5206</li> </ol>"},{"location":"lab4/%E8%AF%8D%E5%B5%8C%E5%85%A5/","title":"\u5b9e\u9a8c\u4efb\u52a1\u4e00\uff1a \u8bcd\u5d4c\u5165","text":""},{"location":"lab4/%E8%AF%8D%E5%B5%8C%E5%85%A5/#_2","title":"\u8bcd\u5d4c\u5165","text":"<p>\u5b9e\u9a8c\u76ee\u6807</p> <p>\u901a\u8fc7\u672c\u6b21\u5b9e\u9a8c\uff0c\u4f60\u5c06\u638c\u63e1\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <ol> <li>\u8ba4\u8bc6\u8bcd\u5d4c\u5165\u3002</li> <li>\u4eceGlove\u8bcd\u5d4c\u5165\u4e2d\uff0c\u63a2\u7d22\u4e00\u4e9b\u8bcd\u5d4c\u5165\u7684\u57fa\u672c\u6027\u8d28\u3002</li> <li>\u5229\u7528\u8bcd\u5d4c\u5165\u8fdb\u884c\u6587\u672c\u5206\u7c7b\u3002</li> </ol>"},{"location":"lab4/%E8%AF%8D%E5%B5%8C%E5%85%A5/#1","title":"1. \u8bcd\u5d4c\u5165","text":"<p>\u8bcd\u5d4c\u5165\u7b80\u4ecb</p> <p>\u8bcd\u5d4c\u5165\u662f\u6307\u7528\u4e00\u4e2a\u4f4e\u7ef4\u5411\u91cf\u6765\u8868\u793a\u5355\u8bcd\u3002\u8bcd\u5d4c\u5165\u88ab\u7528\u4f5c\u81ea\u7136\u8bed\u8a00\u5904\u7406\u4efb\u52a1\uff08\u5982\u60c5\u611f\u5206\u7c7b\u3001\u95ee\u7b54\u3001\u7ffb\u8bd1\u7b49\uff09\u7684\u57fa\u672c\u7ec4\u6210\u90e8\u5206\u3002\u56e0\u6b64\uff0c\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u4e86\u89e3\u8bcd\u5d4c\u5165\u7684\u6784\u9020\u5e76\u4e14\u76f4\u89c2\u611f\u53d7\u8bcd\u5d4c\u5165\u3002</p> <p>\u672c\u6b21\u5b9e\u9a8c\u6240\u7528\u7684\u8bcd\u5d4c\u5165\u548c\u6570\u636e\u96c6\u4e0b\u8f7d\u94fe\u63a5\u5982\u4e0b\uff1a  </p>"},{"location":"lab4/%E8%AF%8D%E5%B5%8C%E5%85%A5/#_3","title":"\u8bcd\u5d4c\u5165\u4e0b\u8f7d\u94fe\u63a5\uff1a","text":"<p>https://box.nju.edu.cn/d/591925358e264f3b9a75/</p>"},{"location":"lab4/%E8%AF%8D%E5%B5%8C%E5%85%A5/#ag","title":"ag\u6570\u636e\u4e0b\u8f7d\u94fe\u63a5\uff1a","text":"<p>https://box.nju.edu.cn/f/7d3e4fce48fb446884c9/?dl=1</p>"},{"location":"lab4/%E8%AF%8D%E5%B5%8C%E5%85%A5/#2","title":"2. \u63a2\u7d22\u8bcd\u5d4c\u5165","text":"<p>\u5728\u672c\u8282\uff0c\u6211\u4eec\u5c06\u57fa\u4e8e\u8bad\u7ec3\u597d\u7684Glove\u8bcd\u5d4c\u5165(\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u884cgoogle Glove\u7684\u8bba\u6587\uff0cGloVe: Global Vectors for Word Representation)\u8fdb\u884c\u4e00\u4e9b\u521d\u6b65\u63a2\u7d22\u3002\u9996\u5148\u52a0\u8f7dGlove\u8bcd\u5d4c\u5165</p> <pre><code>import numpy as np\n\ndef load_glove_embeddings(glove_file, embedding_dim=50):\n    \"\"\"\n    \u8bfb\u53d6 GloVe \u8bcd\u5411\u91cf\u6587\u4ef6\uff0c\u5e76\u8fd4\u56de\uff1a\n    - word_to_vec: \u5355\u8bcd\u5230\u5411\u91cf\u7684\u6620\u5c04\n    - word_to_index: \u5355\u8bcd\u5230\u7d22\u5f15\u7684\u6620\u5c04\n    - index_to_word: \u7d22\u5f15\u5230\u5355\u8bcd\u7684\u6620\u5c04\n    - embedding_matrix: \u8bcd\u5d4c\u5165\u77e9\u9635\n    \"\"\"\n    word_to_vec = {}\n    word_to_index = {}\n    index_to_word = {}\n\n    # \u8bfb\u53d6 GloVe \u8bcd\u5411\u91cf\u6587\u4ef6\n    with open(glove_file, 'r', encoding='utf-8') as f:\n        for idx, line in enumerate(f):\n            values = line.strip().split()\n            word = values[0]  # \u53d6\u51fa\u5355\u8bcd\n            vector = np.array(values[1:], dtype=np.float32)  # \u53d6\u51fa\u5411\u91cf\n            word_to_vec[word] = vector\n            word_to_index[word] = idx + 1  # \u4ece1\u5f00\u59cb\u7f16\u53f7\n            index_to_word[idx + 1] = word\n\n    # \u521b\u5efa\u5d4c\u5165\u77e9\u9635 (\u8bcd\u6c47\u5927\u5c0f x \u7ef4\u5ea6)\n    vocab_size = len(word_to_vec) + 1  # +1 \u662f\u56e0\u4e3a\u4ece1\u5f00\u59cb\u7f16\u53f7\n    embedding_matrix = np.zeros((vocab_size, embedding_dim), dtype=np.float32)\n\n    for word, idx in word_to_index.items():\n        embedding_matrix[idx] = word_to_vec[word]\n\n    return word_to_vec, word_to_index, index_to_word, embedding_matrix\n\n# \u4f7f\u7528\u793a\u4f8b\uff08\u8bf7\u66ff\u6362 'glove.6B.50d.txt' \u4e3a\u4f60\u7684GloVe\u6587\u4ef6\u8def\u5f84\uff09\nglove_path = \"glove.6B.50d.txt\"\nword_to_vec, word_to_index, index_to_word, embedding_matrix = load_glove_embeddings(glove_path)\n# \u793a\u4f8b\uff1a\u67e5\u770b 'king' \u7684\u8bcd\u5411\u91cf\nprint(\"king \u7684\u8bcd\u5411\u91cf\uff1a\", word_to_vec.get(\"king\"))\n</code></pre>"},{"location":"lab4/%E8%AF%8D%E5%B5%8C%E5%85%A5/#21","title":"2.1 \u5bfb\u627e\u76f8\u4f3c\u7684\u8bcd","text":"<p>\u8bf7\u5728\u8bcd\u6c47\u8868\u4e2d\u5bfb\u627e\u8ddfking\u6700\u76f8\u4f3c\u768410\u4e2a\u5355\u8bcd\u5e76\u6253\u5370\u8fd9\u4e24\u4e2a\u5355\u8bcd\u95f4\u7684\u76f8\u4f3c\u5ea6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4f59\u5f26\u76f8\u4f3c\u5ea6\u5ea6\u91cf\u4e24\u4e2a\u5355\u8bcd\u7684\u76f8\u4f3c\u6027\u3002</p> <pre><code>import numpy as np\nfrom scipy.spatial.distance import cosine\n\ndef find_top_similar_words(target_word, word_to_vec, top_n=5):\n    \"\"\"\n    \u627e\u5230\u79bb target_word \u6700\u8fd1\u7684 top_n \u4e2a\u5355\u8bcd\uff08\u57fa\u4e8e\u4f59\u5f26\u76f8\u4f3c\u5ea6\uff09\n\n    :param target_word: \u76ee\u6807\u5355\u8bcd\n    :param word_to_vec: \u8bcd\u5411\u91cf\u5b57\u5178 {word: vector}\n    :param top_n: \u8fd4\u56de\u6700\u76f8\u8fd1\u7684\u5355\u8bcd\u6570\n    :return: [(word, similarity)] \u6392\u5e8f\u540e\u7684\u5217\u8868\n    \"\"\"\n\n\n    return similarities[:top_n]\n\n# \u67e5\u627e \"king\" \u6700\u76f8\u4f3c\u7684 20 \u4e2a\u5355\u8bcd\ntop_words = find_top_similar_words(\"king\", word_to_vec, top_n=5)\n\n# \u6253\u5370\u7ed3\u679c\nfor word, sim in top_words:\n    print(f\"{word}: {sim:.4f}\")\n</code></pre>"},{"location":"lab4/%E8%AF%8D%E5%B5%8C%E5%85%A5/#22","title":"2.2 \u591a\u4e49\u8bcd","text":"<p>\u6709\u4e00\u4e9b\u8bcd\u5f80\u5f80\u5177\u6709\u591a\u4e2a\u610f\u601d\u6bd4\u5982\u82f9\u679c\u3002\u8bf7\u5148\u601d\u8003\u4e00\u4e2a\u591a\u4e49\u8bcd\uff0c\u5e76\u4e14\u4f7f\u7528Glove\u8bcd\u5d4c\u5165\u8fdb\u884c\u9a8c\u8bc1\u3002\u5373Glove\u4e2d\u4e0e\u5176\u6700\u76f8\u4f3c\u768420\u4e2a\u5355\u8bcd\u4e2d\u662f\u5426\u5305\u542b\u8fd9\u4e24\u4e2a\u610f\u601d\u7684\u76f8\u5173\u5355\u8bcd\u3002\u6700\u540e\uff0c\u8bf7\u7ed9\u51fa\u8fd9\u4e2a\u5355\u8bcd\u5e76\u4e14\u6253\u5370\u8ddf\u5176\u6700\u76f8\u4f3c\u768420\u4e2a\u5355\u8bcd\u7684\u76f8\u4f3c\u5ea6\u3002</p> <pre><code>import numpy as np\nfrom scipy.spatial.distance import cosine\n\ndef find_top_similar_words(target_word, word_to_vec, top_n=5):\n    \"\"\"\n    \u627e\u5230\u79bb target_word \u6700\u8fd1\u7684 top_n \u4e2a\u5355\u8bcd\uff08\u57fa\u4e8e\u4f59\u5f26\u76f8\u4f3c\u5ea6\uff09\n\n    :param target_word: \u76ee\u6807\u5355\u8bcd\n    :param word_to_vec: \u8bcd\u5411\u91cf\u5b57\u5178 {word: vector}\n    :param top_n: \u8fd4\u56de\u6700\u76f8\u8fd1\u7684\u5355\u8bcd\u6570\n    :return: [(word, similarity)] \u6392\u5e8f\u540e\u7684\u5217\u8868\n    \"\"\"\n\n\n    return similarities[:top_n]\n\n# \u67e5\u627e \"king\" \u6700\u76f8\u4f3c\u7684 20 \u4e2a\u5355\u8bcd\ntop_words = find_top_similar_words(\"king\", word_to_vec, top_n=20)\n\n# \u6253\u5370\u7ed3\u679c\nfor word, sim in top_words:\n    print(f\"{word}: {sim:.4f}\")\n</code></pre>"},{"location":"lab4/%E8%AF%8D%E5%B5%8C%E5%85%A5/#23","title":"2.3 \u4f7f\u7528\u8bcd\u5d4c\u5165\u8868\u793a\u5173\u7cfb(\u7c7b\u6bd4)","text":"<p>\u6709\u4e00\u4e2a\u8457\u540d\u7684\u4f8b\u5b50\u662f: \u56fd\u738b\u7684\u8bcd\u5d4c\u5165-\u7537\u4eba\u7684\u8bcd\u5d4c\u5165\u7ea6\u7b49\u4e8e\u5973\u738b\u7684\u8bcd\u5d4c\u5165-\u5973\u4eba\u7684\u8bcd\u5d4c\u5165\uff0c\u5373embedding(\u56fd\u738b)-embedding(\u7537\u4eba)\u2248embedding(\u5973\u738b)-embedding(\u5973\u4eba)\u3002</p> <p>\u57fa\u4e8e\u8fd9\u4e2a\u6848\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u7528embedding(china)-embedding(beijing)\u5b9a\u4e49\u9996\u90fd\u7684\u5173\u7cfb\u3002\u8bf7\u57fa\u4e8e\u4e2d\u56fd-\u5317\u4eac\u7684\u5f97\u5230\u7684\u9996\u90fd\u5173\u7cfb\u5411\u91cf\uff0c\u627e\u51fa\u82f1\u56fd\u7684\u9996\u90fd\u3002\u82f1\u56fd\u4f7f\u75282\u4e2a\u5355\u8bcdengland\u548cbritain\u8fdb\u884c\u63a2\u7d22\uff0c\u5e76\u4e14\u6253\u5370\u51fa\u76f8\u4f3c\u5ea6\u6700\u9ad8\u768410\u4e2a\u5355\u8bcd\u3002\u518d\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u627e\u51fa\u4f26\u6566(london)\u4e3a\u9996\u90fd\u5bf9\u5e94\u7684\u56fd\u5bb6\u3002 <pre><code>import numpy as np\nfrom scipy.spatial.distance import cosine\n\ndef find_top_similar_embeddings(target_embedding, word_to_vec, top_n=10):\n    \"\"\"\n    \u6839\u636e\u4e00\u4e2a\u8bcd\u5411\u91cf\uff0c\u627e\u5230\u6700\u76f8\u4f3c\u7684 top_n \u4e2a\u5355\u8bcd\uff08\u57fa\u4e8e\u4f59\u5f26\u76f8\u4f3c\u5ea6\uff09\n\n    :param target_embedding: \u76ee\u6807\u8bcd\u5411\u91cf (numpy \u6570\u7ec4)\n    :param word_to_vec: \u8bcd\u5411\u91cf\u5b57\u5178 {word: vector}\n    :param top_n: \u8fd4\u56de\u6700\u76f8\u8fd1\u7684\u5355\u8bcd\u6570\n    :return: [(word, similarity)] \u6392\u5e8f\u540e\u7684\u5217\u8868\n    \"\"\"\n    similarities = []\n\n    # \u904d\u5386\u6240\u6709\u5355\u8bcd\uff0c\u8ba1\u7b97\u4f59\u5f26\u76f8\u4f3c\u5ea6\n    for word, vec in word_to_vec.items():\n        similarity = 1 - cosine(target_embedding, vec)  # \u4f59\u5f26\u76f8\u4f3c\u5ea6\n        similarities.append((word, similarity))\n\n    # \u6309\u76f8\u4f3c\u5ea6\u6392\u5e8f\uff08\u964d\u5e8f\uff09\n    similarities.sort(key=lambda x: x[1], reverse=True)\n\n    return similarities[:top_n]\n#  \u83b7\u5f97\u4ee5\u4e0b\u5355\u8bcd\u7684\u8bcd\u5d4c\u5165\nengland_, china_, beijing_ = word_to_vec.get(\"england\"), word_to_vec.get(\"china\"),  word_to_vec.get(\"beijing\")\n</code></pre></p>"},{"location":"lab4/%E8%AF%8D%E5%B5%8C%E5%85%A5/#24","title":"2.4 \u8bcd\u5d4c\u5165\u7684\u4e0d\u8db3","text":"<p>\u8bf7\u53d9\u8ff0glove\u8bcd\u5d4c\u5165\u7684\u4e0d\u8db3\u3002\u8a00\u4e4b\u6709\u7406\u5373\u53ef\uff0c\u4f46\u907f\u514d\u51fa\u73b0\u4e00\u4e9b\u6bd4\u8f83\u5927\u7684\u9610\u8ff0\u4e14\u6ca1\u6709\u5206\u6790\uff0c\u5982\u6027\u80fd\u4e00\u822c\uff0c\u8bad\u7ec3\u8bed\u6599\u8f83\u5c11\u7b49\u3002</p>"},{"location":"lab4/%E8%AF%8D%E5%B5%8C%E5%85%A5/#3","title":"3. \u4f7f\u7528\u8bcd\u5d4c\u5165\u8fdb\u884c\u6587\u672c\u5206\u7c7b","text":"<p>\u6211\u4eec\u63a5\u4e0b\u6765\u5c06\u57fa\u4e8eGlove\u8bcd\u5d4c\u5165\u5bf9AG News\u6570\u636e\u96c6\u8fdb\u884c\u6587\u672c\u5206\u7c7b\u3002</p> <p>AG News \u6570\u636e\u96c6\u7b80\u4ecb</p> <p>AG News \u6570\u636e\u96c6\u6765\u6e90\u4e8e AG's corpus of news articles\uff0c\u662f\u4e00\u4e2a\u5927\u578b\u7684\u65b0\u95fb\u6570\u636e\u96c6\uff0c\u7531 Antonio Gulli \u4ece\u591a\u4e2a\u65b0\u95fb\u7f51\u7ad9\u6536\u96c6\u6574\u7406\u3002 AG News \u6570\u636e\u96c6\u5305\u542b 4 \u7c7b\u65b0\u95fb\uff0c\u6bcf\u7c7b 30,000 \u6761\u8bad\u7ec3\u6570\u636e\uff0c\u5171 120,000 \u6761\u8bad\u7ec3\u6837\u672c \u548c 7,600 \u6761\u6d4b\u8bd5\u6837\u672c\u3002</p>"},{"location":"lab4/%E8%AF%8D%E5%B5%8C%E5%85%A5/#31","title":"3.1 \u6587\u672c\u9884\u5904\u7406","text":"<p>\u9996\u5148\u5bfc\u5165\u6240\u9700\u6a21\u5757\uff1a</p> <p>\u53ef\u80fd\u9700\u8981\u5b89\u88c5datasets\u5305</p> <pre><code>   pip install datasets\n</code></pre> <pre><code>import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom datasets import load_dataset, load_from_disk\nfrom collections import Counter\nfrom torch.nn.utils.rnn import pad_sequence\nimport torch.nn.functional as F\nfrom tqdm import tqdm\nimport os\n</code></pre> <p>\u6211\u4eec\u4eceAG News \u6570\u636e\u96c6\u4e2d\u52a0\u8f7d\u6587\u672c\u3002\u8fd9\u662f\u4e00\u4e2a\u8f83\u5c0f\u7684\u8bed\u6599\u5e93\uff0c\u6709150000\u591a\u4e2a\u5355\u8bcd\uff0c\u4f46\u8db3\u591f\u6211\u4eec\u5c0f\u8bd5\u725b\u5200.</p> <pre><code>data_path = \"ag_news\u6587\u4ef6\u5939\u4fdd\u5b58\u8def\u5f84\"\ndataset = load_from_disk(data_path)\n\n# \u63d0\u53d6\u6240\u6709\u6587\u672c\u6570\u636e\u548c\u6807\u7b7e\ntrain_text = [item['text'] for item in dataset['train']]\ntrain_y = [item['label'] for item in dataset['train']]\ntest_text = [item['text'] for item in dataset['test']]\ntest_y = [item['label'] for item in dataset['test']]\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n</code></pre> <p>\u8bcd\u5143\u5316 \u4e0b\u9762\u7684tokenize\u51fd\u6570\u5c06\u6587\u672c\u884c\u5217\u8868\uff08lines\uff09\u4f5c\u4e3a\u8f93\u5165\uff0c\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u6587\u672c\u5e8f\u5217\uff08\u5982\u4e00\u6761\u6587\u672c\u884c\uff09\u3002\u6bcf\u4e2a\u6587\u672c\u5e8f\u5217\u53c8\u88ab\u62c6\u5206\u6210\u4e00\u4e2a\u8bcd\u5143\u5217\u8868\uff0c\u8bcd\u5143\uff08token\uff09\u662f\u6587\u672c\u7684\u57fa\u672c\u5355\u4f4d\u3002\u6700\u540e\uff0c\u8fd4\u56de\u4e00\u4e2a\u7531\u8bcd\u5143\u5217\u8868\u7ec4\u6210\u7684\u5217\u8868\uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u8bcd\u5143\u90fd\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08string\uff09\u3002\u8bcd\u5143\u7684\u7c7b\u578b\u662f\u5b57\u7b26\u4e32\uff0c\u800c\u6a21\u578b\u9700\u8981\u7684\u8f93\u5165\u662f\u6570\u5b57\uff0c\u56e0\u6b64\u8fd9\u79cd\u7c7b\u578b\u4e0d\u65b9\u4fbf\u6a21\u578b\u4f7f\u7528\u3002\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u5b57\u5178\uff0c\u901a\u5e38\u4e5f\u53eb\u505a\u8bcd\u8868\uff08vocabulary\uff09\uff0c\u7528\u6765\u5c06\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u8bcd\u5143\u6620\u5c04\u5230\u4ece0\u5f00\u59cb\u7684\u6570\u5b57\u7d22\u5f15\u4e2d\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e4b\u524dGlove\u4e2d\u5b9a\u4e49\u8fc7\u7684word_to_index\u3002</p> <p>\u5728\u8fd9\u4e9b\u6b65\u9aa4\u540e\uff0c\u6211\u4eec\u987a\u5e8f\u5730\u628a\u4e00\u6bb5\u6587\u672c\u6620\u5c04\u6210\u4e86\u6570\u5b57\uff0c\u53ef\u4ee5\u9001\u5165\u6a21\u578b\u4e2d\u8fdb\u884c\u5904\u7406\u3002</p> <pre><code># \u4f7f\u7528 split \u8fdb\u884c\u5206\u8bcd\ndef tokenize(text):\n    return text.lower().split()\n\ndef numericalize(text):\n    return torch.tensor([word_to_index.get(word, 0) for word in tokenize(text)], dtype=torch.long)\n\n\ndef pad_tensor(tensor, target_length=100, pad_value=0):\n    \"\"\"\n    Pads a tensor with the given pad_value up to target_length.\n\n    Args:\n        tensor (torch.Tensor): Input 1D tensor.\n        target_length (int): Desired length after padding. Default is 100.\n        pad_value (int): Value to pad with. Default is 0.\n\n    Returns:\n        torch.Tensor: Padded tensor of shape (target_length,).\n    \"\"\"\n    current_length = tensor.size(0)\n    if current_length &gt;= target_length:\n        return tensor[:target_length]  # Truncate if longer\n    else:\n        padding = torch.full((target_length - current_length,), pad_value, dtype=tensor.dtype)\n        return torch.cat((tensor, padding), dim=0)\n\n# \u751f\u6210\u8bad\u7ec3\u6570\u636e\ndef create_data(text_list, seq_len=100):\n    X = []\n    for text in text_list:\n        token_ids = numericalize(text)\n        # \u90fd\u5904\u7406\u6210\u957f\u5ea6\u4e3a100\u7684\u5e8f\u5217\n        token_ids = pad_tensor(token_ids)\n        X.append(token_ids)\n    return torch.stack(X)\n\n\n# \u751f\u6210\u8bad\u7ec3\u6570\u636e\nX_train = create_data(train_text, seq_len=100)\nY_train = torch.Tensor(train_y)\n\n# \u751f\u6210\u6d4b\u8bd5\u6570\u636e\nX_test = create_data(test_text, seq_len=100)\nY_test = torch.Tensor(test_y)\n\n# \u8003\u8651\u5230\u8bad\u7ec3\u65f6\u95f4 \u53ea\u53d6\u524d 50% \u7684\u6570\u636e\nsubset_size = int(0.5 * len(X_train))  # \u8ba1\u7b97 50% \u7684\u6837\u672c\u6570\u91cf\nX_train = X_train[:subset_size]\nY_train = Y_train[:subset_size]\n\n# \u521b\u5efa DataLoader\nbatch_size = 32\ntrain_data = torch.utils.data.TensorDataset(X_train, Y_train)\ntrain_loader = torch.utils.data.DataLoader(train_data, batch_size=batch_size, shuffle=True)\n\ntest_data = torch.utils.data.TensorDataset(X_test, Y_test)\ntest_loader = torch.utils.data.DataLoader(test_data, batch_size=batch_size, shuffle=True)\n</code></pre>"},{"location":"lab4/%E8%AF%8D%E5%B5%8C%E5%85%A5/#32","title":"3.2 \u5d4c\u5165\u5c42","text":"<p>nn.Embedding()\u662f PyTorch \u4e2d\u7528\u4e8e\u521b\u5efa\u8bcd\u5d4c\u5165\u5c42\uff08embedding layer\uff09\u7684\u6a21\u5757\uff0c\u901a\u5e38\u7528\u4e8e\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff08NLP\uff09\u4efb\u52a1\u3002\u5b83\u7684\u4e3b\u8981\u529f\u80fd\u662f\u5c06\u5355\u8bcd\u7d22\u5f15\u6620\u5c04\u4e3a\u7a20\u5bc6\u7684\u5411\u91cf\u8868\u793a\u3002</p> <p>\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528self.embedding = nn.Embedding.from_pretrained(embedding_matrix, freeze=True)\uff0c\u5176\u4e2d\u53c2\u6570embedding_matrix\u662fGlove\u7684\u8bcd\u5d4c\u5165\uff0c\u5373\u6211\u4eec\u4f7f\u7528Glove\u7684\u8bcd\u5d4c\u5165\u6765\u521d\u59cb\u5316\u5d4c\u5165\u5c42\uff1b\u53c2\u6570freeze\u8868\u793a\u5d4c\u5165\u5c42\u662f\u5426\u4f1a\u66f4\u65b0\u53c2\u6570\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e3afreeze=True\uff0c\u5373\u4e0d\u4f1a\u66f4\u65b0\u8bcd\u5d4c\u5165\u3002</p>"},{"location":"lab4/%E8%AF%8D%E5%B5%8C%E5%85%A5/#33","title":"3.3 \u6587\u672c\u5206\u7c7b\u7f51\u7edc","text":"<p>\u8bf7\u57fa\u4e8e\u5728\u4e0a\u6587\u7ed9\u51fa\u7684\u6570\u636e\u5904\u7406\u548c\u8bcd\u5d4c\u5165\u77e9\u9635\uff0c\u5b8c\u6210\u4ee5\u4e0b\u6587\u672c\u5206\u7c7b\u4ee3\u7801\u3002\u5305\u62ec\u56db\u4e2a\u90e8\u5206\uff0c\u5b9a\u4e49\u6587\u672c\u5206\u7c7b\u7f51\u7edc\uff0c\u5b9e\u73b0\u8bad\u7ec3\u51fd\u6570\uff0c\u5b9e\u73b0\u6d4b\u8bd5\u51fd\u6570\u4ee5\u53ca\u5b9a\u4e49\u635f\u5931\u51fd\u6570\u3002 <pre><code>#TODO:\u5b9a\u4e49\u6587\u672c\u5206\u7c7b\u7f51\u7edc\nclass TextClassifier(nn.Module):\n    def __init__(self, vocab_size, embedding_dim, hidden_dim, num_classes):\n        super(TextClassifier, self).__init__()\n\n        #TODO: \u5b9e\u73b0\u6a21\u578b\u7ed3\u6784\n        #TODO \u5b9e\u73b0self.embedding: \u5d4c\u5165\u5c42\n        #TODO \u5b9e\u73b0self.fc: \u5206\u7c7b\u5c42\n\n\n    def forward(self, x):\n        x = self.embedding(x)\n        #TODO: \u5bf9\u4e00\u4e2a\u53e5\u5b50\u4e2d\u7684\u6240\u6709\u5355\u8bcd\u7684\u5d4c\u5165\u53d6\u5e73\u5747\u5f97\u5230\u6700\u7ec8\u7684\u6587\u6863\u5d4c\u5165\n        return self.fc(x)\n\n# TODO: \u5b9e\u73b0\u8bad\u7ec3\u51fd\u6570\uff0c\u6ce8\u610f\u8981\u628a\u6570\u636e\u4e5f\u653e\u5230gpu\u4e0a\u907f\u514d\u62a5\u9519\ndef train_model(model, dataloader, criterion, optimizer):\n\n\n# TODO: \u5b9e\u73b0\u6d4b\u8bd5\u51fd\u6570\uff0c\u8fd4\u56de\u5728\u6d4b\u8bd5\u96c6\u4e0a\u7684\u51c6\u786e\u7387\ndef evaluate_model(model, dataloader):\n\n\n# \u521d\u59cb\u5316\u6a21\u578b\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nembedding_matrix = torch.Tensor(embedding_matrix)\nmodel = TextClassifier(embedding_matrix).to(device)\n#TODO \u5b9e\u73b0criterion: \u5b9a\u4e49\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\n# \u8bad\u7ec3\u6a21\u578b\nEPOCHS = 5\nfor epoch in range(EPOCHS):\n    train_model(model, train_loader, criterion, optimizer)\n    acc = evaluate_model(model, test_loader)\n    print(f\"Epoch {epoch+1}, Accuracy: {acc*100:.2f}%\")\n</code></pre></p> <p>\u601d\u8003\u9898</p> <p>\u4f7f\u7528Glove\u8bcd\u5d4c\u5165\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u662f\u5426\u6bd4\u968f\u673a\u521d\u59cb\u5316\u53d6\u5f97\u66f4\u597d\u7684\u6548\u679c\uff1f</p> <p>\u601d\u8003\u9898</p> <p>\u4e0a\u8ff0\u4ee3\u7801\u5728\u4e0d\u6539\u53d8\u6a21\u578b\uff08\u5373\u4ecd\u7136\u53ea\u6709self.embedding\u548cself.fc\uff0c\u4e0d\u989d\u5916\u5f15\u5165\u5982dropout\u7b49\u5c42\uff09\u548c\u8d85\u53c2\u6570\uff08\u5373batch size\u548c\u5b66\u4e60\u7387\uff09\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u54ea\u4e9b\u5730\u65b9\u6765\u63d0\u5347\u6a21\u578b\u6027\u80fd\u3002\u8bf7\u5217\u4e3e\u4e24\u4e2a\u65b9\u9762\u3002</p>"},{"location":"lab5/transformer/","title":"\u5b9e\u9a8c\u4efb\u52a1\u4e00: Transformer","text":""},{"location":"lab5/transformer/#1-transformer-encoder-layer","title":"1. Transformer \u7f16\u7801\u5668\u4e2d Encoder Layer \u7684\u5b9e\u73b0","text":"<p>Encoder Layer\u7b80\u4ecb</p> <p>Encoder Layer \u662f Transformer \u7f16\u7801\u5668\u4e2d\u7684\u57fa\u672c\u6784\u5efa\u5355\u5143\uff0c\u7531 \u591a\u5934\u81ea\u6ce8\u610f\u529b\u673a\u5236\uff08Multi-Head Self-Attention\uff09 \u548c \u524d\u9988\u5168\u8fde\u63a5\u7f51\u7edc\uff08Feed Forward Network\uff09 \u7ec4\u6210\uff0c\u642d\u914d\u4e24\u6b21\u6b8b\u5dee\u8fde\u63a5\u4e0e LayerNorm\uff0c\u7528\u4e8e\u9ad8\u6548\u5efa\u6a21\u8f93\u5165\u5e8f\u5217\u7684\u4e0a\u4e0b\u6587\u4f9d\u8d56\u5173\u7cfb\u548c\u7279\u5f81\u8868\u8fbe\u80fd\u529b\u3002</p> <p>\u8fd9\u6b21\u6211\u4eec\u8fd8\u662f\u4f7f\u7528AG News \u6570\u636e\u96c6\u8fdb\u884c\u540e\u7eed\u7684\u5206\u7c7b\u4efb\u52a1\uff0c\u7531\u4e8e\u8bfb\u53d6\u6570\u636e\u65b9\u5f0f\u7684\u6539\u53d8\uff0c\u9700\u8981\u91cd\u65b0\u4e0b\u8f7d\u4e00\u4e0b\u6570\u636e\u96c6\u3002</p>"},{"location":"lab5/transformer/#ag","title":"ag\u6570\u636e\u4e0b\u8f7d\u94fe\u63a5\uff1a","text":"<p>https://box.nju.edu.cn/f/a3a2e11167ef4d72a568/?dl=1</p>"},{"location":"lab5/transformer/#bert","title":"\u9884\u8bad\u7ec3\u6a21\u578b\uff08BERT\uff09\u4e0b\u8f7d\u94fe\u63a5\uff1a","text":"<p>https://box.nju.edu.cn/d/2710380144234ce78fe3/</p> <p>\u53ef\u80fd\u9700\u8981\u5b89\u88c5transformers\u5305</p> <pre><code>   pip install transformers\n</code></pre>"},{"location":"lab5/transformer/#_1","title":"\u9884\u5904\u7406","text":"<p>\u9996\u5148\u5bfc\u5165\u6240\u9700\u6a21\u5757\uff1a</p> <pre><code>import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.nn.utils.rnn import pad_sequence\n# from torchtext.data.utils import get_tokenizer\n# from torchtext.vocab import build_vocab_from_iterator\nfrom tqdm import tqdm\nimport pandas as pd\nfrom transformers import AutoTokenizer\n</code></pre> <p>\u6570\u636e\u8bfb\u53d6\u4ee5\u53ca\u9884\u5904\u7406</p> <p>\u4e0d\u540c\u4e8e\u4e0a\u6b21\uff0c\u8fd9\u6b21\u6211\u4eec\u4f7f\u7528pandas\u8bfb\u53d6\u6570\u636e\uff0c\u76f8\u5e94\u7684\u4ee3\u7801\u4e5f\u6709\u6240\u4fee\u6539\u3002</p> <pre><code># **1. \u52a0\u8f7d AG NEWS \u6570\u636e\u96c6**\ndf = pd.read_csv(\"train.csv\")  # \u8bf7\u66ff\u6362\u6210\u4f60\u7684\u6587\u4ef6\u8def\u5f84\ndf.columns = [\"label\", \"title\", \"description\"]  # CSV \u67093\u5217: \u6807\u7b7e, \u6807\u9898, \u63cf\u8ff0\ndf[\"text\"] = df[\"title\"] + \" \" + df[\"description\"]  # \u5408\u5e76\u6807\u9898\u548c\u63cf\u8ff0\u4f5c\u4e3a\u8f93\u5165\u6587\u672c\ndf[\"label\"] = df[\"label\"] - 1  # AG NEWS \u7684\u6807\u7b7e\u662f 1-4\uff0c\u6211\u4eec\u8f6c\u6362\u6210 0-3\ntrain_texts, train_labels = df[\"text\"].tolist(), df[\"label\"].tolist()\nnumber = int(0.3 * len(train_texts))\ntrain_texts, train_labels = train_texts[: number], train_labels[: number]\n\ndf = pd.read_csv(\"test.csv\")  # \u8bf7\u66ff\u6362\u6210\u4f60\u7684\u6587\u4ef6\u8def\u5f84\ndf.columns = [\"label\", \"title\", \"description\"]  # CSV \u67093\u5217: \u6807\u7b7e, \u6807\u9898, \u63cf\u8ff0\ndf[\"text\"] = df[\"title\"] + \" \" + df[\"description\"]  # \u5408\u5e76\u6807\u9898\u548c\u63cf\u8ff0\u4f5c\u4e3a\u8f93\u5165\u6587\u672c\ndf[\"label\"] = df[\"label\"] - 1  # AG NEWS \u7684\u6807\u7b7e\u662f 1-4\uff0c\u6211\u4eec\u8f6c\u6362\u6210 0-3\ntest_texts, test_labels = df[\"text\"].tolist(), df[\"label\"].tolist()\n\n# **2. \u52a0\u8f7d BERT Tokenizer**\nmodel_name = \"bert-base-uncased\"\ntokenizer = AutoTokenizer.from_pretrained(model_name)\n\n# **3. \u5904\u7406\u6570\u636e**\nclass AGNewsDataset(Dataset):\n    def __init__(self, texts, labels, tokenizer, max_length=50):\n        self.texts = texts\n        self.labels = labels\n        self.tokenizer = tokenizer\n        self.max_length = max_length\n\n    def __len__(self):\n        return len(self.texts)\n\n    def __getitem__(self, idx):\n        text = self.texts[idx]\n        label = self.labels[idx]\n        encoding = self.tokenizer(\n            text, truncation=True, padding=\"max_length\", max_length=self.max_length, return_tensors=\"pt\"\n        )\n        input_ids = encoding[\"input_ids\"].squeeze(0)\n        return input_ids, torch.tensor(label, dtype=torch.long)\n\nvocab = tokenizer.get_vocab()\npad_idx = tokenizer.pad_token_id\nunk_idx = tokenizer.unk_token_id\n\ntrain_dataset = AGNewsDataset(train_texts, train_labels, tokenizer)\ntest_dataset = AGNewsDataset(test_texts, test_labels, tokenizer)\n\ntrain_dataloader = DataLoader(train_dataset, batch_size=16, shuffle=True)\ntest_dataloader = DataLoader(test_dataset, batch_size=16, shuffle=False)\n</code></pre>"},{"location":"lab5/transformer/#_2","title":"\u4f4d\u7f6e\u7f16\u7801\u5668","text":"<p>\u5728 Transformer \u6a21\u578b\u4e2d\uff0cSelf-Attention \u662f\u65e0\u5e8f\u7684\uff0c\u5b83\u65e0\u6cd5\u611f\u77e5\u8f93\u5165\u5e8f\u5217\u7684\u300c\u4f4d\u7f6e\u4fe1\u606f\u300d\uff0c\u5373\u6bcf\u4e2a token \u5728\u5e8f\u5217\u4e2d\u7684\u5148\u540e\u987a\u5e8f\u3002</p> <p>\u76f8\u6bd4\u4e4b\u4e0b\uff0cRNN\uff08\u901a\u8fc7\u65f6\u95f4\u6b65\uff09\u548c CNN\uff08\u901a\u8fc7\u5c40\u90e8\u611f\u53d7\u91ce\uff09\u5929\u7136\u5c31\u6709\u987a\u5e8f/\u4f4d\u7f6e\u7684\u6982\u5ff5\u3002</p> <p>\u56e0\u6b64\uff0cTransformer \u9700\u8981\u4e3a\u6bcf\u4e2a token embedding \u52a0\u5165\u300c\u4f4d\u7f6e\u4fe1\u606f\u300d\uff0c\u8fd9\u5c31\u662f Positional Encoding \u7684\u4f5c\u7528\u3002</p> <p>\u8bba\u6587\u300aAttention is All You Need\u300b\u4e2d\u63d0\u51fa\u4e86\u5982\u4e0b\u7684\u4f4d\u7f6e\u7f16\u7801\u65b9\u5f0f\uff0c\u4f7f\u7528\u6b63\u5f26\u548c\u4f59\u5f26\u51fd\u6570\u6765\u6784\u9020\u5177\u6709\u4e0d\u540c\u9891\u7387\u7684\u4f4d\u7f6e\u8868\u793a\u3002</p> <p>\u539f\u59cb\u516c\u5f0f\uff1a</p> \\[ PE(pos, 2i) = \\sin\\left( \\frac{pos}{10000^{\\frac{2i}{d_{model}}}} \\right) \\] \\[ PE(pos, 2i+1) = \\cos\\left( \\frac{pos}{10000^{\\frac{2i}{d_{model}}}} \\right) \\] <p>\u5176\u4e2d\uff1a</p> <ul> <li>\\(pos\\)\uff1a\u662f\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\\(\uff080, 1, 2, ..., L-1\uff09\\)</li> <li>\\(i\\)\uff1a\u662f embedding \u7684\u7ef4\u5ea6\u7d22\u5f15\\(\uff080 ~ d_{model}/2\uff09\\)</li> <li>\\(d_{model}\\)\uff1a\u662f embedding \u7684\u603b\u7ef4\u5ea6</li> <li>\\(10000\\)\uff1a\u662f\u4e00\u4e2a\u63a7\u5236\u4e0d\u540c\u7ef4\u5ea6\u7684 \\(sin/cos\\) \u6ce2\u52a8\u9891\u7387\u7684\u8d85\u53c2\u6570</li> </ul> <p>\u516c\u5f0f\u8fdb\u4e00\u6b65\u63a8\u5bfc\uff0c \u539f\u516c\u5f0f\u4e2d\uff1a</p> \\[ \\frac{pos}{10000^{\\frac{2i}{d_{model}}}} \\] <p>\u7b49\u4ef7\u4e8e\uff1a</p> \\[ pos \\times \\frac{1}{10000^{\\frac{2i}{d_{model}}}} \\] <p>\u8fdb\u4e00\u6b65\u5c55\u5f00\u6210\u6307\u6570\u5f62\u5f0f\uff1a</p> \\[ = pos \\times e^{- \\log(10000) \\cdot \\frac{2i}{d_{model}}} \\] <p>\u8bf7\u53c2\u8003\u5c55\u5f00\u540e\u7684\u6307\u6570\u5f62\u5f0f\u8865\u5145\u5b8c\u4e0b\u9762\u7684\u4ee3\u7801\uff1a</p> <pre><code>#\u8fd9\u6bb5\u4ee3\u7801\u662f Transformer\u4e2d\u7684\u4f4d\u7f6e\u7f16\u7801\uff08PositionalEncoding\uff09\uff0c\u7528\u4e8e\u7ed9\u8f93\u5165\u7684 token embedding \u52a0\u5165\u4f4d\u7f6e\u4fe1\u606f\u3002\nclass PositionalEncoding(nn.Module):\n    def __init__(self, d_model, max_len=5000):\n        super().__init__()\n\n        # \u521b\u5efa\u4e00\u4e2a\u51680\u7684\u77e9\u9635\uff0cshape = (max_len, d_model)\n        # \u8868\u793a\u6bcf\u4e2a\u4f4d\u7f6e (0 ~ max_len-1) \u5bf9\u5e94\u7684 d_model \u7ef4\u4f4d\u7f6e\u7f16\u7801\n        pe = torch.zeros(max_len, d_model)\n\n        # \u751f\u6210\u4f4d\u7f6e\u7d22\u5f15\uff0cshape = (max_len, 1)\n        # \u5373 position = [0, 1, 2, ..., max_len-1] \u7684\u5217\u5411\u91cf\n        position = torch.arange(0, max_len).unsqueeze(1)\n\n        # TODO 1: \u8ba1\u7b97 div_term\uff0c\u7528\u4e8e\u63a7\u5236\u4e0d\u540c\u7ef4\u5ea6\u7684 sin/cos \u9891\u7387\n        # \u8981\u6c42: \u4f7f\u7528 torch.exp() \u5b9e\u73b0 1 / 10000^(2i/d_model)\n        div_term = ...\n\n        # TODO 2: \u7ed9\u5076\u6570\u7ef4\u5ea6\u4f4d\u7f6e\u7f16\u7801\u8d4b\u503c\n        # \u8981\u6c42: \u4f7f\u7528 torch.sin() \u5b8c\u6210 position * div_term\uff0c\u8d4b\u503c\u7ed9 pe \u7684\u5076\u6570\u5217\n        pe[:, 0::2] = ...\n\n        # TODO 3: \u7ed9\u5947\u6570\u7ef4\u5ea6\u4f4d\u7f6e\u7f16\u7801\u8d4b\u503c\n        # \u8981\u6c42: \u4f7f\u7528 torch.cos() \u5b8c\u6210 position * div_term\uff0c\u8d4b\u503c\u7ed9 pe \u7684\u5947\u6570\u5217\n        pe[:, 1::2] = ...\n\n        # \u5c06 pe \u6ce8\u518c\u4e3a buffer\uff08\u4e0d\u4f1a\u88ab\u8bad\u7ec3\u4f18\u5316\uff09\n        # \u5e76\u6269\u5c55\u6210 (1, max_len, d_model) \u65b9\u4fbf\u540e\u7eed\u548c batch \u505a\u5e7f\u64ad\n        self.register_buffer('pe', pe.unsqueeze(0))  # shape: (1, max_len, d_model)\n\n    def forward(self, x):\n        # x \u662f\u8f93\u5165\u7684 embedding\uff0cshape = (batch_size, seq_len, d_model)\n\n        # \u5c06\u5bf9\u5e94\u4f4d\u7f6e\u7684 pe \u52a0\u5230 x \u4e0a\n        # self.pe[:, :x.size(1)] shape = (1, seq_len, d_model) \u81ea\u52a8\u5e7f\u64ad\u5230 batch_size\n        x = x + self.pe[:, :x.size(1)]\n\n        # \u8fd4\u56de\u4f4d\u7f6e\u7f16\u7801\u540e\u7684 embedding\n        return x\n</code></pre> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98981\uff1a\u4e3a\u4ec0\u4e48\u9700\u8981\u5bf9\u5076\u6570\u548c\u5947\u6570\u7ef4\u5ea6\u5206\u522b\u4f7f\u7528 sin \u548c cos\uff1f</p>"},{"location":"lab5/transformer/#multi-head-self-attention","title":"Multi-Head Self-Attention \u6a21\u5757","text":"<p>\u4e0b\u9762\u662f\u591a\u5934\u81ea\u6ce8\u610f\u529b\u7684\u5b9e\u73b0\uff0c\u8bf7\u4f60\u6309\u7167\u8981\u6c42\u8865\u5168\u4ee3\u7801\uff1a</p> <pre><code># Multi-Head Self-Attention \u7684\u5b8c\u6574\u5b9e\u73b0\nclass MultiHeadSelfAttention(nn.Module):\n    def __init__(self, d_model, n_heads):\n        super().__init__()\n        # \u4fdd\u8bc1 d_model \u53ef\u4ee5\u88ab n_heads \u6574\u9664\uff0c\u65b9\u4fbf\u5206\u5934\n        assert d_model % n_heads == 0\n        self.d_k = d_model // n_heads # \u6bcf\u4e2a head \u7684\u7279\u5f81\u7ef4\u5ea6\n        self.n_heads = n_heads\n\n        # \u5171\u4eab\u4e00\u4e2a Linear \u5c42\u540c\u65f6\u751f\u6210 Q, K, V\n        self.qkv_linear = nn.Linear(d_model, d_model * 3) # \u8f93\u51fa\u4e3a [Q; K; V]\n\n        # \u8f93\u51fa\u5c42\uff0c\u5c06\u591a\u5934\u7684\u7ed3\u679c\u91cd\u65b0\u6620\u5c04\u56de d_model \u7ef4\u5ea6\n        self.fc = nn.Linear(d_model, d_model)\n\n    def forward(self, x, mask=None):\n        # \u8f93\u5165 x: (batch_size, seq_len, d_model)\n        batch_size, seq_len, d_model = x.size()\n\n        # \u4e00\u6b21\u6027\u8ba1\u7b97 Q\u3001K\u3001V\uff0c\u8f93\u51fa shape = (batch_size, seq_len, 3 * d_model)\n        qkv = self.qkv_linear(x)\n\n        # \u5207\u5206\u6210 n_heads \u4e2a head\uff0c\u51c6\u5907 multi-head attention\n        # shape \u53d8\u4e3a (batch_size, seq_len, n_heads, 3 * d_k)\n        qkv = qkv.view(batch_size, seq_len, self.n_heads, 3 * self.d_k)\n\n        # \u8c03\u6574\u7ef4\u5ea6\u987a\u5e8f\uff0c\u53d8\u6210 (batch_size, n_heads, seq_len, 3 * d_k)\n        qkv = qkv.permute(0, 2, 1, 3)  # (batch_size, n_heads, seq_len, 3*d_k)\n\n        # \u6cbf\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u5207\u6210 Q, K, V\uff0cshape = (batch_size, n_heads, seq_len, d_k)\n        q, k, v = qkv.chunk(3, dim=-1)  # (batch_size, n_heads, seq_len, d_k)\n\n        # TODO 1: \u8ba1\u7b97 attention scores\n        # \u8981\u6c42: \u4f7f\u7528\u7f29\u653e\u70b9\u79ef\u7684\u65b9\u5f0f\u8ba1\u7b97 (Q x K^T)\uff0c\u5e76\u9664\u4ee5 sqrt(d_k)\n        scores = ...\n\n        # mask \u64cd\u4f5c\uff0c\u5c4f\u853d\u6389 padding \u90e8\u5206\n        if mask is not None:\n            scores = scores.masked_fill(mask == 0, -1e9)\n\n        # TODO 2: \u8ba1\u7b97 attention \u6743\u91cd\n        # \u8981\u6c42: \u5728 seq_len \u7ef4\u5ea6\u4e0a\u4f7f\u7528 softmax \u5f52\u4e00\u5316 scores\n        attn = ...\n\n        # TODO 3: \u8ba1\u7b97\u52a0\u6743\u6c42\u548c\u540e\u7684 context\n        # \u8981\u6c42: \u7528 attn \u52a0\u6743 V\uff0c\u5f97\u5230 context\n        context = ...\n\n        # \u5c06\u591a\u5934\u62fc\u63a5\u56de\u53bb\uff0cshape = (batch_size, seq_len, n_heads * d_k) = (batch_size, seq_len, d_model)\n        context = context.transpose(1, 2).contiguous().view(batch_size, seq_len, d_model)\n\n        # \u901a\u8fc7\u8f93\u51fa\u5c42\uff0c\u518d\u6620\u5c04\u56de\u539f\u59cb d_model \u7ef4\u5ea6\n        return self.fc(context)\n</code></pre> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98982\uff1a\u5728 Multi-Head Self-Attention \u673a\u5236\u4e2d\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u4f7f\u7528\u591a\u4e2a attention head\uff1f</p> <p>\u601d\u8003\u98983\uff1a\u4e3a\u4ec0\u4e48\u8981\u7528\u7f29\u653e\u56e0\u5b50 sqrt(d_k)\uff1f</p>"},{"location":"lab5/transformer/#transformerencoderlayer","title":"TransformerEncoderLayer","text":"<p>\u4e0b\u9762\u7684\u4ee3\u7801\u5b9e\u73b0\u4e86 Transformer \u7f16\u7801\u5668\u4e2d\u7684\u4e00\u4e2a\u6807\u51c6 Encoder Layer\uff0c\u5305\u542b\uff1a</p> <p>\u201c\u591a\u5934\u81ea\u6ce8\u610f\u529b + \u524d\u9988\u7f51\u7edc + \u4e24\u6b21\u6b8b\u5dee\u8fde\u63a5 + \u4e24\u6b21 LayerNorm\u201d \u7684\u7ed3\u6784\uff0c\u7528\u4e8e\u5bf9\u8f93\u5165\u5e8f\u5217\u8fdb\u884c\u7279\u5f81\u5efa\u6a21\u548c\u4e0a\u4e0b\u6587\u4fe1\u606f\u878d\u5408\u3002</p> <p>\u8bf7\u4f60\u6309\u7167\u8981\u6c42\u8865\u5168\u4ee3\u7801\uff1a</p> <pre><code>class TransformerEncoderLayer(nn.Module):\n    def __init__(self, d_model, n_heads, d_ff):\n        super().__init__()\n\n        # \u591a\u5934\u81ea\u6ce8\u610f\u529b\u6a21\u5757\uff0c\u8f93\u5165\u8f93\u51fa\u7ef4\u5ea6\u90fd\u662f d_model\n        self.self_attn = MultiHeadSelfAttention(d_model, n_heads)\n\n        # \u524d\u9988\u5168\u8fde\u63a5\u5c42\uff0c\u5305\u542b\u4e24\u5c42\u7ebf\u6027 + ReLU\n        self.ff = nn.Sequential(\n            nn.Linear(d_model, d_ff),\n            nn.ReLU(),\n            nn.Linear(d_ff, d_model)\n        )\n\n        # \u7b2c\u4e00\u5c42 LayerNorm\uff0c\u4f5c\u7528\u5728\u81ea\u6ce8\u610f\u529b\u7684\u6b8b\u5dee\u8fde\u63a5\u4e4b\u540e\n        self.norm1 = nn.LayerNorm(d_model)\n        # \u7b2c\u4e8c\u5c42 LayerNorm\uff0c\u4f5c\u7528\u5728\u524d\u9988\u7f51\u7edc\u7684\u6b8b\u5dee\u8fde\u63a5\u4e4b\u540e\n        self.norm2 = nn.LayerNorm(d_model)\n\n    def forward(self, x, mask=None):\n        # ------------------ \u81ea\u6ce8\u610f\u529b\u5757 ------------------ #\n\n        # TODO 1: \u8ba1\u7b97\u591a\u5934\u81ea\u6ce8\u610f\u529b\u8f93\u51fa x2\n        x2 = ...\n\n        # TODO 2: \u6b8b\u5dee\u8fde\u63a5 + \u7b2c\u4e00\u5c42 LayerNorm\n        x = ...\n\n        # ------------------ \u524d\u9988\u795e\u7ecf\u7f51\u7edc\u5757 ------------------ #\n\n        # TODO 3: \u524d\u9988\u5168\u8fde\u63a5\u7f51\u7edc\uff08\u4e24\u5c42 Linear + ReLU\uff09\u5f97\u5230 x2\n        x2 = ...\n\n        # TODO 4: \u6b8b\u5dee\u8fde\u63a5 + \u7b2c\u4e8c\u5c42 LayerNorm\n        x = ...\n\n\n        return x\n</code></pre> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98984\uff1a\u4e3a\u4ec0\u4e48 Transformer Encoder Layer \u4e2d\u8981\u5728 Self-Attention \u548c Feed Forward Network \u4e4b\u540e\u90fd\u4f7f\u7528\u6b8b\u5dee\u8fde\u63a5\u548c LayerNorm\uff1f\u8bd5\u4ece\u201c\u6a21\u578b\u8bad\u7ec3\u7a33\u5b9a\u6027\u201d\u548c\u201c\u7279\u5f81\u4f20\u9012\u201d\u4e24\u4e2a\u89d2\u5ea6\u8fdb\u884c\u5206\u6790\u3002</p>"},{"location":"lab5/transformer/#2-transformer-encoder","title":"2. \u57fa\u4e8e Transformer Encoder \u7684\u6587\u672c\u5206\u7c7b\u5668","text":"<p>\u4e0b\u9762\uff0c\u6211\u4eec\u5b9e\u73b0\u4e00\u4e2a\u57fa\u4e8e Transformer Encoder \u7684\u6587\u672c\u5206\u7c7b\u5668\uff0c\u901a\u8fc7 embedding\u3001\u4f4d\u7f6e\u7f16\u7801\u3001\u591a\u5c42 encoder \u5904\u7406\u8f93\u5165\u5e8f\u5217\uff0c\u6700\u7ec8\u4f7f\u7528 mean pooling \u548c\u5168\u8fde\u63a5\u5c42\u5b8c\u6210\u6587\u672c\u7684\u591a\u7c7b\u522b\u5206\u7c7b\u4efb\u52a1\u3002</p> <pre><code>class TransformerEncoderClassifier(nn.Module):\n    def __init__(self, vocab_size, d_model=128, n_heads=4, d_ff=256, num_layers=2, num_classes=4):\n        super().__init__()\n\n        # 1. \u5b9a\u4e49\u8bcd\u5d4c\u5165\u5c42\uff08Embedding\uff09\uff0c\u8f93\u5165\u4e3a\u8bcd\u8868\u5927\u5c0f\uff0c\u8f93\u51fa\u4e3a d_model \u7ef4\n        # padding_idx \u7528\u4e8e\u6307\u5b9a padding token \u7684\u7d22\u5f15\uff0c\u907f\u514d\u5176\u88ab\u8bad\u7ec3\n        self.embedding = nn.Embedding(vocab_size, d_model, padding_idx=pad_idx)\n\n        # 2. \u5b9a\u4e49\u4f4d\u7f6e\u7f16\u7801\u5668\uff0c\u4e3a token embedding \u6dfb\u52a0\u4f4d\u7f6e\u4fe1\u606f\n        self.pos_encoder = PositionalEncoding(d_model)\n\n        # 3. \u5b9a\u4e49\u591a\u4e2a TransformerEncoderLayer \u53e0\u52a0\u8d77\u6765\uff0cnum_layers \u4e3a\u5c42\u6570\n        self.layers = nn.ModuleList([TransformerEncoderLayer(d_model, n_heads, d_ff) for _ in range(num_layers)])\n\n        # 4. \u5b9a\u4e49\u8f93\u51fa\u5206\u7c7b\u5c42\uff0c\u5c06 encoder \u6700\u7ec8\u8f93\u51fa\u6620\u5c04\u5230 num_classes \u7ef4\u5ea6\n        self.fc = nn.Linear(d_model, num_classes)\n\n    def forward(self, x):\n        # x shape: (batch_size, seq_len)\uff0c\u8f93\u5165\u4e3a\u5355\u8bcd ID \u5e8f\u5217\n\n        # 1. \u8f93\u5165 token ID \u901a\u8fc7 Embedding\uff0c\u8f6c\u6210 (batch_size, seq_len, d_model) \u7684 dense \u5411\u91cf\n        x = self.embedding(x)  # (batch_size, seq_len, d_model)\n\n        # 2. \u52a0\u5165\u4f4d\u7f6e\u7f16\u7801\uff0c\u589e\u5f3a\u4f4d\u7f6e\u611f\u77e5\u80fd\u529b\n        x = self.pos_encoder(x)\n\n        # 3. \u521b\u5efa padding mask\uff0cshape: (batch_size, 1, 1, seq_len)\n        # mask = True \u4ee3\u8868\u6709\u6548 token\uff0cFalse \u4ee3\u8868 padding \u4f4d\u7f6e\n        pad_mask = (x.sum(-1) != 0).unsqueeze(1).unsqueeze(2)  # (batch_size, 1, 1, seq_len)\n\n        # 4. \u4f9d\u6b21\u901a\u8fc7\u591a\u5c42 Encoder\uff0c\u6bcf\u4e00\u5c42\u90fd\u4f1a\u4f7f\u7528 pad_mask\n        for layer in self.layers:\n            x = layer(x, pad_mask)\n\n        # 5. \u5bf9\u65f6\u95f4\u7ef4\u5ea6\uff08seq_len\uff09\u505a mean pooling\uff0c\u805a\u5408\u6240\u6709\u4f4d\u7f6e\u7684\u7279\u5f81\n        out = x.mean(dim=1)  # mean pooling on seq_len\n\n        # 6. \u5206\u7c7b\u8f93\u51fa\uff0c\u6620\u5c04\u5230\u7c7b\u522b\u6570\n        return self.fc(out)\n</code></pre> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98985\uff1a\u4e3a\u4ec0\u4e48\u5728 TransformerEncoderClassifier \u4e2d\uff0c\u901a\u5e38\u4f1a\u5728 Encoder \u7684\u8f93\u51fa\u4e0a\u505a mean pooling\uff08\u5bf9 seq_len \u53d6\u5e73\u5747\uff09\uff1f\u9664\u4e86 mean pooling\uff0c\u4f60\u80fd\u5426\u60f3\u5230\u5176\u4ed6\u53ef\u4ee5\u66ff\u4ee3\u7684 pooling \u6216\u7279\u5f81\u805a\u5408\u65b9\u5f0f\uff1f\u5e76\u7b80\u8981\u5206\u6790\u5b83\u4eec\u7684\u4f18\u7f3a\u70b9\u3002</p> <p>\u4e0b\u9762\u662f\u6a21\u578b\u7684\u8bad\u7ec3\u548c\u6d4b\u8bd5:</p> <pre><code># \u4f7f\u7528 split \u8fdb\u884c\u5206\u8bcd\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel = TransformerEncoderClassifier(len(vocab)).to(device)\noptimizer = optim.Adam(model.parameters(), lr=1e-3)\ncriterion = nn.CrossEntropyLoss()\n</code></pre> <p>\u6a21\u578b\u8bad\u7ec3\u90e8\u5206\uff1a</p> <pre><code>def train_epoch():\n    model.train()\n    total_loss = 0\n    loop = tqdm(train_dataloader, desc=\"Training\", leave=False)\n    for text, labels in loop:\n        text, labels = text.to(device), labels.to(device)\n        optimizer.zero_grad()\n        output = model(text)\n        loss = criterion(output, labels)\n        loss.backward()\n        optimizer.step()\n        total_loss += loss.item()\n\n        # \u66f4\u65b0tqdm\u8fdb\u5ea6\u6761\n        loop.set_postfix(loss=loss.item())\n    return total_loss / len(train_dataloader)\n</code></pre> <p>\u6a21\u578b\u6d4b\u8bd5\u90e8\u5206\uff1a</p> <pre><code>def evaluate():\n    model.eval()\n    correct = 0\n    total = 0\n    loop = tqdm(test_dataloader, desc=\"Evaluating\", leave=False)\n    with torch.no_grad():\n        for text, labels in loop:\n            text, labels = text.to(device), labels.to(device)\n            output = model(text)\n            preds = output.argmax(dim=1)\n            correct += (preds == labels).sum().item()\n            total += labels.size(0)\n    return correct / total\n\n\nfor epoch in range(1, 6):\n    loss = train_epoch()\n    acc = evaluate()\n    print(f'Epoch {epoch}: Loss = {loss:.4f}, Test Acc = {acc:.4f}')\n</code></pre> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98986\uff1aTransformer \u76f8\u6bd4\u4f20\u7edf\u7684 RNN/CNN\uff0c\u4f18\u52bf\u5728\u54ea\u91cc\uff1f\u4e3a\u4ec0\u4e48 Transformer \u66f4\u9002\u5408\u5904\u7406\u957f\u6587\u672c\uff1f</p>"},{"location":"lab5/%E5%AE%9E%E9%AA%8C%E4%BA%94%E4%BB%8B%E7%BB%8D/","title":"\u5b9e\u9a8c\u4e94\uff1aTransformer\u4e0e\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b","text":""},{"location":"lab5/%E5%AE%9E%E9%AA%8C%E4%BA%94%E4%BB%8B%E7%BB%8D/#_1","title":"\u5f00\u59cb\u4e4b\u524d","text":"<p>\u6211\u4eec\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\u4f7f\u7528Jupyter Notebook\u8fdb\u884c\u5b9e\u9a8c\uff0c\u8bf7\u53c2\u8003Jupyter Notebook\u4f7f\u7528\uff0c\u6309\u7167\u6587\u6863\u4e2d\u8be6\u7ec6\u6b65\u9aa4\u8fdb\u884c\u64cd\u4f5c\uff0c\u5b8c\u6210Jupyter Notebook\u7684\u914d\u7f6e\u3002</p>"},{"location":"lab5/%E5%AE%9E%E9%AA%8C%E4%BA%94%E4%BB%8B%E7%BB%8D/#_2","title":"\u5b9e\u9a8c\u4efb\u52a1","text":"<p>\u672c\u6b21\u5b9e\u9a8c\u5206\u4e3a\u4e24\u4e2a\u4efb\u52a1\uff1aTransformer\uff08\u7ea690\u5206\u949f\uff09\u548cBert\u6587\u672c\u5206\u7c7b\u5b9e\u9a8c\uff08\u7ea660\u5206\u949f\uff09\u3002</p>"},{"location":"lab5/%E5%AE%9E%E9%AA%8C%E4%BA%94%E4%BB%8B%E7%BB%8D/#transformer_1","title":"\u4efb\u52a1\u4e00\uff1aTransformer","text":"<p>\u4e0b\u8f7d\u4efb\u52a1\u4e00\u4ee3\u7801</p> <p>\u5728\u8fd9\u4e2a\u4efb\u52a1\u4e2d\uff0c\u4f60\u5c06\uff1a</p> <ol> <li>\u4e86\u89e3\u4f4d\u7f6e\u7f16\u7801</li> <li>\u4e86\u89e3\u591a\u5934\u81ea\u6ce8\u610f\u529b\u673a\u5236\u539f\u7406\u4e0e\u5b9e\u73b0</li> <li>\u638c\u63e1Transformer\u7f16\u7801\u5668\u7ed3\u6784</li> <li>\u4e86\u89e3Transformer Encoder\u7684\u5806\u53e0\u4e0e\u6a21\u5757\u5316\u8bbe\u8ba1</li> </ol> <p>\u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a</p> <ul> <li>\u4f4d\u7f6e\u7f16\u7801\u7684\u57fa\u672c\u539f\u7406</li> <li>\u63a2\u7d22\u591a\u5934\u81ea\u6ce8\u610f\u529b\u673a\u5236\u539f\u7406\u4e0e\u5b9e\u73b0</li> <li>\u4f7f\u7528Transformer Encoder\u8bbe\u8ba1\u4e00\u4e2a\u6587\u672c\u5206\u7c7b\u6a21\u578b</li> <li>\u6a21\u578b\u8bad\u7ec3\u4e0e\u8bc4\u4f30</li> <li>\u601d\u8003\u9898\u8ba8\u8bba</li> </ul> <p>\u901a\u8fc7\u672c\u4efb\u52a1\uff0c\u4f60\u5c06\u638c\u63e1\u4f4d\u7f6e\u7f16\u7801\u7684\u57fa\u672c\u539f\u7406\uff0c\u4e86\u89e3\u591a\u5934\u81ea\u6ce8\u610f\u529b\u673a\u5236\u539f\u7406\u4e0e\u5b9e\u73b0\uff0c\u5e76\u80fd\u591f\u5728PyTorch\u6846\u67b6\u4e0b\u4f7f\u7528Transformer Encoder\u8bbe\u8ba1\u8bad\u7ec3\u4e00\u4e2a\u6587\u672c\u5206\u7c7b\u6a21\u578b\u3002</p>"},{"location":"lab5/%E5%AE%9E%E9%AA%8C%E4%BA%94%E4%BB%8B%E7%BB%8D/#_3","title":"\u4efb\u52a1\u4e8c\uff1a\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b","text":"<p>\u4e0b\u8f7d\u4efb\u52a1\u4e8c\u4ee3\u7801</p> <p>\u5728\u8fd9\u4e2a\u4efb\u52a1\u4e2d\uff0c\u4f60\u5c06\uff1a</p> <ol> <li>\u4f7f\u7528GPU\u8bad\u7ec3\u6a21\u578b</li> <li>\u4e86\u89e3\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b</li> <li>\u4f7f\u7528\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u8fdb\u884c\u6587\u672c\u5206\u7c7b</li> </ol> <p>\u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a</p> <ul> <li>\u4f7f\u7528GPU\u8bad\u7ec3\u6a21\u578b</li> <li>\u4e86\u89e3\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b</li> <li>\u4f7f\u7528\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u8fdb\u884c\u5206\u7c7b</li> <li>\u601d\u8003\u9898\u8ba8\u8bba</li> </ul> <p>\u901a\u8fc7\u672c\u4efb\u52a1\uff0c\u4f60\u5c06\u638c\u63e1\u4f7f\u7528GPU\u8bad\u7ec3\u6a21\u578b\uff0c\u4e86\u89e3\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\uff0c\u5e76\u80fd\u591f\u4f7f\u7528\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u8fdb\u884c\u5206\u7c7b\u3002</p>"},{"location":"lab5/%E5%AE%9E%E9%AA%8C%E4%BA%94%E4%BB%8B%E7%BB%8D/#_4","title":"\u5b9e\u9a8c\u63d0\u4ea4","text":"<p>\u5b9e\u9a8c\u5b8c\u6210\u540e\uff0c\u8bf7\u63d0\u4ea4\u4ee5\u4e0b\u6750\u6599\uff1a</p> <ol> <li>\u8fd0\u884c\u6210\u529f\u7684Jupyter Notebook\u6587\u4ef6</li> <li>\u4e00\u4efdPDF\u62a5\u544a\uff0c\u62a5\u544a\u5185\u5bb9\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a<ol> <li>\u4efb\u52a1\u4e2d\u7684\u586b\u5145\u4ee3\u7801\u548c\u76f8\u5e94\u5b9e\u9a8c\u7ed3\u679c</li> <li>\u5b9e\u9a8c\u4e94\u601d\u8003\u9898\u7b54\u6848</li> <li>\u5b9e\u9a8c\u5fc3\u5f97\u4e0e\u4f53\u4f1a</li> </ol> </li> </ol>"},{"location":"lab5/%E5%AE%9E%E9%AA%8C%E4%BA%94%E4%BB%8B%E7%BB%8D/#_5","title":"\u63d0\u4ea4\u8bf4\u660e","text":"<ol> <li>\u672c\u6b21\u63d0\u4ea4\u7684\u5185\u5bb9\u4e3a: \u5b9e\u9a8c\u4e94\u8981\u6c42\u63d0\u4ea4\u7684\u5185\u5bb9\uff0c\u5177\u4f53\u8981\u6c42\u8bf7\u53c2\u89c1\u5b9e\u9a8c\u7f51\u7ad9\uff08https://zhiweinju.github.io/nju-dl-lab-2025spring/\uff09</li> <li>\u63d0\u4ea4\u7684\u62a5\u544a\u6587\u4ef6\u8bf7\u4ee5PDF\u6587\u4ef6\u683c\u5f0f\u4e0a\u4f20\u5230selearning\u7f51\u7ad9\uff0c\u4e0a\u4f20\u6587\u4ef6\u7684\u6587\u4ef6\u547d\u540d\u683c\u5f0f\u4e3a: \u5b66\u53f7_\u59d3\u540d_\u5b9e\u9a8c\u4e94.pdf\uff0c\u6bd4\u5982\uff1a123456789_\u5f20\u4e09_\u5b9e\u9a8c\u4e94.pdf</li> <li>\u5176\u4ed6\u63d0\u4ea4\u6587\u4ef6\uff08\u5982 \u8fd0\u884c\u6210\u529f\u7684Jupyter Notebook\u6587\u4ef6\uff09\uff0c\u8bf7\u52a0\u4e0a\u524d\u7f00: \u5b66\u53f7_\u59d3\u540d_\uff0c\u6bd4\u5982: 123456789_\u5f20\u4e09_lab5.ipynb</li> <li>\u672c\u6b21\u63d0\u4ea4\u7684\u622a\u6b62\u65f6\u95f4\u4e3a 3\u670828\u65e523:59:59</li> <li>\u5bf9\u4e8e\u8fdf\u4ea4\u7684\u5904\u7406: \u8fdf\u4ea4\u4e00\u5468\u4ee5\u5185\uff0c\u6298\u6263\u7cfb\u6570\u4e3a0.8\uff0c\u8fdf\u4ea4\u8d85\u8fc7\u4e00\u5468\uff0c\u6298\u6263\u7cfb\u6570\u4e3a0.6\uff0c\u8d85\u8fc7\u4e00\u4e2a\u6708\u505c\u6b62\u63a5\u6536\u63d0\u4ea4\uff0c\u5c1a\u672a\u63d0\u4ea4\u8005\u672c\u6b21\u4f5c\u4e1a\u8ba10\u5206</li> </ol>"},{"location":"lab5/%E8%AF%8D%E5%B5%8C%E5%85%A5/","title":"\u5b9e\u9a8c\u4efb\u52a1\u4e8c\uff1a \u8bcd\u5d4c\u5165","text":""},{"location":"lab5/%E8%AF%8D%E5%B5%8C%E5%85%A5/#_2","title":"\u8bcd\u5d4c\u5165","text":"<p>\u5b9e\u9a8c\u76ee\u6807</p> <p>\u901a\u8fc7\u672c\u6b21\u5b9e\u9a8c\uff0c\u4f60\u5c06\u638c\u63e1\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <ol> <li>\u8ba4\u8bc6\u8bcd\u5d4c\u5165\u3002</li> <li>\u4eceGlove\u8bcd\u5d4c\u5165\u4e2d\uff0c\u63a2\u7d22\u4e00\u4e9b\u8bcd\u5d4c\u5165\u7684\u57fa\u672c\u6027\u8d28\u3002</li> <li>\u5229\u7528\u8bcd\u5d4c\u5165\u8fdb\u884c\u6587\u672c\u5206\u7c7b\u3002</li> </ol>"},{"location":"lab5/%E8%AF%8D%E5%B5%8C%E5%85%A5/#1","title":"1. \u8bcd\u5d4c\u5165","text":"<p>\u8bcd\u5d4c\u5165\u7b80\u4ecb</p> <p>\u8bcd\u5d4c\u5165\u662f\u6307\u7528\u4e00\u4e2a\u4f4e\u7ef4\u5411\u91cf\u6765\u8868\u793a\u5355\u8bcd\u3002\u8bcd\u5d4c\u5165\u88ab\u7528\u4f5c\u81ea\u7136\u8bed\u8a00\u5904\u7406\u4efb\u52a1\uff08\u5982\u60c5\u611f\u5206\u7c7b\u3001\u95ee\u7b54\u3001\u7ffb\u8bd1\u7b49\uff09\u7684\u57fa\u672c\u7ec4\u6210\u90e8\u5206\u3002\u56e0\u6b64\uff0c\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u4e86\u89e3\u8bcd\u5d4c\u5165\u7684\u6784\u9020\u5e76\u4e14\u76f4\u89c2\u611f\u53d7\u8bcd\u5d4c\u5165\u3002</p> <p>\u672c\u6b21\u5b9e\u9a8c\u6240\u7528\u7684\u8bcd\u5d4c\u5165\u548c\u6570\u636e\u96c6\u4e0b\u8f7d\u94fe\u63a5\u5982\u4e0b\uff1a  </p>"},{"location":"lab5/%E8%AF%8D%E5%B5%8C%E5%85%A5/#_3","title":"\u8bcd\u5d4c\u5165\u4e0b\u8f7d\u94fe\u63a5\uff1a","text":"<p>https://box.nju.edu.cn/d/591925358e264f3b9a75/</p>"},{"location":"lab5/%E8%AF%8D%E5%B5%8C%E5%85%A5/#ag","title":"ag\u6570\u636e\u4e0b\u8f7d\u94fe\u63a5\uff1a","text":"<p>https://box.nju.edu.cn/f/7d3e4fce48fb446884c9/?dl=1</p>"},{"location":"lab5/%E8%AF%8D%E5%B5%8C%E5%85%A5/#2","title":"2. \u63a2\u7d22\u8bcd\u5d4c\u5165","text":"<p>\u5728\u672c\u8282\uff0c\u6211\u4eec\u5c06\u57fa\u4e8e\u8bad\u7ec3\u597d\u7684Glove\u8bcd\u5d4c\u5165(\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u884cgoogle Glove\u7684\u8bba\u6587\uff0cGloVe: Global Vectors for Word Representation)\u8fdb\u884c\u4e00\u4e9b\u521d\u6b65\u63a2\u7d22\u3002\u9996\u5148\u52a0\u8f7dGlove\u8bcd\u5d4c\u5165</p> <pre><code>import numpy as np\n\ndef load_glove_embeddings(glove_file, embedding_dim=50):\n    \"\"\"\n    \u8bfb\u53d6 GloVe \u8bcd\u5411\u91cf\u6587\u4ef6\uff0c\u5e76\u8fd4\u56de\uff1a\n    - word_to_vec: \u5355\u8bcd\u5230\u5411\u91cf\u7684\u6620\u5c04\n    - word_to_index: \u5355\u8bcd\u5230\u7d22\u5f15\u7684\u6620\u5c04\n    - index_to_word: \u7d22\u5f15\u5230\u5355\u8bcd\u7684\u6620\u5c04\n    - embedding_matrix: \u8bcd\u5d4c\u5165\u77e9\u9635\n    \"\"\"\n    word_to_vec = {}\n    word_to_index = {}\n    index_to_word = {}\n\n    # \u8bfb\u53d6 GloVe \u8bcd\u5411\u91cf\u6587\u4ef6\n    with open(glove_file, 'r', encoding='utf-8') as f:\n        for idx, line in enumerate(f):\n            values = line.strip().split()\n            word = values[0]  # \u53d6\u51fa\u5355\u8bcd\n            vector = np.array(values[1:], dtype=np.float32)  # \u53d6\u51fa\u5411\u91cf\n            word_to_vec[word] = vector\n            word_to_index[word] = idx + 1  # \u4ece1\u5f00\u59cb\u7f16\u53f7\n            index_to_word[idx + 1] = word\n\n    # \u521b\u5efa\u5d4c\u5165\u77e9\u9635 (\u8bcd\u6c47\u5927\u5c0f x \u7ef4\u5ea6)\n    vocab_size = len(word_to_vec) + 1  # +1 \u662f\u56e0\u4e3a\u4ece1\u5f00\u59cb\u7f16\u53f7\n    embedding_matrix = np.zeros((vocab_size, embedding_dim), dtype=np.float32)\n\n    for word, idx in word_to_index.items():\n        embedding_matrix[idx] = word_to_vec[word]\n\n    return word_to_vec, word_to_index, index_to_word, embedding_matrix\n\n# \u4f7f\u7528\u793a\u4f8b\uff08\u8bf7\u66ff\u6362 'glove.6B.50d.txt' \u4e3a\u4f60\u7684GloVe\u6587\u4ef6\u8def\u5f84\uff09\nglove_path = \"glove.6B.50d.txt\"\nword_to_vec, word_to_index, index_to_word, embedding_matrix = load_glove_embeddings(glove_path)\n# \u793a\u4f8b\uff1a\u67e5\u770b 'king' \u7684\u8bcd\u5411\u91cf\nprint(\"king \u7684\u8bcd\u5411\u91cf\uff1a\", word_to_vec.get(\"king\"))\n</code></pre>"},{"location":"lab5/%E8%AF%8D%E5%B5%8C%E5%85%A5/#21","title":"2.1 \u5bfb\u627e\u76f8\u4f3c\u7684\u8bcd","text":"<p>\u8bf7\u5728\u8bcd\u6c47\u8868\u4e2d\u5bfb\u627e\u8ddfking\u6700\u76f8\u4f3c\u768410\u4e2a\u5355\u8bcd\u5e76\u6253\u5370\u8fd9\u4e24\u4e2a\u5355\u8bcd\u95f4\u7684\u76f8\u4f3c\u5ea6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4f59\u5f26\u76f8\u4f3c\u5ea6\u5ea6\u91cf\u4e24\u4e2a\u5355\u8bcd\u7684\u76f8\u4f3c\u6027\u3002</p> <pre><code>import numpy as np\nfrom scipy.spatial.distance import cosine\n\ndef find_top_similar_words(target_word, word_to_vec, top_n=5):\n    \"\"\"\n    \u627e\u5230\u79bb target_word \u6700\u8fd1\u7684 top_n \u4e2a\u5355\u8bcd\uff08\u57fa\u4e8e\u4f59\u5f26\u76f8\u4f3c\u5ea6\uff09\n\n    :param target_word: \u76ee\u6807\u5355\u8bcd\n    :param word_to_vec: \u8bcd\u5411\u91cf\u5b57\u5178 {word: vector}\n    :param top_n: \u8fd4\u56de\u6700\u76f8\u8fd1\u7684\u5355\u8bcd\u6570\n    :return: [(word, similarity)] \u6392\u5e8f\u540e\u7684\u5217\u8868\n    \"\"\"\n\n\n    return similarities[:top_n]\n\n# \u67e5\u627e \"king\" \u6700\u76f8\u4f3c\u7684 20 \u4e2a\u5355\u8bcd\ntop_words = find_top_similar_words(\"king\", word_to_vec, top_n=5)\n\n# \u6253\u5370\u7ed3\u679c\nfor word, sim in top_words:\n    print(f\"{word}: {sim:.4f}\")\n</code></pre>"},{"location":"lab5/%E8%AF%8D%E5%B5%8C%E5%85%A5/#22","title":"2.2 \u591a\u4e49\u8bcd","text":"<p>\u6709\u4e00\u4e9b\u8bcd\u5f80\u5f80\u5177\u6709\u591a\u4e2a\u610f\u601d\u6bd4\u5982\u82f9\u679c\u3002\u8bf7\u5148\u601d\u8003\u4e00\u4e2a\u591a\u4e49\u8bcd\uff0c\u5e76\u4e14\u4f7f\u7528Glove\u8bcd\u5d4c\u5165\u8fdb\u884c\u9a8c\u8bc1\u3002\u5373Glove\u4e2d\u4e0e\u5176\u6700\u76f8\u4f3c\u768420\u4e2a\u5355\u8bcd\u4e2d\u662f\u5426\u5305\u542b\u8fd9\u4e24\u4e2a\u610f\u601d\u7684\u76f8\u5173\u5355\u8bcd\u3002\u6700\u540e\uff0c\u8bf7\u7ed9\u51fa\u8fd9\u4e2a\u5355\u8bcd\u5e76\u4e14\u6253\u5370\u8ddf\u5176\u6700\u76f8\u4f3c\u768420\u4e2a\u5355\u8bcd\u7684\u76f8\u4f3c\u5ea6\u3002</p> <pre><code>import numpy as np\nfrom scipy.spatial.distance import cosine\n\ndef find_top_similar_words(target_word, word_to_vec, top_n=5):\n    \"\"\"\n    \u627e\u5230\u79bb target_word \u6700\u8fd1\u7684 top_n \u4e2a\u5355\u8bcd\uff08\u57fa\u4e8e\u4f59\u5f26\u76f8\u4f3c\u5ea6\uff09\n\n    :param target_word: \u76ee\u6807\u5355\u8bcd\n    :param word_to_vec: \u8bcd\u5411\u91cf\u5b57\u5178 {word: vector}\n    :param top_n: \u8fd4\u56de\u6700\u76f8\u8fd1\u7684\u5355\u8bcd\u6570\n    :return: [(word, similarity)] \u6392\u5e8f\u540e\u7684\u5217\u8868\n    \"\"\"\n\n\n    return similarities[:top_n]\n\n# \u67e5\u627e \"king\" \u6700\u76f8\u4f3c\u7684 20 \u4e2a\u5355\u8bcd\ntop_words = find_top_similar_words(\"king\", word_to_vec, top_n=20)\n\n# \u6253\u5370\u7ed3\u679c\nfor word, sim in top_words:\n    print(f\"{word}: {sim:.4f}\")\n</code></pre>"},{"location":"lab5/%E8%AF%8D%E5%B5%8C%E5%85%A5/#23","title":"2.3 \u4f7f\u7528\u8bcd\u5d4c\u5165\u8868\u793a\u5173\u7cfb(\u7c7b\u6bd4)","text":"<p>\u6709\u4e00\u4e2a\u8457\u540d\u7684\u4f8b\u5b50\u662f: \u56fd\u738b\u7684\u8bcd\u5d4c\u5165-\u7537\u4eba\u7684\u8bcd\u5d4c\u5165\u7ea6\u7b49\u4e8e\u5973\u738b\u7684\u8bcd\u5d4c\u5165-\u5973\u4eba\u7684\u8bcd\u5d4c\u5165\uff0c\u5373embedding(\u56fd\u738b)-embedding(\u7537\u4eba)\u2248embedding(\u5973\u738b)-embedding(\u5973\u4eba)\u3002</p> <p>\u57fa\u4e8e\u8fd9\u4e2a\u6848\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u7528embedding(china)-embedding(beijing)\u5b9a\u4e49\u9996\u90fd\u7684\u5173\u7cfb\u3002\u8bf7\u57fa\u4e8e\u4e2d\u56fd-\u5317\u4eac\u7684\u5f97\u5230\u7684\u9996\u90fd\u5173\u7cfb\u5411\u91cf\uff0c\u627e\u51fa\u82f1\u56fd\u7684\u9996\u90fd\u3002\u82f1\u56fd\u4f7f\u75282\u4e2a\u5355\u8bcdengland\u548cbritain\u8fdb\u884c\u63a2\u7d22\uff0c\u5e76\u4e14\u6253\u5370\u51fa\u76f8\u4f3c\u5ea6\u6700\u9ad8\u768410\u4e2a\u5355\u8bcd\u3002\u518d\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u627e\u51fa\u4f26\u6566(london)\u4e3a\u9996\u90fd\u5bf9\u5e94\u7684\u56fd\u5bb6\u3002 <pre><code>import numpy as np\nfrom scipy.spatial.distance import cosine\n\ndef find_top_similar_embeddings(target_embedding, word_to_vec, top_n=10):\n    \"\"\"\n    \u6839\u636e\u4e00\u4e2a\u8bcd\u5411\u91cf\uff0c\u627e\u5230\u6700\u76f8\u4f3c\u7684 top_n \u4e2a\u5355\u8bcd\uff08\u57fa\u4e8e\u4f59\u5f26\u76f8\u4f3c\u5ea6\uff09\n\n    :param target_embedding: \u76ee\u6807\u8bcd\u5411\u91cf (numpy \u6570\u7ec4)\n    :param word_to_vec: \u8bcd\u5411\u91cf\u5b57\u5178 {word: vector}\n    :param top_n: \u8fd4\u56de\u6700\u76f8\u8fd1\u7684\u5355\u8bcd\u6570\n    :return: [(word, similarity)] \u6392\u5e8f\u540e\u7684\u5217\u8868\n    \"\"\"\n    similarities = []\n\n    # \u904d\u5386\u6240\u6709\u5355\u8bcd\uff0c\u8ba1\u7b97\u4f59\u5f26\u76f8\u4f3c\u5ea6\n    for word, vec in word_to_vec.items():\n        similarity = 1 - cosine(target_embedding, vec)  # \u4f59\u5f26\u76f8\u4f3c\u5ea6\n        similarities.append((word, similarity))\n\n    # \u6309\u76f8\u4f3c\u5ea6\u6392\u5e8f\uff08\u964d\u5e8f\uff09\n    similarities.sort(key=lambda x: x[1], reverse=True)\n\n    return similarities[:top_n]\n#  \u83b7\u5f97\u4ee5\u4e0b\u5355\u8bcd\u7684\u8bcd\u5d4c\u5165\nengland_, china_, beijing_ = word_to_vec.get(\"england\"), word_to_vec.get(\"china\"),  word_to_vec.get(\"beijing\")\n</code></pre></p>"},{"location":"lab5/%E8%AF%8D%E5%B5%8C%E5%85%A5/#24","title":"2.4 \u8bcd\u5d4c\u5165\u7684\u4e0d\u8db3","text":"<p>\u8bf7\u53d9\u8ff0glove\u8bcd\u5d4c\u5165\u7684\u4e0d\u8db3\u3002\u8a00\u4e4b\u6709\u7406\u5373\u53ef\uff0c\u4f46\u907f\u514d\u51fa\u73b0\u4e00\u4e9b\u6bd4\u8f83\u5927\u7684\u9610\u8ff0\u4e14\u6ca1\u6709\u5206\u6790\uff0c\u5982\u6027\u80fd\u4e00\u822c\uff0c\u8bad\u7ec3\u8bed\u6599\u8f83\u5c11\u7b49\u3002</p>"},{"location":"lab5/%E8%AF%8D%E5%B5%8C%E5%85%A5/#3","title":"3. \u4f7f\u7528\u8bcd\u5d4c\u5165\u8fdb\u884c\u6587\u672c\u5206\u7c7b","text":"<p>\u6211\u4eec\u63a5\u4e0b\u6765\u5c06\u57fa\u4e8eGlove\u8bcd\u5d4c\u5165\u5bf9AG News\u6570\u636e\u96c6\u8fdb\u884c\u6587\u672c\u5206\u7c7b\u3002</p> <p>AG News \u6570\u636e\u96c6\u7b80\u4ecb</p> <p>AG News \u6570\u636e\u96c6\u6765\u6e90\u4e8e AG's corpus of news articles\uff0c\u662f\u4e00\u4e2a\u5927\u578b\u7684\u65b0\u95fb\u6570\u636e\u96c6\uff0c\u7531 Antonio Gulli \u4ece\u591a\u4e2a\u65b0\u95fb\u7f51\u7ad9\u6536\u96c6\u6574\u7406\u3002 AG News \u6570\u636e\u96c6\u5305\u542b 4 \u7c7b\u65b0\u95fb\uff0c\u6bcf\u7c7b 30,000 \u6761\u8bad\u7ec3\u6570\u636e\uff0c\u5171 120,000 \u6761\u8bad\u7ec3\u6837\u672c \u548c 7,600 \u6761\u6d4b\u8bd5\u6837\u672c\u3002</p>"},{"location":"lab5/%E8%AF%8D%E5%B5%8C%E5%85%A5/#31","title":"3.1 \u6587\u672c\u9884\u5904\u7406","text":"<p>\u9996\u5148\u5bfc\u5165\u6240\u9700\u6a21\u5757\uff1a</p> <p>\u53ef\u80fd\u9700\u8981\u5b89\u88c5datasets\u5305</p> <pre><code>   pip install datasets\n</code></pre> <pre><code>import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom datasets import load_dataset, load_from_disk\nfrom collections import Counter\nfrom torch.nn.utils.rnn import pad_sequence\nimport torch.nn.functional as F\nfrom tqdm import tqdm\nimport os\n</code></pre> <p>\u6211\u4eec\u4eceAG News \u6570\u636e\u96c6\u4e2d\u52a0\u8f7d\u6587\u672c\u3002\u8fd9\u662f\u4e00\u4e2a\u8f83\u5c0f\u7684\u8bed\u6599\u5e93\uff0c\u6709150000\u591a\u4e2a\u5355\u8bcd\uff0c\u4f46\u8db3\u591f\u6211\u4eec\u5c0f\u8bd5\u725b\u5200.</p> <pre><code>data_path = \"ag_news\u6587\u4ef6\u5939\u4fdd\u5b58\u8def\u5f84\"\ndataset = load_from_disk(data_path)\n\n# \u63d0\u53d6\u6240\u6709\u6587\u672c\u6570\u636e\u548c\u6807\u7b7e\ntrain_text = [item['text'] for item in dataset['train']]\ntrain_y = [item['label'] for item in dataset['train']]\ntest_text = [item['text'] for item in dataset['test']]\ntest_y = [item['label'] for item in dataset['test']]\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n</code></pre> <p>\u8bcd\u5143\u5316 \u4e0b\u9762\u7684tokenize\u51fd\u6570\u5c06\u6587\u672c\u884c\u5217\u8868\uff08lines\uff09\u4f5c\u4e3a\u8f93\u5165\uff0c\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u6587\u672c\u5e8f\u5217\uff08\u5982\u4e00\u6761\u6587\u672c\u884c\uff09\u3002\u6bcf\u4e2a\u6587\u672c\u5e8f\u5217\u53c8\u88ab\u62c6\u5206\u6210\u4e00\u4e2a\u8bcd\u5143\u5217\u8868\uff0c\u8bcd\u5143\uff08token\uff09\u662f\u6587\u672c\u7684\u57fa\u672c\u5355\u4f4d\u3002\u6700\u540e\uff0c\u8fd4\u56de\u4e00\u4e2a\u7531\u8bcd\u5143\u5217\u8868\u7ec4\u6210\u7684\u5217\u8868\uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u8bcd\u5143\u90fd\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08string\uff09\u3002\u8bcd\u5143\u7684\u7c7b\u578b\u662f\u5b57\u7b26\u4e32\uff0c\u800c\u6a21\u578b\u9700\u8981\u7684\u8f93\u5165\u662f\u6570\u5b57\uff0c\u56e0\u6b64\u8fd9\u79cd\u7c7b\u578b\u4e0d\u65b9\u4fbf\u6a21\u578b\u4f7f\u7528\u3002\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u5b57\u5178\uff0c\u901a\u5e38\u4e5f\u53eb\u505a\u8bcd\u8868\uff08vocabulary\uff09\uff0c\u7528\u6765\u5c06\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u8bcd\u5143\u6620\u5c04\u5230\u4ece0\u5f00\u59cb\u7684\u6570\u5b57\u7d22\u5f15\u4e2d\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e4b\u524dGlove\u4e2d\u5b9a\u4e49\u8fc7\u7684word_to_index\u3002</p> <p>\u5728\u8fd9\u4e9b\u6b65\u9aa4\u540e\uff0c\u6211\u4eec\u987a\u5e8f\u5730\u628a\u4e00\u6bb5\u6587\u672c\u6620\u5c04\u6210\u4e86\u6570\u5b57\uff0c\u53ef\u4ee5\u9001\u5165\u6a21\u578b\u4e2d\u8fdb\u884c\u5904\u7406\u3002</p> <pre><code># \u4f7f\u7528 split \u8fdb\u884c\u5206\u8bcd\ndef tokenize(text):\n    return text.lower().split()\n\ndef numericalize(text):\n    return torch.tensor([word_to_index.get(word, 0) for word in tokenize(text)], dtype=torch.long)\n\n\ndef pad_tensor(tensor, target_length=100, pad_value=0):\n    \"\"\"\n    Pads a tensor with the given pad_value up to target_length.\n\n    Args:\n        tensor (torch.Tensor): Input 1D tensor.\n        target_length (int): Desired length after padding. Default is 100.\n        pad_value (int): Value to pad with. Default is 0.\n\n    Returns:\n        torch.Tensor: Padded tensor of shape (target_length,).\n    \"\"\"\n    current_length = tensor.size(0)\n    if current_length &gt;= target_length:\n        return tensor[:target_length]  # Truncate if longer\n    else:\n        padding = torch.full((target_length - current_length,), pad_value, dtype=tensor.dtype)\n        return torch.cat((tensor, padding), dim=0)\n\n# \u751f\u6210\u8bad\u7ec3\u6570\u636e\ndef create_data(text_list, seq_len=100):\n    X = []\n    for text in text_list:\n        token_ids = numericalize(text)\n        # \u90fd\u5904\u7406\u6210\u957f\u5ea6\u4e3a100\u7684\u5e8f\u5217\n        token_ids = pad_tensor(token_ids)\n        X.append(token_ids)\n    return torch.stack(X)\n\n\n# \u751f\u6210\u8bad\u7ec3\u6570\u636e\nX_train = create_data(train_text, seq_len=100)\nY_train = torch.Tensor(train_y)\n\n# \u751f\u6210\u6d4b\u8bd5\u6570\u636e\nX_test = create_data(test_text, seq_len=100)\nY_test = torch.Tensor(test_y)\n\n# \u8003\u8651\u5230\u8bad\u7ec3\u65f6\u95f4 \u53ea\u53d6\u524d 50% \u7684\u6570\u636e\nsubset_size = int(0.5 * len(X_train))  # \u8ba1\u7b97 50% \u7684\u6837\u672c\u6570\u91cf\nX_train = X_train[:subset_size]\nY_train = Y_train[:subset_size]\n\n# \u521b\u5efa DataLoader\nbatch_size = 32\ntrain_data = torch.utils.data.TensorDataset(X_train, Y_train)\ntrain_loader = torch.utils.data.DataLoader(train_data, batch_size=batch_size, shuffle=True)\n\ntest_data = torch.utils.data.TensorDataset(X_test, Y_test)\ntest_loader = torch.utils.data.DataLoader(test_data, batch_size=batch_size, shuffle=True)\n</code></pre>"},{"location":"lab5/%E8%AF%8D%E5%B5%8C%E5%85%A5/#32","title":"3.2 \u5d4c\u5165\u5c42","text":"<p>nn.Embedding()\u662f PyTorch \u4e2d\u7528\u4e8e\u521b\u5efa\u8bcd\u5d4c\u5165\u5c42\uff08embedding layer\uff09\u7684\u6a21\u5757\uff0c\u901a\u5e38\u7528\u4e8e\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff08NLP\uff09\u4efb\u52a1\u3002\u5b83\u7684\u4e3b\u8981\u529f\u80fd\u662f\u5c06\u5355\u8bcd\u7d22\u5f15\u6620\u5c04\u4e3a\u7a20\u5bc6\u7684\u5411\u91cf\u8868\u793a\u3002</p> <p>\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528self.embedding = nn.Embedding.from_pretrained(embedding_matrix, freeze=True)\uff0c\u5176\u4e2d\u53c2\u6570embedding_matrix\u662fGlove\u7684\u8bcd\u5d4c\u5165\uff0c\u5373\u6211\u4eec\u4f7f\u7528Glove\u7684\u8bcd\u5d4c\u5165\u6765\u521d\u59cb\u5316\u5d4c\u5165\u5c42\uff1b\u53c2\u6570freeze\u8868\u793a\u5d4c\u5165\u5c42\u662f\u5426\u4f1a\u66f4\u65b0\u53c2\u6570\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e3afreeze=True\uff0c\u5373\u4e0d\u4f1a\u66f4\u65b0\u8bcd\u5d4c\u5165\u3002</p>"},{"location":"lab5/%E8%AF%8D%E5%B5%8C%E5%85%A5/#33","title":"3.3 \u6587\u672c\u5206\u7c7b\u7f51\u7edc","text":"<p>\u8bf7\u57fa\u4e8e\u5728\u4e0a\u6587\u7ed9\u51fa\u7684\u6570\u636e\u5904\u7406\u548c\u8bcd\u5d4c\u5165\u77e9\u9635\uff0c\u5b8c\u6210\u4ee5\u4e0b\u6587\u672c\u5206\u7c7b\u4ee3\u7801\u3002\u5305\u62ec\u56db\u4e2a\u90e8\u5206\uff0c\u5b9a\u4e49\u6587\u672c\u5206\u7c7b\u7f51\u7edc\uff0c\u5b9e\u73b0\u8bad\u7ec3\u51fd\u6570\uff0c\u5b9e\u73b0\u6d4b\u8bd5\u51fd\u6570\u4ee5\u53ca\u5b9a\u4e49\u635f\u5931\u51fd\u6570\u3002 <pre><code>#TODO:\u5b9a\u4e49\u6587\u672c\u5206\u7c7b\u7f51\u7edc\nclass TextClassifier(nn.Module):\n    def __init__(self, vocab_size, embedding_dim, hidden_dim, num_classes):\n        super(TextClassifier, self).__init__()\n\n        #TODO: \u5b9e\u73b0\u6a21\u578b\u7ed3\u6784\n        #TODO \u5b9e\u73b0self.embedding: \u5d4c\u5165\u5c42\n        #TODO \u5b9e\u73b0self.fc: \u5206\u7c7b\u5c42\n\n\n    def forward(self, x):\n        x = self.embedding(x)\n        #TODO: \u5bf9\u4e00\u4e2a\u53e5\u5b50\u4e2d\u7684\u6240\u6709\u5355\u8bcd\u7684\u5d4c\u5165\u53d6\u5e73\u5747\u5f97\u5230\u6700\u7ec8\u7684\u6587\u6863\u5d4c\u5165\n        return self.fc(x)\n\n# TODO: \u5b9e\u73b0\u8bad\u7ec3\u51fd\u6570\uff0c\u6ce8\u610f\u8981\u628a\u6570\u636e\u4e5f\u653e\u5230gpu\u4e0a\u907f\u514d\u62a5\u9519\ndef train_model(model, dataloader, criterion, optimizer):\n\n\n# TODO: \u5b9e\u73b0\u6d4b\u8bd5\u51fd\u6570\uff0c\u8fd4\u56de\u5728\u6d4b\u8bd5\u96c6\u4e0a\u7684\u51c6\u786e\u7387\ndef evaluate_model(model, dataloader):\n\n\n# \u521d\u59cb\u5316\u6a21\u578b\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nembedding_matrix = torch.Tensor(embedding_matrix)\nmodel = TextClassifier(embedding_matrix).to(device)\n#TODO \u5b9e\u73b0criterion: \u5b9a\u4e49\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\n# \u8bad\u7ec3\u6a21\u578b\nEPOCHS = 5\nfor epoch in range(EPOCHS):\n    train_model(model, train_loader, criterion, optimizer)\n    acc = evaluate_model(model, test_loader)\n    print(f\"Epoch {epoch+1}, Accuracy: {acc*100:.2f}%\")\n</code></pre></p> <p>\u601d\u8003\u9898</p> <p>\u4f7f\u7528Glove\u8bcd\u5d4c\u5165\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u662f\u5426\u6bd4\u968f\u673a\u521d\u59cb\u5316\u53d6\u5f97\u66f4\u597d\u7684\u6548\u679c\uff1f</p> <p>\u601d\u8003\u9898</p> <p>\u4e0a\u8ff0\u4ee3\u7801\u5728\u4e0d\u6539\u53d8\u6a21\u578b\uff08\u5373\u4ecd\u7136\u53ea\u6709self.embedding\u548cself.fc\uff0c\u4e0d\u989d\u5916\u5f15\u5165\u5982dropout\u7b49\u5c42\uff09\u548c\u8d85\u53c2\u6570\uff08\u5373batch size\u548c\u5b66\u4e60\u7387\uff09\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u54ea\u4e9b\u5730\u65b9\u6765\u63d0\u5347\u6a21\u578b\u6027\u80fd\u3002\u8bf7\u5217\u4e3e\u4e24\u4e2a\u65b9\u9762\u3002</p>"},{"location":"lab5/%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/","title":"\u5b9e\u9a8c\u4efb\u52a1\u4e8c\uff1a \u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b","text":""},{"location":"lab5/%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/#_2","title":"\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b","text":"<p>\u5b9e\u9a8c\u76ee\u6807</p> <p>\u901a\u8fc7\u672c\u6b21\u5b9e\u9a8c\uff0c\u4f60\u5c06\u638c\u63e1\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <ol> <li>\u4f7f\u7528GPU\u8bad\u7ec3\u6a21\u578b</li> <li>\u4e86\u89e3\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b</li> <li>\u4f7f\u7528\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u8fdb\u884c\u6587\u672c\u5206\u7c7b</li> </ol> <p>\u672c\u6b21\u5b9e\u9a8c\u6240\u7528\u7684\u9884\u8bad\u7ec3\u6a21\u578b\uff08BERT\uff09\u4e0b\u8f7d\u94fe\u63a5\u5982\u4e0b\uff1a  </p>"},{"location":"lab5/%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/#bert","title":"\u9884\u8bad\u7ec3\u6a21\u578b\uff08BERT\uff09\u4e0b\u8f7d\u94fe\u63a5\uff1a","text":"<p>https://box.nju.edu.cn/d/2710380144234ce78fe3/</p>"},{"location":"lab5/%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/#1-gpu","title":"1. \u4f7f\u7528GPU\u8bad\u7ec3\u6a21\u578b","text":"<p>\u5728PyTorch\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u6765\u68c0\u6d4b\u5f53\u524d\u73af\u5883\u662f\u5426\u6709\u53ef\u7528\u7684GPU\uff1a <pre><code>import torch\n\n# \u68c0\u67e5\u662f\u5426\u6709\u53ef\u7528\u7684GPU\nif torch.cuda.is_available():\n    print(f\"CUDA is available. Number of GPUs: {torch.cuda.device_count()}\")\n    print(f\"Current device: {torch.cuda.current_device()}\")\n    print(f\"Device name: {torch.cuda.get_device_name(torch.cuda.current_device())}\")\nelse:\n    print(\"CUDA is not available. Using CPU.\")\n</code></pre></p> <p>\u5982\u679c\u663e\u793a'CUDA is not available. Using CPU.'\u8bf7\u786e\u8ba4\u542f\u52a8\u7684\u73af\u5883\u662f\u5426\u6b63\u786e\u6216\u8005\u5c1d\u8bd5\u91cd\u65b0\u5b89\u88c5pytorch\u6216\u8005\u4e0e\u52a9\u6559\u8054\u7cfb\u3002</p> <p>GPU\u8bad\u7ec3\u63d0\u793a</p> <p>\u5982\u679c\u8981\u7528GPU\u8bad\u7ec3\uff0c\u5219\u9700\u8981\u628a\u6570\u636e\u548c\u6a21\u578b\u90fd\u653e\u5230GPU\u4e0a\u624d\u80fd\u8bad\u7ec3\u3002\u5982\u679c\u4e00\u4e2a\u5728CPU\u4e00\u4e2a\u5728GPU\uff0c\u5219\u4f1a\u62a5\u9519\u3002</p> <p>\u5b9a\u4e49\u6a21\u578b\u540e\uff0c\u901a\u8fc7model = model.to(device)\u628a\u6a21\u578b\u653e\u5230GPU\u4e0a\u3002 \u628a\u6a21\u578b\u653e\u5230GPU\u4e0a\u7684\u4ee3\u7801\u793a\u4f8b\uff1a</p> <pre><code># \u68c0\u67e5\u662f\u5426\u6709\u53ef\u7528\u7684GPU\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\n# \u521b\u5efa\u6a21\u578b\nmodel = SimpleModel()\n\n# \u5c06\u6a21\u578b\u653e\u5230GPU\uff08\u5982\u679c\u53ef\u7528\uff09\nmodel = model.to(device)\n</code></pre> <p>\u7531\u4e8e\u6a21\u578b\u5728GPU\u4e0a\uff0c\u6240\u4ee5\u6570\u636e\u4e5f\u5fc5\u987b\u5728GPU\u4e0a\u624d\u80fd\u9001\u5165\u6a21\u578b\u3002\u901a\u8fc7inputs = inputs.to(device)\u628ainput\u653e\u5230GPU\u4e0a\u3002\u503c\u5f97\u8bf4\u660e\u7684\u662f\u7531\u4e8e\u6a21\u578b\u7684\u8f93\u51fa\u4e5f\u5728GPU\u4e0a\uff0c\u6240\u4ee5\u6807\u7b7e\u4e5f\u9700\u8981\u653e\u5230GPU\u4e0a\u4ee5\u4fbf\u4e8e\u8ba1\u7b97\u635f\u5931\uff0c\u901a\u8fc7labels = labels.to(device)\u3002</p> <p>\u628a\u6570\u636e\u653e\u5230GPU\u4e0a\u7684\u4ee3\u7801\u793a\u4f8b\uff1a</p> <pre><code>import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader\n\n# \u8bad\u7ec3\u793a\u4f8b\nnum_epochs = 3\nfor epoch in range(num_epochs):\n    model.train()\n    for inputs, labels in train_loader:\n        # \u5c06\u6570\u636e\u653e\u5230GPU\uff08\u5982\u679c\u53ef\u7528\uff09\n        inputs, labels = inputs.to(device), labels.to(device)\n\n        # \u524d\u5411\u4f20\u64ad\n        outputs = model(inputs)\n</code></pre> <p>\u901a\u8fc7\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6570\u636e\u548c\u6a21\u578b\u90fd\u653e\u5230GPU\u4e0a\u4ece\u800c\u52a0\u901f\u8bad\u7ec3\u3002</p> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b\u662f\u5426\u4f7f\u7528\u4e86GPU\u5e76\u4e14\u89c2\u5bdf\u7684GPU\u5229\u7528\u7387\uff1a <pre><code>watch -n 5 nvidia-smi\n</code></pre></p> <p>\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u6bcf5\u79d2\uff08-n 5\uff09\u66f4\u65b0\u4e00\u6b21NVIDIA GPU\u7684\u72b6\u6001\u4fe1\u606f\u3002</p>"},{"location":"lab5/%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/#2","title":"2. \u4e86\u89e3\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b","text":"<p>\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u7b80\u4ecb</p> <p>\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\uff08pre-trained language models\uff09\u662f\u6307\u5728\u5927\u89c4\u6a21\u6570\u636e\u96c6\u4e0a\u9884\u5148\u8bad\u7ec3\u8fc7\u7684\u8bed\u8a00\u6a21\u578b\u3002\u8fd9\u4e9b\u6a21\u578b\u5df2\u7ecf\u5b66\u4e60\u5230\u4e86\u4e00\u4e9b\u57fa\u7840\u7684\u7279\u5f81\u6216\u77e5\u8bc6\uff0c\u5e76\u53ef\u4ee5\u88ab\u8fc1\u79fb\u5230\u7279\u5b9a\u7684\u4efb\u52a1\u4e0a\u8fdb\u884c\u5fae\u8c03\uff08fine-tuning\uff09\u3002</p> <p>\u4e0b\u9762\u6211\u4eec\u4ee5BERT\u4e3a\u4f8b\uff0c\u7528\u7684bert-base-uncased\u7248\u672c\u8fdb\u884c\u5b9e\u9a8c\u3002\u6211\u4eec\u9996\u5148\u7528AutoModel\u548cAutoTokenizer\u52a0\u8f7d\u6a21\u578b\u548c\u5206\u8bcd\u5668\u3002\u5206\u8bcd\u5668\u662f\u628a\u6587\u672c\u7684\u6bcf\u4e2a\u8bcd\u5143\u6620\u5c04\u5230\u5bf9\u5e94\u7684\u7d22\u5f15\uff0c\u4ee5\u4fbf\u4e8eBERT\u7684embedding\u5c42\u5b8c\u6210\u7d22\u5f15\u5230\u5d4c\u5165\u7684\u6620\u5c04\u3002</p> <p>\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a</p> <p><pre><code>import torch\nfrom transformers import AutoModel, AutoTokenizer\n\n# \u6307\u5b9a\u6a21\u578b\u540d\u79f0\nmodel_name = 'bert-base-uncased'\n\n# \u8bfb\u53d6\u6a21\u578b\u5bf9\u5e94\u7684tokenizer\ntokenizer = AutoTokenizer.from_pretrained(model_name)\n\n# \u8f7d\u5165\u6a21\u578b\nmodel = AutoModel.from_pretrained(model_name)\n\n# \u8f93\u5165\u6587\u672c\ninput_text = \"Here is some text to encode\"\n\n# \u901a\u8fc7tokenizer\u628a\u6587\u672c\u53d8\u6210 token_id\ninput_ids = tokenizer.encode(input_text, add_special_tokens=True)\nprint(input_ids)\n\n# \u8f6c\u6362\u4e3aTensor\ninput_ids = torch.tensor([input_ids])\n\n# \u83b7\u5f97BERT\u7684\u8f93\u51fa\nwith torch.no_grad():\n    output = model(input_ids)\n\n# \u83b7\u5f97BERT\u6a21\u578b\u6700\u540e\u4e00\u4e2a\u9690\u5c42\u7ed3\u679c\noutput_hidden_states = output.last_hidden_state\noutput_hidden_states.shape\n</code></pre> \u5206\u8bcd\uff08tokenizer\uff09\u7684\u8fc7\u7a0b\u4f1a\u5728\u6587\u672c\u7684\u5934\u5c3e\u6dfb\u52a0\u7279\u6b8atoken\uff0c\u5373\u4f1a\u5728\u6587\u672c\u7684\u5f00\u5934\u52a0\u5165\u8bcd\u5143[CLS]\u5e76\u4e14\u5728\u6587\u672c\u7684\u7ed3\u5c3e\u52a0\u5165\u8bcd\u5143[SEP]\u3002\u4f60\u53ef\u4ee5\u8c03\u6574input_text\u548c\u8bbe\u7f6eadd_special_tokens=False\uff0c\u89c2\u5bdf\u5230\u8fd9\u4e24\u4e2a\u8bcd\u5143\u5206\u522b\u88ab\u7f16\u7801\u4e3a101\u548c102\u3002</p> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u7531\u4e8e\u6279\u5904\u7406\u8fc7\u7a0b\u9700\u8981\u4e00\u4e2a\u6279\u6b21\u4e2d\u6587\u672c\u957f\u5ea6\u76f8\u540c\uff0c\u56e0\u6b64\u989d\u5916\u5f15\u5165\u4e86padding\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u4e86attention_mask\u5c4f\u853d\u8fd9\u4e9bpadding token\uff0c\u4e0d\u8ba9\u5176\u53c2\u4e0e\u81ea\u6ce8\u610f\u529b\u7684\u8ba1\u7b97\u3002</p> <p>\u6700\u7ec8\u7684\u8f93\u51fa\u662f\u6587\u672c\u4e2d\u6240\u6709\u8bcd\u5143\u7684\u9690\u85cf\u72b6\u6001\uff08hidden states\uff09\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u7528model.named_parameters(): \u89c2\u5bdf\u6a21\u578b\u7684\u6240\u6709\u53c2\u6570\u53ca\u5176\u5f62\u72b6\uff0c\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import torch\nfrom transformers import AutoModel, AutoTokenizer\n\n# \u6307\u5b9a\u6a21\u578b\u540d\u79f0\nmodel_name = 'bert-base-uncased'\n\n# \u8bfb\u53d6\u6a21\u578b\u5bf9\u5e94\u7684tokenizer\ntokenizer = AutoTokenizer.from_pretrained(model_name)\n\n# \u8f7d\u5165\u6a21\u578b\nmodel = AutoModel.from_pretrained(model_name)\n\n# \u6253\u5370\u6a21\u578b\u6240\u6709\u53c2\u6570\u7684\u540d\u79f0\u548c\u5f62\u72b6\nfor name, param in model.named_parameters():\n    print(f\"Parameter Name: {name}, Shape: {param.shape}\")\n</code></pre>"},{"location":"lab5/%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/#3","title":"3. \u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u8fdb\u884c\u6587\u672c\u5206\u7c7b","text":"<p>\u53ef\u80fd\u9700\u8981\u5b89\u88c5transformers\u5305</p> <pre><code>   pip install transformers\n</code></pre> <p>\u5728\u672c\u7ae0\u8282\u4e2d\uff0c\u4f60\u5c06\u57fa\u4e8e\u4e0a\u9762\u7684BERT\u4ee3\u7801\u548cAG NEWS\u6570\u636e\u96c6\u8fdb\u884c\u57fa\u4e8e\u9884\u8bad\u7ec3\u6a21\u578bBERT\u7684\u6587\u672c\u5206\u7c7b\u3002\u4f60\u5c06\u5b8c\u5584\u4e0b\u8ff0\u4ee3\u7801\u540c\u65f6\u63a2\u7d22\u591a\u79cd\u53e5\u5b50\u805a\u5408\u65b9\u5f0f\u5bf9\u7ed3\u679c\u7684\u5f71\u54cd\uff0c\u5176\u4e2d\u53e5\u5b50\u805a\u5408\u65b9\u5f0f\u6307\u7684\u662f\u4ece\u8bcd\u5d4c\u5165\u4e2d\u5f97\u5230\u53e5\u5b50\u5d4c\u5165\u7684\u8fc7\u7a0b\u3002\u9700\u8981\u63a2\u7d22\u7684\u53e5\u5b50\u805a\u5408\u65b9\u5f0f\u5305\u62ec\uff1a</p> <ol> <li>\u76f4\u63a5\u4f7f\u7528[CLS]\u7684\u5d4c\u5165\u8868\u793a\u5f53\u505a\u53e5\u5b50\u5d4c\u5165\u3002</li> <li>\u4f7f\u7528mean-pooling\u5e73\u5747\u4e00\u4e2a\u53e5\u5b50\u4e2d\u7684\u6240\u6709\u8bcd\u5143\u5f97\u5230\u5d4c\u5165</li> <li>\u4f7f\u7528\u6ce8\u610f\u529b\u673a\u5236\u7ed9\u6bcf\u4e2a\u8bcd\u5143\u5206\u914d\u4e00\u4e2a\u6743\u91cd\uff0c\u901a\u8fc7\u52a0\u6743\u6c42\u548c\u7684\u65b9\u5f0f\u5f97\u5230\u5d4c\u5165\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u6ce8\u610f\u529b\u673a\u5236\u8ba1\u7b97\u3002</li> </ol> <p>\u5b66\u4e60\u7387\u53ef\u4ee5\u53c2\u8003\u8bbe\u7f6e\u4e3a2e-5\u3002</p> <pre><code>import torch\nimport pandas as pd\nimport numpy as np\nfrom torch.utils.data import Dataset, DataLoader\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification, Adam\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom tqdm import tqdm\n\n# **1. \u52a0\u8f7d AG NEWS \u6570\u636e\u96c6**\ndf = pd.read_csv(\"train.csv\")  # \u8bf7\u66ff\u6362\u6210\u4f60\u7684\u6587\u4ef6\u8def\u5f84\ndf.columns = [\"label\", \"title\", \"description\"]  # CSV \u67093\u5217: \u6807\u7b7e, \u6807\u9898, \u63cf\u8ff0\ndf[\"text\"] = df[\"title\"] + \" \" + df[\"description\"]  # \u5408\u5e76\u6807\u9898\u548c\u63cf\u8ff0\u4f5c\u4e3a\u8f93\u5165\u6587\u672c\ndf[\"label\"] = df[\"label\"] - 1  # AG NEWS \u7684\u6807\u7b7e\u662f 1-4\uff0c\u6211\u4eec\u8f6c\u6362\u6210 0-3\ntrain_texts, train_labels = df[\"text\"].tolist(), df[\"label\"].tolist()\nnumber = int(0.3 * len(train_texts))\ntrain_texts, train_labels = train_texts[: number], train_labels[: number]\n\ndf = pd.read_csv(\"test.csv\")  # \u8bf7\u66ff\u6362\u6210\u4f60\u7684\u6587\u4ef6\u8def\u5f84\ndf.columns = [\"label\", \"title\", \"description\"]  # CSV \u67093\u5217: \u6807\u7b7e, \u6807\u9898, \u63cf\u8ff0\ndf[\"text\"] = df[\"title\"] + \" \" + df[\"description\"]  # \u5408\u5e76\u6807\u9898\u548c\u63cf\u8ff0\u4f5c\u4e3a\u8f93\u5165\u6587\u672c\ndf[\"label\"] = df[\"label\"] - 1  # AG NEWS \u7684\u6807\u7b7e\u662f 1-4\uff0c\u6211\u4eec\u8f6c\u6362\u6210 0-3\ntest_texts, test_labels = df[\"text\"].tolist(), df[\"label\"].tolist()\n\n# **2. \u52a0\u8f7d BERT Tokenizer**\nmodel_name = \"bert-base-uncased\"\ntokenizer = AutoTokenizer.from_pretrained(model_name)\n\n# **3. \u5904\u7406\u6570\u636e**\nclass AGNewsDataset(Dataset):\n    def __init__(self, texts, labels, tokenizer, max_length=50):\n        self.texts = texts\n        self.labels = labels\n        self.tokenizer = tokenizer\n        self.max_length = max_length\n\n    def __len__(self):\n        return len(self.texts)\n\n    def __getitem__(self, idx):\n        text = self.texts[idx]\n        label = self.labels[idx]\n        encoding = self.tokenizer(\n            text, truncation=True, padding=\"max_length\", max_length=self.max_length, return_tensors=\"pt\"\n        )\n        return {\n            \"input_ids\": encoding[\"input_ids\"].squeeze(0),\n            \"attention_mask\": encoding[\"attention_mask\"].squeeze(0),\n            \"labels\": torch.tensor(label, dtype=torch.long),\n        } # \u6b64\u5904\u4f1a\u81ea\u52a8\u751f\u6210BERT\u8f93\u5165\u6240\u9700\u8981\u7684attention_mask\n\n\ntrain_dataset = AGNewsDataset(train_texts, train_labels, tokenizer)\ntest_dataset = AGNewsDataset(test_texts, test_labels, tokenizer)\n\ntrain_dataloader = DataLoader(train_dataset, batch_size=16, shuffle=True)\ntest_dataloader = DataLoader(test_dataset, batch_size=16, shuffle=False)\n\n# **4. \u5b9a\u4e49\u548c\u52a0\u8f7dBERT\u5206\u7c7b\u6a21\u578b**\n#TODO:\u5b9a\u4e49\u6a21\u578b\u5e76\u4e14\u653e\u5230GPU\u4e0a\n\nclass BERTClassifier(nn.Module):\n    def __init__(self, model_name, num_labels):\n        super(BERTClassifier, self).__init__()\n        self.bert =\n        self.classifier = \n\n    def forward(self, input_ids, attention_mask):\n\n        return logits\n\nmodel = BERTClassifier(model_name, num_labels=4).to(device)\n\n\n# **5. \u8bbe\u7f6e\u4f18\u5316\u5668\u548c\u635f\u5931\u51fd\u6570**\n#TODO: \u5b9a\u4e49\u4f18\u5316\u5668\u548c\u635f\u5931\u51fd\u6570\n\n# **6. \u8bad\u7ec3 BERT**\nEPOCHS = 3\n\nfor epoch in range(EPOCHS):\n    model.train()\n    total_loss = 0\n    loop = tqdm(train_dataloader, desc=f\"Epoch {epoch+1}\")\n\n    for batch in loop:\n        #TODO: \u57fa\u4e8e\u540e\u9762\u9700\u8981\u6253\u5370\u7684\u635f\u5931\uff0c\u5b9a\u4e49\u8bad\u7ec3\u8fc7\u7a0b\n\n    print(f\"Epoch {epoch+1}, Loss: {total_loss/len(train_dataloader):.4f}\")\n\n    # **7. \u8bc4\u4f30\u6a21\u578b**\n    model.eval()\n    preds, true_labels = [], []\n\n    with torch.no_grad():\n        for batch in test_dataloader:\n            #TODO: \u57fa\u4e8e\u540e\u9762\u8ba1\u7b97acc\u9700\u8981\u7684true_labels\u548cpreds\uff0c\u5b8c\u5584\u4e0b\u9762\u6d4b\u8bd5\u4ee3\u7801\n\n\n    acc = accuracy_score(true_labels, preds)\n    print(f\"Test Accuracy: {acc:.4f}\")\n</code></pre> <p>\u8bad\u7ec3\u901f\u5ea6</p> <p>\u4f60\u5982\u679c\u89c9\u5f97\u8bad\u7ec3\u901f\u5ea6\u6162\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u589e\u5927batch size\uff0c\u4e0d\u8fc7\u6ce8\u610f\u4e0d\u8981\u70b8\u663e\u5b58\u3002</p> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98981\uff1a\u4f60\u89c9\u5f97\u4ee5\u4e0a\u4e09\u79cd\u5f97\u5230\u53e5\u5b50\u5d4c\u5165\u7684\u65b9\u6848\uff0c\u54ea\u79cd\u6548\u679c\u4f1a\u6700\u597d\uff0c\u54ea\u79cd\u6548\u679c\u4f1a\u6700\u5dee\uff1f\u4e3a\u4ec0\u4e48\uff1f</p> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98982\uff1a\u5982\u679c\u4e00\u4e2a\u6587\u6863\u5305\u62ec\u591a\u4e2a\u53e5\u5b50\uff0c\u6211\u4eec\u9700\u8981\u83b7\u5f97\u5176\u4e2d\u6bcf\u4e2a\u53e5\u5b50\u7684\u5d4c\u5165\u8868\u793a\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u5229\u7528BERT\u5f97\u5230\u6bcf\u4e2a\u53e5\u5b50\u7684\u5d4c\u5165\uff1f</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/","title":"\u5b9e\u9a8c\u4efb\u52a1\u4e00\uff1a\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff08GAN\uff09","text":"<p>\u5728\u5b9e\u9a8c\u5f00\u59cb\u524d\uff0c\u4f60\u9700\u8981\u638c\u63e1\u4ee5\u4e0b\u5185\u5bb9</p> <p>\u2022   \u6df1\u5ea6\u5b66\u4e60\u57fa\u7840\uff1a\u638c\u63e1\u57fa\u672c\u7684\u795e\u7ecf\u7f51\u7edc\u6982\u5ff5\uff0c\u4e86\u89e3\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNN\uff09\u7684\u57fa\u672c\u7ed3\u6784\u3002</p> <p>\u2022   PyTorch \u57fa\u7840\uff1a</p> <p>\u2022   torch.nn\uff1a\u6784\u5efa\u795e\u7ecf\u7f51\u7edc</p> <p>\u2022   torch.optim\uff1a\u4f18\u5316\u5668\u7684\u4f7f\u7528</p> <p>\u2022   torch.utils.data\uff1a\u6570\u636e\u52a0\u8f7d</p> <p>\u2022   torchvision\uff1a\u6570\u636e\u9884\u5904\u7406\u548c\u53ef\u89c6\u5316</p> <p>\u6ce8\u610f</p> <p>\u5728\u5b9e\u9a8c\u5f00\u59cb\u65f6\uff0c\u8bf7\u786e\u4fdd\u5b9e\u9a8c\u8fd0\u884c\u5728GPU\u4e0a\uff01</p> <p>\u5728python\u73af\u5883\u4e0b\u6216\u5728jupyter notebook\u91cc\u6d4b\u8bd5\uff1a <pre><code>import torch\ntorch.cuda.is_available()\n</code></pre> \u5982\u679c\u8fd4\u56deTrue\uff0c\u5219GPU\u80fd\u88ab\u8c03\u7528\uff0c\u5426\u5219\u8bf7\u91cd\u542fdocker\u73af\u5883\u6216\u4e3e\u624b\u793a\u610f</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/#1-gan","title":"1. \u4e86\u89e3GAN\u7684\u57fa\u672c\u6982\u5ff5","text":"<p>\u4ec0\u4e48\u662f GAN\uff1f</p> <p>\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff08GAN\uff09\u662f\u4e00\u79cd\u751f\u6210\u6a21\u578b\uff0c\u5b83\u7684\u76ee\u6807\u662f\u5b66\u4e60\u6570\u636e\u7684\u5206\u5e03\uff0c\u4ece\u800c\u80fd\u591f\u751f\u6210\u4e0e\u771f\u5b9e\u6570\u636e\u5206\u5e03\u76f8\u4f3c\u7684\u6837\u672c\u3002GAN\u901a\u8fc7\u4e00\u79cd\u5bf9\u6297\u7684\u65b9\u5f0f\u8fdb\u884c\u8bad\u7ec3\uff0c\u5229\u7528\u4e24\u4e2a\u795e\u7ecf\u7f51\u7edc\uff08\u751f\u6210\u5668\u548c\u5224\u522b\u5668\uff09\u76f8\u4e92\u535a\u5f08\uff0c\u6700\u7ec8\u4f7f\u751f\u6210\u5668\u80fd\u591f\u751f\u6210\u9ad8\u8d28\u91cf\u7684\u3001\u4ee5\u5047\u4e71\u771f\u7684\u6570\u636e\u3002</p> <p>GAN\u5305\u542b\u6709\u4e24\u4e2a\u6a21\u578b\uff0c\u4e00\u4e2a\u662f\u751f\u6210\u6a21\u578b\uff08generative model\uff09\uff0c\u4e00\u4e2a\u662f\u5224\u522b\u6a21\u578b(discriminative model)\u3002\u751f\u6210\u6a21\u578b\u7684\u4efb\u52a1\u662f\u751f\u6210\u770b\u8d77\u6765\u81ea\u7136\u771f\u5b9e\u7684\u3001\u548c\u539f\u59cb\u6570\u636e\u76f8\u4f3c\u7684\u5b9e\u4f8b\u3002\u5224\u522b\u6a21\u578b\u7684\u4efb\u52a1\u662f\u5224\u65ad\u7ed9\u5b9a\u7684\u5b9e\u4f8b\u770b\u8d77\u6765\u662f\u81ea\u7136\u771f\u5b9e\u7684\u8fd8\u662f\u4eba\u4e3a\u4f2a\u9020\u7684\uff08\u771f\u5b9e\u5b9e\u4f8b\u6765\u6e90\u4e8e\u6570\u636e\u96c6\uff0c\u4f2a\u9020\u5b9e\u4f8b\u6765\u6e90\u4e8e\u751f\u6210\u6a21\u578b\uff09\u3002   </p> <p>\u8fd9\u53ef\u4ee5\u770b\u505a\u4e00\u79cd\u96f6\u548c\u6e38\u620f\u3002\u8bba\u6587\u91c7\u7528\u7c7b\u6bd4\u7684\u624b\u6cd5\u901a\u4fd7\u7406\u89e3\uff1a\u751f\u6210\u6a21\u578b\u50cf\u201c\u4e00\u4e2a\u9020\u5047\u56e2\u4f19\uff0c\u8bd5\u56fe\u751f\u4ea7\u548c\u4f7f\u7528\u5047\u5e01\u201d\uff0c\u800c\u5224\u522b\u6a21\u578b\u50cf\u201c\u68c0\u6d4b\u5047\u5e01\u7684\u8b66\u5bdf\u201d\u3002\u751f\u6210\u5668\uff08generator\uff09\u8bd5\u56fe\u6b3a\u9a97\u5224\u522b\u5668\uff08discriminator\uff09\uff0c\u5224\u522b\u5668\u5219\u52aa\u529b\u4e0d\u88ab\u751f\u6210\u5668\u6b3a\u9a97\u3002\u6a21\u578b\u7ecf\u8fc7\u4ea4\u66ff\u4f18\u5316\u8bad\u7ec3\uff0c\u4e24\u79cd\u6a21\u578b\u90fd\u80fd\u5f97\u5230\u63d0\u5347\uff0c\u4f46\u6700\u7ec8\u6211\u4eec\u8981\u5f97\u5230\u7684\u662f\u6548\u679c\u63d0\u5347\u5230\u5f88\u9ad8\u5f88\u597d\u7684\u751f\u6210\u6a21\u578b\uff08\u9020\u5047\u56e2\u4f19\uff09\uff0c\u8fd9\u4e2a\u751f\u6210\u6a21\u578b\uff08\u9020\u5047\u56e2\u4f19\uff09\u6240\u751f\u6210\u7684\u4ea7\u54c1\u80fd\u8fbe\u5230\u771f\u5047\u96be\u5206\u7684\u5730\u6b65\u3002</p> <p></p> <p>\u7ed3\u5408\u6574\u4f53\u6a21\u578b\u56fe\u793a\uff0c\u518d\u4ee5\u751f\u6210\u56fe\u7247\u4f5c\u4e3a\u4f8b\u5b50\u5177\u4f53\u8bf4\u660e\u3002\u6211\u4eec\u6709\u4e24\u4e2a\u7f51\u7edc\uff0cG\uff08Generator\uff09\u548cD\uff08Discriminator\uff09\u3002Generator\u662f\u4e00\u4e2a\u751f\u6210\u56fe\u7247\u7684\u7f51\u7edc\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a\u968f\u673a\u7684\u566a\u58f0z\uff0c\u901a\u8fc7\u8fd9\u4e2a\u566a\u58f0\u751f\u6210\u56fe\u7247\uff0c\u8bb0\u505aG(z)\u3002Discriminator\u662f\u4e00\u4e2a\u5224\u522b\u7f51\u7edc\uff0c\u5224\u522b\u4e00\u5f20\u56fe\u7247\u662f\u4e0d\u662f\u201c\u771f\u5b9e\u7684\u201d\u3002\u5b83\u7684\u8f93\u5165\u662fx\uff0cx\u4ee3\u8868\u4e00\u5f20\u56fe\u7247\uff0c\u8f93\u51faD\uff08x\uff09\u4ee3\u8868x\u4e3a\u771f\u5b9e\u56fe\u7247\u7684\u6982\u7387\uff0c\u5982\u679c\u4e3a1\uff0c\u5c31\u4ee3\u8868100%\u662f\u771f\u5b9e\u7684\u56fe\u7247\uff0c\u800c\u8f93\u51fa\u4e3a0\uff0c\u5c31\u4ee3\u8868\u4e0d\u53ef\u80fd\u662f\u771f\u5b9e\u7684\u56fe\u7247\u3002</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/#gan_1","title":"GAN\u6a21\u578b\u4f18\u5316\u8bad\u7ec3","text":"<p>\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u751f\u6210\u7f51\u7edc\u7684\u76ee\u6807\u5c31\u662f\u5c3d\u91cf\u751f\u6210\u771f\u5b9e\u7684\u56fe\u7247\u53bb\u6b3a\u9a97\u5224\u522b\u7f51\u7edcD\u3002\u800c\u7f51\u7edcD\u7684\u76ee\u6807\u5c31\u662f\u5c3d\u91cf\u628a\u7f51\u7edcG\u751f\u6210\u7684\u56fe\u7247\u548c\u771f\u5b9e\u7684\u56fe\u7247\u5206\u522b\u5f00\u6765\u3002\u8fd9\u6837\uff0cG\u548cD\u6784\u6210\u4e86\u4e00\u4e2a\u52a8\u6001\u7684\u201c\u535a\u5f08\u8fc7\u7a0b\u201d\u3002\u8fd9\u4e2a\u535a\u5f08\u8fc7\u7a0b\u5177\u4f53\u662f\u600e\u4e48\u6837\u7684\u5462\uff1f</p> <p>\u5148\u4e86\u89e3\u4e0b\u7eb3\u4ec0\u5747\u8861\uff0c\u7eb3\u4ec0\u5747\u8861\u662f\u6307\u535a\u5f08\u4e2d\u8fd9\u6837\u7684\u5c40\u9762\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u53c2\u4e0e\u8005\u6765\u8bf4\uff0c\u53ea\u8981\u5176\u4ed6\u4eba\u4e0d\u6539\u53d8\u7b56\u7565\uff0c\u4ed6\u5c31\u65e0\u6cd5\u6539\u5584\u81ea\u5df1\u7684\u72b6\u51b5\u3002\u5bf9\u5e94\u7684\uff0c\u5bf9\u4e8eGAN\uff0c\u60c5\u51b5\u5c31\u662f\u751f\u6210\u6a21\u578b G \u6062\u590d\u4e86\u8bad\u7ec3\u6570\u636e\u7684\u5206\u5e03\uff08\u9020\u51fa\u4e86\u548c\u771f\u5b9e\u6570\u636e\u4e00\u6a21\u4e00\u6837\u7684\u6837\u672c\uff09\uff0c\u5224\u522b\u6a21\u578b\u518d\u4e5f\u5224\u522b\u4e0d\u51fa\u6765\u7ed3\u679c\uff0c\u51c6\u786e\u7387\u4e3a 50%\uff0c\u7ea6\u7b49\u4e8e\u4e71\u731c\u3002\u8fd9\u662f\u53cc\u65b9\u7f51\u8def\u90fd\u5f97\u5230\u5229\u76ca\u6700\u5927\u5316\uff0c\u4e0d\u518d\u6539\u53d8\u81ea\u5df1\u7684\u7b56\u7565\uff0c\u4e5f\u5c31\u662f\u4e0d\u518d\u66f4\u65b0\u81ea\u5df1\u7684\u6743\u91cd\u3002</p> <p>\u4ece\u6982\u7387\u8bba\u7684\u89d2\u5ea6\uff0cGAN\u8bd5\u56fe\u5b66\u4e60\u771f\u5b9e\u6570\u636e\u7684\u5206\u5e03\\(P_{\\text{data}}(x)\\)\uff0c\u5e76\u901a\u8fc7\u751f\u6210\u5668\u751f\u6210\u7684\u5206\u5e03\\(P_{\\text{gen}}(x)\\)\u6765\u903c\u8fd1\\(P_{\\text{data}}(x)\\)\u3002</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/#gan_2","title":"GAN\u7b97\u6cd5\u4e2d\u7684\u2f63\u6210\u5668","text":"<p>\u5bf9\u4e8e\u2f63\u6210\u5668\uff0c\u8f93\u2f0a\u9700\u8981\u2f00\u4e2an\u7ef4\u5ea6\u5411\u91cf\uff0c\u8f93\u51fa\u4e3a\u56fe\u2f5a\u50cf\u7d20\u2f24\u2f29\u7684\u56fe\u2f5a\u3002\u56e0\u2f7d\u2fb8\u5148\u6211\u4eec\u9700\u8981\u5f97\u5230\u8f93\u2f0a\u7684\u5411\u91cf\u3002</p> <p>\u8fd9\u2fa5\u7684\u2f63\u6210\u5668\u53ef\u4ee5\u662f\u4efb\u610f\u53ef\u4ee5\u8f93\u51fa\u56fe\u2f5a\u7684\u6a21\u578b\uff0c\u2f50\u5982\u6700\u7b80\u5355\u7684\u5168\u8fde\u63a5\u795e\u7ecf\u2f79\u7edc\uff0c\u2f1c\u6216\u8005\u662f\u53cd\u5377\u79ef\u2f79\u7edc\u7b49\u3002\u8fd9\u2fa5\u8f93\u2f0a\u7684\u5411\u91cf\u6211\u4eec\u5c06\u5176\u89c6\u4e3a\u643a\u5e26\u8f93\u51fa\u7684\u67d0\u4e9b\u4fe1\u606f\uff0c\u2f50\u5982\u8bf4\u2f3f\u5199\u6570\u5b57\u4e3a\u6570\u5b57\u2f0f\uff0c\u2f3f\u5199\u7684\u6f66\u8349\u7a0b\u5ea6\u7b49\u7b49\u3002\u7531\u4e8e\u8fd9\u2fa5\u6211\u4eec\u5bf9\u4e8e\u8f93\u51fa\u6570\u5b57\u7684\u5177\u4f53\u4fe1\u606f\u4e0d\u505a\u8981\u6c42\uff0c\u53ea\u8981\u6c42\u5176\u80fd\u591f\u6700\u2f24\u7a0b\u5ea6\u4e0e\u771f\u5b9e\u2f3f\u5199\u6570\u5b57\u76f8\u4f3c\uff08\u80fd\u9a97\u8fc7\u5224\u522b\u5668\uff09\u5373\u53ef\u3002\u6240\u4ee5\u6211\u4eec\u4f7f\u2f64\u968f\u673a\u2f63\u6210\u7684\u5411\u91cf\u6765\u4f5c\u4e3a\u8f93\u2f0a\u5373\u53ef\uff0c\u8fd9\u2fa5\u2faf\u7684\u968f\u673a\u8f93\u2f0a\u6700\u597d\u662f\u6ee1\u2f9c\u5e38\u2ec5\u5206\u5e03\u2f50\u5982\u5747\u503c\u5206\u5e03\uff0c\u2fbc\u65af\u5206\u5e03\u7b49\u3002</p> <p>\u5047\u5982\u6211\u4eec\u540e\u2faf\u9700\u8981\u83b7\u5f97\u5177\u4f53\u7684\u8f93\u51fa\u6570\u5b57\u7b49\u4fe1\u606f\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u8f93\u2f0a\u5411\u91cf\u4ea7\u2f63\u7684\u8f93\u51fa\u8fdb\u2f8f\u5206\u6790\uff0c\u83b7\u53d6\u5230\u54ea\u4e9b\u7ef4\u5ea6\u662f\u2f64\u4e8e\u63a7\u5236\u6570\u5b57\u7f16\u53f7\u7b49\u4fe1\u606f\u7684\u5373\u53ef\u4ee5\u5f97\u5230\u5177\u4f53\u7684\u8f93\u51fa\u3002\u2f7d\u5728\u8bad\u7ec3\u4e4b\u524d\u5f80\u5f80\u4e0d\u4f1a\u53bb\u89c4\u5b9a\u5b83\u3002</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/#gan_3","title":"GAN\u7b97\u6cd5\u4e2d\u7684\u5224\u522b\u5668","text":"<p>\u5bf9\u4e8e\u5224\u522b\u5668\u4e0d\u2f64\u591a\u8bf4\uff0c\u5f80\u5f80\u662f\u5e38\u2ec5\u7684\u5224\u522b\u5668\uff0c\u8f93\u2f0a\u4e3a\u56fe\u2f5a\uff0c\u8f93\u51fa\u4e3a\u56fe\u2f5a\u7684\u771f\u4f2a\u6807\u7b7e\u3002</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/#gan_4","title":"GAN\u7684\u8bad\u7ec3","text":"<p>1.\u5728\u566a\u58f0\u6570\u636e\u5206\u5e03\u4e2d\u968f\u673a\u91c7\u6837\uff0c\u8f93\u2f0a\u2f63\u6210\u6a21\u578b\uff0c\u5f97\u5230\u2f00\u7ec4\u5047\u6570\u636e\uff0c\u8bb0\u4e3aD(z)</p> <p>2.\u5728\u771f\u5b9e\u6570\u636e\u5206\u5e03\u4e2d\u968f\u673a\u91c7\u6837\uff0c\u4f5c\u4e3a\u771f\u5b9e\u6570\u636e\uff0c\u8bb0\u505ax\uff1b</p> <p>\u5c06\u524d\u4e24\u6b65\u4e2d\u67d0\u2f00\u6b65\u4ea7\u2f63\u7684\u6570\u636e\u4f5c\u4e3a\u5224\u522b\u2f79\u7edc\u7684\u8f93\u2f0a\uff08\u56e0\u6b64\u5224\u522b\u6a21\u578b\u7684\u8f93\u2f0a\u4e3a\u4e24\u7c7b\u6570\u636e\uff0c\u771f/\u5047\uff09\uff0c\u5224\u522b\u2f79\u7edc\u7684\u8f93\u51fa\u503c\u4e3a\u8be5\u8f93\u2f0a\u5c5e\u4e8e\u771f\u5b9e\u6570\u636e\u7684\u6982\u7387\uff0creal\u4e3a1\uff0cfake\u4e3a0.</p> <p>3.\u7136\u540e\u6839\u636e\u5f97\u5230\u7684\u6982\u7387\u503c\u8ba1\u7b97\u635f\u5931\u51fd\u6570\uff1b</p> <p>4.\u6839\u636e\u5224\u522b\u6a21\u578b\u548c\u2f63\u6210\u6a21\u578b\u7684\u635f\u5931\u51fd\u6570\uff0c\u53ef\u4ee5\u5229\u2f64\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\uff0c\u66f4\u65b0\u6a21\u578b\u7684\u53c2\u6570\u3002\uff08\u5148\u66f4\u65b0\u5224\u522b\u6a21\u578b\u7684\u53c2\u6570\uff0c\u7136\u540e\u901a\u8fc7\u518d\u91c7\u6837\u5f97\u5230\u7684\u566a\u58f0\u6570\u636e\u66f4\u65b0\u2f63\u6210\u5668\u7684\u53c2\u6570\uff09</p> <p>Warning</p> <p>\u2f63\u6210\u6a21\u578b\u4e0e\u5bf9\u6297\u6a21\u578b\u662f\u5b8c\u5168\u72ec\u2f74\u7684\u4e24\u4e2a\u6a21\u578b\uff0c\u4ed6\u4eec\u4e4b\u95f4\u6ca1\u6709\u4ec0\u4e48\u8054\u7cfb\u3002\u90a3\u4e48\u8bad\u7ec3\u91c7\u2f64\u7684\u2f24\u539f\u5219\u662f\u5355\u72ec\u4ea4\u66ff\u8fed\u4ee3\u8bad\u7ec3\u3002  </p> <p>GAN\u5f3a\u2f24\u4e4b\u5904\u5728\u4e8e\u80fd\u2f83\u52a8\u5b66\u4e60\u539f\u59cb\u771f\u5b9e\u6837\u672c\u96c6\u7684\u6570\u636e\u5206\u5e03\uff0c\u4e0d\u7ba1\u8fd9\u4e2a\u5206\u5e03\u591a\u4e48\u7684\u590d\u6742\uff0c\u53ea\u8981\u8bad\u7ec3\u7684\u2f9c\u591f\u597d\u5c31\u53ef\u4ee5\u5b66\u51fa\u6765\u3002</p> <p>\u4f20\u7edf\u7684\u673a\u5668\u5b66\u4e60\u2f45\u6cd5\uff0c\u2f00\u822c\u4f1a\u5148\u5b9a\u4e49\u2f00\u4e2a\u6a21\u578b\uff0c\u518d\u8ba9\u6570\u636e\u53bb\u5b66\u4e60\u3002</p> <p>\u2f50\u5982\u77e5\u9053\u539f\u59cb\u6570\u636e\u5c5e\u4e8e\u2fbc\u65af\u5206\u5e03\uff0c\u4f46\u4e0d\u77e5\u9053\u2fbc\u65af\u5206\u5e03\u7684\u53c2\u6570\uff0c\u8fd9\u65f6\u5b9a\u4e49\u2fbc\u65af\u5206\u5e03\uff0c\u7136\u540e\u5229\u2f64\u6570\u636e\u53bb\u5b66\u4e60\u2fbc\u65af\u5206\u5e03\u7684\u53c2\u6570\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u6a21\u578b\u3002</p> <p>\u518d\u2f50\u5982\u5b9a\u4e49\u2f00\u4e2a\u5206\u7c7b\u5668(\u5982SVM)\uff0c\u7136\u540e\u5f3a\u2f8f\u8ba9\u6570\u636e\u8fdb\u2f8f\u5404\u79cd\u2fbc\u7ef4\u6620\u5c04\uff0c\u6700\u540e\u53d8\u6210\u2f00\u4e2a\u7b80\u5355\u7684\u5206\u5e03\uff0cSVM\u53ef\u4ee5\u5f88\u8f7b\u6613\u7684\u8fdb\u2f8f\u2f06\u5206\u7c7b(\u867d\u7136SVM\u653e\u677e\u4e86\u8fd9\u79cd\u6620\u5c04\u5173\u7cfb\uff0c\u4f46\u4e5f\u7ed9\u4e86\u2f00\u4e2a\u6a21\u578b\uff0c\u5373\u6838\u6620\u5c04)\uff0c\u5176\u5b9e\u4e5f\u662f\u4e8b\u5148\u77e5\u9053\u8ba9\u6570\u636e\u8be5\u5982\u4f55\u6620\u5c04\uff0c\u53ea\u662f\u6620\u5c04\u7684\u53c2\u6570\u53ef\u4ee5\u5b66\u4e60\u3002</p> <p>\u4ee5\u4e0a\u8fd9\u4e9b\u2f45\u6cd5\u90fd\u5728\u76f4\u63a5\u6216\u95f4\u63a5\u7684\u544a\u8bc9\u6570\u636e\u8be5\u5982\u4f55\u6620\u5c04\uff0c\u53ea\u662f\u4e0d\u540c\u7684\u6620\u5c04\u2f45\u6cd5\u80fd\u2f12\u4e0d\u2f00\u6837\u3002</p> <p>\u2f7dGAN\u7684\u2f63\u6210\u6a21\u578b\u6700\u540e\u53ef\u4ee5\u901a\u8fc7\u566a\u58f0\u2f63\u6210\u2f00\u4e2a\u5b8c\u6574\u7684\u771f\u5b9e\u6570\u636e\uff08\u2f50\u5982\u2f08\u8138\uff09\uff0c\u8bf4\u660e\u2f63\u6210\u6a21\u578b\u638c\u63e1\u4e86\u4ece\u968f\u673a\u566a\u58f0\u5230\u2f08\u8138\u6570\u636e\u7684\u5206\u5e03\u89c4\u5f8b\u3002GAN\u2f00\u5f00\u59cb\u5e76\u4e0d\u77e5\u9053\u8fd9\u4e2a\u89c4\u5f8b\u662f\u4ec0\u4e48\u6837\uff0c\u4e5f\u5c31\u662f\u8bf4GAN\u662f\u901a\u8fc7\u2f00\u6b21\u6b21\u8bad\u7ec3\u540e\u5b66\u4e60\u5230\u7684\u771f\u5b9e\u6837\u672c\u96c6\u7684\u6570\u636e\u5206\u5e03\u3002</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/#gan_5","title":"GAN\u7684\u635f\u5931\u51fd\u6570","text":"<p>GAN\u8bad\u7ec3\u7684\u8fc7\u7a0b\u53ef\u4ee5\u63cf\u8ff0\u4e3a\u6c42\u89e3\u4e00\u4e2a\u4e8c\u5143\u51fd\u6570\u6781\u5c0f\u6781\u5927\u503c\u7684\u8fc7\u7a0b</p> \\[ V(D, G) = \\min_{G} \\max_{D} \\mathbb{E}_{x \\sim p_{\\text{data}}(x)} [\\log D(x)] + \\mathbb{E}_{z \\sim p_z(z)} [\\log(1 - D(G(z)))] \\] <p>\u8bad\u7ec3\u751f\u6210\u5668\u7684\u635f\u5931\u51fd\u6570\u5176\u5b9e\u662f\u5bf9\u6297\u635f\u5931V(D,G)\u4e2d\u5173\u4e8e\u566a\u58f0z\u7684\u9879\uff0c\u5176\u635f\u5931\u51fd\u6570\u4e3a\uff1a</p> \\[ L_G = \\mathbb{E}_{Z \\sim p_z (z)} [\\log(1 - D(G(z)))] \\] <p>\u8bad\u7ec3\u5224\u522b\u5668\u7684\u635f\u5931\u51fd\u6570\u5176\u5b9e\u662f\u5bf9\u6297\u635f\u5931V(D,G)\u4e2d\u5173\u4e8e\u6837\u672cx\u7684\u9879\uff0c\u5176\u635f\u5931\u51fd\u6570\u4e3a\uff1a</p> \\[ L_D = \\mathbb{E}_{x \\sim p_{\\text{data}}(x)} [\\log D(x)] + \\mathbb{E}_{\\hat{x} \\sim p_g(\\hat{x})} [\\log (1 - D(\\hat{x}))] \\] <p>\u5982\u9700\u66f4\u52a0\u6df1\u5165\u7684\u5b66\u4e60\uff0c\u53ef\u53c2\u8003\u8be5\u8bba\u6587\uff1aGenerative Adversarial Nets</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/#2-gan","title":"2. GAN\u7684\u5b9e\u73b0","text":"<p>\u4e09\u4e2a\u76ee\u6807</p> <ol> <li>\u7f16\u5199 GAN \u4ee3\u7801\uff0c\u5b9e\u73b0\u968f\u673a\u566a\u58f0\u5230\u624b\u5199\u6570\u5b57\u7684\u6620\u5c04\u3002</li> <li>\u8bad\u7ec3 GAN\uff0c\u4f7f\u5176\u80fd\u591f\u751f\u6210\u9ad8\u8d28\u91cf\u7684\u624b\u5199\u6570\u5b57\u56fe\u50cf\u3002</li> <li>\u53ef\u89c6\u5316\u751f\u6210\u7684\u56fe\u50cf\uff0c\u89c2\u5bdf GAN \u7684\u5b66\u4e60\u8fc7\u7a0b\u3002</li> </ol> <p>\u6ce8\u610f</p> <p>\u672c\u6a21\u5757\u5185\u5bb9\u7684\u4ee3\u7801\u6846\u67b6\u5df2\u5728\u6587\u6863\u4e2d\u57fa\u672c\u5b8c\u6210\uff0c\u6838\u5fc3\u90e8\u5206\u9700\u8981\u4f60\u81ea\u884c\u8865\u5145\u5b8c\u6574\uff0c\u5728\u9700\u8981\u8865\u5145\u7684\u90e8\u5206\u5df2\u7ecf\u6807\u6ce8# TODO\u5e76\u9644\u4e0a\u76f8\u5e94\u7684\u5185\u5bb9\u63d0\u793a\u3002</p> <p>\u5bfc\u5165\u6240\u9700\u7684\u6a21\u5757</p> <pre><code>import torch  # PyTorch \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\nimport torch.nn as nn  # \u795e\u7ecf\u7f51\u7edc\u76f8\u5173\u6a21\u5757\nimport numpy as np  # \u6570\u503c\u8ba1\u7b97\u5e93\nfrom torch.utils.data import DataLoader  # \u5904\u7406\u6570\u636e\u52a0\u8f7d\nfrom torchvision import datasets, transforms  # \u5904\u7406\u56fe\u50cf\u6570\u636e\u96c6\u548c\u6570\u636e\u53d8\u6362\nfrom torchvision.utils import save_image  # \u4fdd\u5b58\u751f\u6210\u7684\u56fe\u50cf\nimport os  # \u5904\u7406\u6587\u4ef6\u548c\u76ee\u5f55\u64cd\u4f5c\n</code></pre> <p>\u751f\u6210\u5668</p> <p>\u4f5c\u7528</p> <p>\u751f\u6210\u5668\u7684\u4f5c\u7528\u662f\u4ece\u968f\u673a\u566a\u58f0\uff08Latent Vector\uff09\u4e2d\u751f\u6210\u903c\u771f\u7684\u6570\u636e\u3002\u5b83\u7684\u76ee\u6807\u662f\u751f\u6210\u7684\u6570\u636e\u80fd\u591f\u9a97\u8fc7\u5224\u522b\u5668\uff0c\u4f7f\u5f97\u5224\u522b\u5668\u8bef\u4ee5\u4e3a\u662f\u771f\u5b9e\u6570\u636e\u3002</p> <p>\u8f93\u5165\u4e0e\u8f93\u51fa</p> <p>\u2022   \u8f93\u5165\uff1a\u968f\u673a\u566a\u58f0\u5411\u91cf z\uff08\u901a\u5e38\u670d\u4ece\u6b63\u6001\u5206\u5e03\u6216\u5747\u5300\u5206\u5e03\uff09</p> <p>\u2022   \u8f93\u51fa\uff1a\u4e0e\u771f\u5b9e\u6570\u636e\u5f62\u72b6\u76f8\u540c\u7684\u5408\u6210\u6570\u636e</p> <p>nn.Sequential \u662f\u4ec0\u4e48\uff1f</p> <p>\u4f5c\u7528</p> <p>\u5728 PyTorch \u4e2d\uff0cnn.Sequential \u662f\u4e00\u4e2a \u5bb9\u5668\uff08Container\uff09\uff0c\u7528\u4e8e\u5c06\u591a\u4e2a\u795e\u7ecf\u7f51\u7edc\u5c42 \u6309\u987a\u5e8f \u7ec4\u5408\u5728\u4e00\u8d77\u3002</p> <p>\u5b83\u7684\u4f5c\u7528\u76f8\u5f53\u4e8e \u4e00\u4e2a\u201c\u6d41\u6c34\u7ebf\u201d\uff0c\u8ba9\u6570\u636e\u6309\u7167\u8bbe\u5b9a\u597d\u7684\u987a\u5e8f\u4f9d\u6b21\u6d41\u7ecf\u591a\u4e2a\u5c42\uff0c\u800c\u4e0d\u9700\u8981\u6bcf\u4e00\u5c42\u90fd\u5355\u72ec\u5199 forward \u65b9\u6cd5\u3002</p> <p>\u4e3e\u4f8b</p> <p>model = nn.Sequential(</p> <p>nn.Linear(4, 8),  # \u7ebf\u6027\u5c42: \u8f93\u5165 4 \u7ef4 -&gt; \u8f93\u51fa 8 \u7ef4</p> <p>nn.ReLU(),        # \u6fc0\u6d3b\u51fd\u6570: ReLU</p> <p>nn.Linear(8, 2)   # \u7ebf\u6027\u5c42: \u8f93\u5165 8 \u7ef4 -&gt; \u8f93\u51fa 2 \u7ef4</p> <p>)</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/#_1","title":"\u5b9e\u73b0\u751f\u6210\u5668\u4ee3\u7801\uff1a","text":"<pre><code>class Generator(nn.Module):\n    def __init__(self, input_dim, hidden_dim, output_dim):\n        super(Generator, self).__init__()\n        self.model = nn.Sequential(\n            #TODO           # \u4f7f\u7528\u7ebf\u6027\u5c42\u5c06\u968f\u673a\u566a\u58f0\u6620\u5c04\u5230\u7b2c\u4e00\u4e2a\u9690\u85cf\u5c42\n            nn.ReLU(),      # \u4f7f\u7528 ReLU \u4f5c\u4e3a\u6fc0\u6d3b\u51fd\u6570\uff0c\u5e2e\u52a9\u6a21\u578b\u5b66\u4e60\u975e\u7ebf\u6027\u7279\u5f81\n            #TODO           # \u4f7f\u7528\u7ebf\u6027\u5c42\u5c06\u7b2c\u4e00\u4e2a\u9690\u85cf\u5c42\u6620\u5c04\u5230\u7b2c\u4e8c\u4e2a\u9690\u85cf\u5c42\n            nn.ReLU(),      # \u518d\u6b21\u4f7f\u7528 ReLU \u6fc0\u6d3b\u51fd\u6570\n            #TODO           # \u4f7f\u7528\u7ebf\u6027\u5c42\u5c06\u7b2c\u4e8c\u4e2a\u9690\u85cf\u5c42\u6620\u5c04\u5230\u8f93\u51fa\u5c42\uff0c\u8f93\u51fa\u4e3a\u56fe\u50cf\u7684\u50cf\u7d20\u5927\u5c0f\n            nn.Tanh()       # \u4f7f\u7528 Tanh \u5c06\u8f93\u51fa\u5f52\u4e00\u5316\u5230 [-1, 1]\uff0c\u9002\u7528\u4e8e\u56fe\u50cf\u751f\u6210\n        )\n\n    def forward(self, x):\n        #TODO               # \u524d\u5411\u4f20\u64ad\uff1a\u5c06\u8f93\u5165 x \u901a\u8fc7\u6a21\u578b\u8fdb\u884c\u8ba1\u7b97\uff0c\u5f97\u5230\u751f\u6210\u7684\u56fe\u50cf\n</code></pre> <p>\u5224\u522b\u5668</p> <p>\u4f5c\u7528</p> <p>\u5224\u522b\u5668\u7684\u4f5c\u7528\u662f\u533a\u5206\u771f\u5b9e\u6570\u636e\u4e0e\u751f\u6210\u5668\u751f\u6210\u7684\u6570\u636e\u3002\u5b83\u7684\u76ee\u6807\u662f\u5c3d\u53ef\u80fd\u6b63\u786e\u5730\u5224\u65ad\u8f93\u5165\u6570\u636e\u662f\u771f\u5b9e\u6570\u636e\u8fd8\u662f\u751f\u6210\u6570\u636e\u3002</p> <p>\u8f93\u5165\u4e0e\u8f93\u51fa</p> <p>\u2022   \u8f93\u5165\uff1a\u771f\u5b9e\u6570\u636e x \u6216\u751f\u6210\u6570\u636e G(z)\u3002</p> <p>\u2022   \u8f93\u51fa\uff1a\u4e00\u4e2a\u4ecb\u4e8e [0,1] \u4e4b\u95f4\u7684\u6570\uff0c\u8868\u793a\u6570\u636e\u662f\u771f\u5b9e\u7684\u6982\u7387\u3002</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/#_2","title":"\u5b9e\u73b0\u5224\u522b\u5668\u4ee3\u7801\uff1a","text":"<pre><code>class Discriminator(nn.Module):\n    def __init__(self, input_dim, hidden_dim):\n        super(Discriminator, self).__init__()\n        self.model = nn.Sequential(\n            #TODO   # \u8f93\u5165\u5c42\u5230\u7b2c\u4e00\u4e2a\u9690\u85cf\u5c42\uff0c\u4f7f\u7528\u7ebf\u6027\u5c42\n            #TODO   # \u4f7f\u7528 LeakyReLU \u6fc0\u6d3b\u51fd\u6570\uff0c\u907f\u514d\u68af\u5ea6\u6d88\u5931\u95ee\u9898\uff0cnegative_slope\u53c2\u6570\u8bbe\u7f6e\u4e3a0.1\n            #TODO   # \u7b2c\u4e00\u4e2a\u9690\u85cf\u5c42\u5230\u7b2c\u4e8c\u4e2a\u9690\u85cf\u5c42\uff0c\u4f7f\u7528\u7ebf\u6027\u5c42\n            #TODO   # \u518d\u6b21\u4f7f\u7528 LeakyReLU \u6fc0\u6d3b\u51fd\u6570\uff0cnegative_slope\u53c2\u6570\u8bbe\u7f6e\u4e3a0.1\n            #TODO   # \u7b2c\u4e8c\u4e2a\u9690\u85cf\u5c42\u5230\u8f93\u51fa\u5c42\uff0c\u4f7f\u7528\u7ebf\u6027\u5c42\n            #TODO   # \u4f7f\u7528 Sigmoid \u6fc0\u6d3b\u51fd\u6570\uff0c\u5c06\u8f93\u51fa\u8303\u56f4\u9650\u5236\u5728 [0, 1]\n        )\n\n    def forward(self, x):\n        #TODO       # \u524d\u5411\u4f20\u64ad\uff1a\u5c06\u8f93\u5165 x \u901a\u8fc7\u6a21\u578b\u8fdb\u884c\u8ba1\u7b97\uff0c\u5f97\u5230\u5224\u522b\u7ed3\u679c\n</code></pre> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98981: \u4e3a\u4ec0\u4e48GAN\u7684\u8bad\u7ec3\u88ab\u63cf\u8ff0\u4e3a\u4e00\u4e2a\u5bf9\u6297\u8fc7\u7a0b\uff1f\u8fd9\u79cd\u5bf9\u6297\u673a\u5236\u5982\u4f55\u4fc3\u8fdb\u751f\u6210\u5668\u7684\u6539\u8fdb\uff1f</p> <p>\u601d\u8003\u98982: ReLU\u548cLeakyReLU\u5404\u6709\u4ec0\u4e48\u7279\u5f81\uff1f\u4e3a\u4ec0\u4e48\u5728\u751f\u6210\u5668\u4e2d\u4f7f\u7528ReLU\u800c\u5728\u5224\u522b\u5668\u4e2d\u4f7f\u7528LeakyReLU\uff1f</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/#_3","title":"\u5b9a\u4e49\u4e3b\u51fd\u6570\uff0c\u5728\u4e3b\u51fd\u6570\u4e2d\u5b8c\u6210\u4ee5\u4e0b\u8fc7\u7a0b\uff1a","text":"<ol> <li>\u6570\u636e\u52a0\u8f7d\uff1a \u52a0\u8f7d\u5e76\u9884\u5904\u7406\u6570\u636e\u96c6\u3002\u5bf9\u4e8eGAN\u7684\u8bad\u7ec3\uff0c\u901a\u5e38\u9700\u8981\u5c06\u6570\u636e\u96c6\u8f6c\u6362\u4e3a\u5f20\u91cf\u683c\u5f0f\uff0c\u5e76\u8fdb\u884c\u9002\u5f53\u7684\u5f52\u4e00\u5316\u3002</li> <li>\u6a21\u578b\u521d\u59cb\u5316\uff1a \u521b\u5efa\u751f\u6210\u5668\u548c\u5224\u522b\u5668\u6a21\u578b\u5b9e\u4f8b\uff0c\u5e76\u5c06\u5b83\u4eec\u79fb\u52a8\u5230\u5408\u9002\u7684\u8bbe\u5907\uff08\u5982GPU\uff09\u4e0a\u3002</li> <li>\u4f18\u5316\u5668\u548c\u635f\u5931\u51fd\u6570\u5b9a\u4e49\uff1a \u4e3a\u751f\u6210\u5668\u548c\u5224\u522b\u5668\u5206\u522b\u5b9a\u4e49\u4f18\u5316\u5668\uff08\u5982Adam\uff09\uff0c\u5e76\u8bbe\u7f6e\u9002\u5f53\u7684\u5b66\u4e60\u7387\u548c\u5176\u4ed6\u8d85\u53c2\u6570\u3002 \u5b9a\u4e49\u635f\u5931\u51fd\u6570\uff08\u5982\u4e8c\u5143\u4ea4\u53c9\u71b5\u635f\u5931\uff09\u7528\u4e8e\u8bc4\u4f30\u6a21\u578b\u6027\u80fd\u3002</li> <li>\u8bad\u7ec3\u5faa\u73af\uff1a   \u8fed\u4ee3\u591a\u4e2aepoch\u8fdb\u884c\u8bad\u7ec3\u3002\u5728\u6bcf\u4e2aepoch\u4e2d\uff0c\u904d\u5386\u6570\u636e\u96c6\u5e76\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a</li> <li>\u8bad\u7ec3\u5224\u522b\u5668\uff1a\u4f7f\u7528\u771f\u5b9e\u6570\u636e\u548c\u751f\u6210\u7684\u5047\u6570\u636e\u66f4\u65b0\u5224\u522b\u5668\u7684\u53c2\u6570\u3002</li> <li>\u8bad\u7ec3\u751f\u6210\u5668\uff1a\u901a\u8fc7\u751f\u6210\u5047\u6570\u636e\u5e76\u8bd5\u56fe\u6b3a\u9a97\u5224\u522b\u5668\u6765\u66f4\u65b0\u751f\u6210\u5668\u7684\u53c2\u6570\u3002</li> <li>\u8bb0\u5f55\u635f\u5931\u503c\u5230TensorBoard\uff0c\u4ee5\u76d1\u63a7\u8bad\u7ec3\u8fc7\u7a0b\u3002</li> <li>\u7ed3\u679c\u4fdd\u5b58\uff1a \u5728\u6bcf\u4e2aepoch\u7ed3\u675f\u65f6\uff0c\u751f\u6210\u4e00\u4e9b\u793a\u4f8b\u56fe\u50cf\u5e76\u4fdd\u5b58\u5230TensorBoard\uff0c\u4ee5\u4fbf\u89c2\u5bdf\u751f\u6210\u5668\u7684\u8fdb\u5c55\u3002</li> </ol> <pre><code>def main():\n\n    # \u8bbe\u5907\u914d\u7f6e\uff1a\u4f7f\u7528 GPU\uff08\u5982\u679c\u53ef\u7528\uff09\uff0c\u5426\u5219\u4f7f\u7528 CPU\n    device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n\n    # \u8bbe\u7f6e\u6a21\u578b\u548c\u8bad\u7ec3\u7684\u8d85\u53c2\u6570\n    input_dim = 100  # \u751f\u6210\u5668\u8f93\u5165\u7684\u968f\u673a\u566a\u58f0\u5411\u91cf\u7ef4\u5ea6\n    hidden_dim = 256  # \u9690\u85cf\u5c42\u7ef4\u5ea6\n    output_dim = 28 * 28  # MNIST \u6570\u636e\u96c6\u56fe\u50cf\u5c3a\u5bf8\uff0828x28\uff09\n    batch_size = 128  # \u8bad\u7ec3\u65f6\u7684\u6279\u91cf\u5927\u5c0f\n    num_epoch = 30 # \u8bad\u7ec3\u7684\u603b\u8f6e\u6570\n\n    # \u52a0\u8f7d MNIST \u6570\u636e\u96c6\n    train_dataset = datasets.MNIST(root=\"./data/\", train=True, transform=transforms.ToTensor(), download=True)\n    train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)\n\n    # \u521b\u5efa\u751f\u6210\u5668G\u548c\u5224\u522b\u5668D\uff0c\u5e76\u79fb\u52a8\u5230 GPU\uff08\u5982\u679c\u53ef\u7528\uff09\n    #TODO   # \u751f\u6210\u5668G\n    #TOOD   # \u5224\u522b\u5668D\n\n    # \u5b9a\u4e49\u9488\u5bf9\u751f\u6210\u5668G\u7684\u4f18\u5316\u5668optim_G\u548c\u9488\u5bf9\u5224\u522b\u5668D\u7684\u4f18\u5316\u5668optim_D\uff0c\u8981\u6c42\u4f7f\u7528Adam\u4f18\u5316\u5668\uff0c\u5b66\u4e60\u7387\u8bbe\u7f6e\u4e3a0.0002\n    #TODO  # \u751f\u6210\u5668\u4f18\u5316\u5668optim_G\n    #TODO  # \u5224\u522b\u5668\u4f18\u5316\u5668optim_D\n\n    loss_func = nn.BCELoss()  # \u4f7f\u7528\u4e8c\u5143\u4ea4\u53c9\u71b5\u635f\u5931\n\n    # \u5f00\u59cb\u8bad\u7ec3\n    for epoch in range(num_epoch):\n        total_loss_D, total_loss_G = 0, 0\n        for i, (real_images, _) in enumerate(train_loader):\n            loss_D = train_discriminator(real_images, D, G, loss_func, optim_D, batch_size, input_dim, device)  # \u8bad\u7ec3\u5224\u522b\u5668\n            loss_G = train_generator(D, G, loss_func, optim_G, batch_size, input_dim, device)  # \u8bad\u7ec3\u751f\u6210\u5668\n\n            total_loss_D += loss_D\n            total_loss_G += loss_G\n\n            # \u6bcf 100 \u6b65\u6253\u5370\u4e00\u6b21\u635f\u5931\n            if (i + 1) % 100 == 0 or (i + 1) == len(train_loader):\n                print(f'Epoch {epoch:02d} | Step {i + 1:04d} / {len(train_loader)} | Loss_D {total_loss_D / (i + 1):.4f} | Loss_G {total_loss_G / (i + 1):.4f}')\n\n        # \u751f\u6210\u5e76\u4fdd\u5b58\u793a\u4f8b\u56fe\u50cf\n        with torch.no_grad():\n            noise = torch.randn(64, input_dim, device=device)\n            fake_images = G(noise).view(-1, 1, 28, 28)  # \u8c03\u6574\u5f62\u72b6\u4e3a\u56fe\u50cf\u683c\u5f0f\n\n            # \u8bb0\u5f55\u751f\u6210\u7684\u56fe\u50cf\u5230 TensorBoard\n            img_grid = torchvision.utils.make_grid(fake_images, normalize=True)\n            writer.add_image('Generated Images', img_grid, epoch)\n</code></pre>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/#train_discriminatortrain_generator","title":"\u5b9e\u73b0train_discriminator\u548ctrain_generator","text":"<pre><code>def train_discriminator(real_images, D, G, loss_func, optim_D, batch_size, input_dim, device):\n\n    real_images = real_images.view(-1, 28 * 28).to(device)  # \u83b7\u53d6\u771f\u5b9e\u56fe\u50cf\u5e76\u5c55\u5e73\n    real_output = D(real_images)  # \u5224\u522b\u5668\u9884\u6d4b\u771f\u5b9e\u56fe\u50cf\n    #TODO   # \u8ba1\u7b97\u771f\u5b9e\u6837\u672c\u7684\u635f\u5931real_loss\n\n    noise = torch.randn(batch_size, input_dim, device=device)  # \u751f\u6210\u968f\u673a\u566a\u58f0\n    fake_images = G(noise).detach()  # \u751f\u6210\u5047\u56fe\u50cf\uff08detach \u907f\u514d\u68af\u5ea6\u4f20\u9012\u7ed9 G\uff09\n    fake_output = D(fake_images)  # \u5224\u522b\u5668\u9884\u6d4b\u5047\u56fe\u50cf\n    #TODO   # \u8ba1\u7b97\u5047\u6837\u672c\u7684\u635f\u5931fake_loss\n\n    loss_D = real_loss + fake_loss  # \u5224\u522b\u5668\u603b\u635f\u5931\n    optim_D.zero_grad()  # \u6e05\u7a7a\u68af\u5ea6\n    loss_D.backward()  # \u53cd\u5411\u4f20\u64ad\n    optim_D.step()  # \u66f4\u65b0\u5224\u522b\u5668\u53c2\u6570\n\n    return loss_D.item()  # \u8fd4\u56de\u6807\u91cf\u635f\u5931 \n\ndef train_generator(D, G, loss_func, optim_G, batch_size, input_dim, device):\n\n    noise = torch.randn(batch_size, input_dim, device=device)  # \u751f\u6210\u968f\u673a\u566a\u58f0\n    fake_images = G(noise)  # \u751f\u6210\u5047\u56fe\u50cf\n    fake_output = D(fake_images)  # \u5224\u522b\u5668\u5bf9\u5047\u56fe\u50cf\u7684\u5224\u65ad\n    #TODO # \u8ba1\u7b97\u751f\u6210\u5668\u635f\u5931\uff08\u5e0c\u671b\u751f\u6210\u7684\u56fe\u50cf\u5224\u522b\u4e3a\u771f\uff09\n\n    optim_G.zero_grad()  # \u6e05\u7a7a\u68af\u5ea6\n    loss_G.backward()  # \u53cd\u5411\u4f20\u64ad\n    optim_G.step()  # \u66f4\u65b0\u751f\u6210\u5668\u53c2\u6570\n\n    return loss_G.item()  # \u8fd4\u56de\u6807\u91cf\u635f\u5931\n</code></pre>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/#main","title":"\u6267\u884cmain()\u51fd\u6570\uff1a","text":"<pre><code>if __name__ == '__main__':\n    main()\n</code></pre> <p>\u4ec0\u4e48\u662f\u4f18\u5316\u5668</p> <p>\u4f18\u5316\u5668\uff08Optimizer\uff09\u662f\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7528\u4e8e\u66f4\u65b0\u795e\u7ecf\u7f51\u7edc\u53c2\u6570\u7684\u7b97\u6cd5\u3002\u5b83\u6839\u636e\u68af\u5ea6\u4e0b\u964d\u7684\u539f\u7406\u8c03\u6574\u6a21\u578b\u7684\u6743\u91cd\uff0c\u4f7f\u635f\u5931\u51fd\u6570\uff08Loss\uff09\u6700\u5c0f\u5316\uff0c\u4ece\u800c\u63d0\u9ad8\u6a21\u578b\u7684\u6027\u80fd\u3002</p> <p>\u5728 PyTorch \u4e2d\uff0c\u4f18\u5316\u5668\u901a\u5e38\u7528\u4e8e\u8ba1\u7b97\u68af\u5ea6\u540e\u66f4\u65b0\u6743\u91cd\uff0c\u5178\u578b\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li> <p>\u524d\u5411\u4f20\u64ad \u8ba1\u7b97\u635f\u5931 loss</p> </li> <li> <p>\u53cd\u5411\u4f20\u64ad \u8ba1\u7b97\u68af\u5ea6 loss.backward()</p> </li> <li> <p>\u6e05\u7a7a\u65e7\u68af\u5ea6 optimizer.zero_grad()</p> </li> <li> <p>\u66f4\u65b0\u53c2\u6570 optimizer.step()</p> </li> </ol> <p>\u4e8c\u5143\u4ea4\u53c9\u71b5\u635f\u5931</p> <p>\u4e8c\u5143\u4ea4\u53c9\u71b5\u635f\u5931\uff08BCE Loss\uff09 \u662f\u6df1\u5ea6\u5b66\u4e60\u4e2d\u5e38\u7528\u7684\u4e00\u79cd\u635f\u5931\u51fd\u6570\uff0c\u4e3b\u8981\u7528\u4e8e\u4e8c\u5206\u7c7b\u4efb\u52a1\uff0c\u5982\u5224\u522b\u5668\u7684\u771f\u5047\u5206\u7c7b\u4efb\u52a1\u3002\u5176\u6570\u5b66\u8868\u8fbe\u5f0f\u5982\u4e0b\uff1a</p> \\[ L = - \\frac{1}{N} \\sum_{i=1}^{N} \\left[ y_i \\log(\\hat{y}_i) + (1-y_i) \\log(1-\\hat{y}_i) \\right] \\] <p>\u8fd9\u4e2a\u635f\u5931\u51fd\u6570\u7684\u76ee\u6807\u662f\uff1a</p> <ul> <li>\u5982\u679c\u6837\u672c\u7684\u6807\u7b7e\\(y_i=1\\)\uff08\u771f\u5b9e\u6570\u636e\uff09\uff0c\u90a3\u4e48\u6700\u5c0f\u5316\u635f\u5931\u51fd\u6570\\(L\\)\u5c31\u662f\u5728\u6700\u5927\u5316\\(\\log(\\hat{y}_i)\\)\uff0c\u5373\u6700\u5927\u5316\\(\\hat{y}_i\\)</li> <li>\u5982\u679c\u6837\u672c\u7684\u6807\u7b7e\\(y_i=0\\)\uff08\u865a\u5047\u6570\u636e\uff09\uff0c\u90a3\u4e48\u6700\u5c0f\u5316\u635f\u5931\u51fd\u6570\\(L\\)\u5c31\u662f\u5728\u6700\u5927\u5316\\(\\log(1-\\hat{y}_i)\\)\uff0c\u5373\u6700\u5c0f\u5316\\(\\hat{y}_i\\)</li> </ul> <p>\u4e3a\u4ec0\u4e48\u9002\u7528\u4e8e GAN\uff1f</p> <p>\u5728 GAN \u4e2d\uff1a</p> <p>\u2022\u5224\u522b\u5668 D \u9700\u8981\u5224\u65ad\u8f93\u5165\u6570\u636e\u662f\u771f\u5b9e\u6570\u636e\uff081\uff09\u8fd8\u662f\u5047\u6570\u636e\uff080\uff09\uff0c\u56e0\u6b64 BCE \u4f5c\u4e3a\u635f\u5931\u51fd\u6570\u662f\u5408\u7406\u7684\u3002</p> <p>\u2022\u751f\u6210\u5668 G \u7684\u76ee\u6807\u662f\u6b3a\u9a97\u5224\u522b\u5668\uff0c\u8ba9\u5224\u522b\u5668\u628a\u5047\u6570\u636e\u5f53\u6210\u771f\u7684\uff0c\u56e0\u6b64 BCE \u4e5f\u9002\u7528\u4e8e G \u7684\u635f\u5931\u8ba1\u7b97\u3002</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/#3-tensorboard","title":"3. \u4f7f\u7528 TensorBoard \u53ef\u89c6\u5316\u8bad\u7ec3\u8fc7\u7a0b","text":"<p>\u4ec0\u4e48\u662f TensorBoard\uff1f</p> <p>TensorBoard \u662f\u4e00\u4e2a\u7528\u4e8e\u53ef\u89c6\u5316\u548c\u76d1\u63a7\u673a\u5668\u5b66\u4e60\u5b9e\u9a8c\u7684\u5de5\u5177\u3002\u5b83\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5b9e\u65f6\u67e5\u770b\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u635f\u5931\u53d8\u5316\u3001\u751f\u6210\u7684\u56fe\u50cf\u8d28\u91cf\u7b49\u4fe1\u606f\uff0c\u4ece\u800c\u66f4\u76f4\u89c2\u5730\u7406\u89e3\u6a21\u578b\u7684\u8bad\u7ec3\u6548\u679c\u3002</p> <p>\u76ee\u6807</p> <ol> <li>\u5b66\u4f1a\u4f7f\u7528 TensorBoard \u8bb0\u5f55\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u635f\u5931\u503c\u3002</li> <li>\u5b66\u4f1a\u4f7f\u7528 TensorBoard \u53ef\u89c6\u5316\u751f\u6210\u7684\u56fe\u50cf\u3002</li> <li>\u5b66\u4f1a\u542f\u52a8 TensorBoard \u5e76\u67e5\u770b\u8bad\u7ec3\u8fc7\u7a0b\u3002</li> </ol>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/#tensorboard","title":"\u5b89\u88c5 TensorBoard","text":"<pre><code>pip install tensorboard==2.18.0 -i https://pypi.mirrors.ustc.edu.cn/simple\n</code></pre>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/#tensorboard_1","title":"\u5728\u8bad\u7ec3\u4ee3\u7801\u4e2d\u5bfc\u5165 TensorBoard \u76f8\u5173\u6a21\u5757","text":"<pre><code>from torch.utils.tensorboard import SummaryWriter\n</code></pre>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/#summarywriter","title":"\u521d\u59cb\u5316SummaryWriter","text":"<p>\u521b\u5efa\u4e00\u4e2a<code>SummaryWriter</code>\u5b9e\u4f8b\uff0c\u5b83\u5c06\u7528\u4e8e\u8bb0\u5f55\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u3002\u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u76ee\u5f55\u6765\u5b58\u50a8\u65e5\u5fd7\u6587\u4ef6\uff1a</p> <pre><code>writer = SummaryWriter('runs/experiment_1')\n</code></pre>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/#_4","title":"\u8bb0\u5f55\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e","text":"<p>\u5728\u8bad\u7ec3\u5faa\u73af\u4e2d\uff0c\u4f7f\u7528<code>SummaryWriter</code>\u8bb0\u5f55\u5404\u79cd\u6307\u6807\uff0c\u4f8b\u5982\u635f\u5931\u3001\u51c6\u786e\u7387\u3001\u6a21\u578b\u53c2\u6570\u7b49\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e38\u89c1\u7684\u8bb0\u5f55\u65b9\u5f0f\uff1a</p> <ul> <li>\u8bb0\u5f55\u6807\u91cf\uff08\u5982\u635f\u5931\u548c\u51c6\u786e\u7387\uff09\uff1a</li> </ul> <pre><code>for epoch in range(num_epochs):\n    for i, (inputs, labels) in enumerate(train_loader):\n        # \u524d\u5411\u4f20\u64ad\u3001\u8ba1\u7b97\u635f\u5931\u3001\u53cd\u5411\u4f20\u64ad\u548c\u4f18\u5316\u6b65\u9aa4\n        # ...\n\n        # \u5047\u8bbeloss\u662f\u8ba1\u7b97\u5f97\u5230\u7684\u635f\u5931\n        writer.add_scalar('Loss/train', loss.item(), epoch * len(train_loader) + i)\n\n        # \u5047\u8bbeaccuracy\u662f\u8ba1\u7b97\u5f97\u5230\u7684\u51c6\u786e\u7387\n        writer.add_scalar('Accuracy/train', accuracy, epoch * len(train_loader) + i)\n</code></pre>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/#summarywriter_1","title":"\u5173\u95edSummaryWriter","text":"<p>\u5728\u8bad\u7ec3\u7ed3\u675f\u540e\uff0c\u5173\u95ed<code>SummaryWriter</code>\u4ee5\u91ca\u653e\u8d44\u6e90\uff1a</p> <pre><code>writer.close()\n</code></pre>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%80%EF%BC%9A%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88GAN%EF%BC%89/#tensorboard_2","title":"\u542f\u52a8 TensorBoard","text":"<p>\u5728\u8bad\u7ec3\u5b8c\u6210\u540e\uff0c\u5728bash\u4e2d\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8 TensorBoard\uff1a <pre><code>tensorboard --logdir=./logs\n</code></pre></p> <p>\u7136\u540e\u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u8bbf\u95ee http://localhost:6006 \u67e5\u770b\u8bad\u7ec3\u8fc7\u7a0b\u7684\u53ef\u89c6\u5316\u7ed3\u679c\u3002</p> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98983: \u5c1d\u8bd5\u4f7f\u7528TensorBoard\u53ef\u89c6\u5316GAN\u6a21\u578b\u7684\u751f\u6210\u5668\u548c\u5224\u522b\u5668\u7684\u6a21\u578b\u7ed3\u6784\u56fe\u3002</p> <p>\u200b    </p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%89%EF%BC%9AWGAN/","title":"\u5b9e\u9a8c\u4efb\u52a1\u4e09\uff1aWGAN","text":"<p>\u76ee\u6807</p> <ul> <li> <p>\u4e86\u89e3 WGAN \u7684\u6838\u5fc3\u601d\u60f3\u53ca\u5176\u4e0e\u4f20\u7edf GAN \u7684\u4e0d\u540c\u4e4b\u5904\u3002</p> </li> <li> <p>\u638c\u63e1 WGAN \u7684\u751f\u6210\u5668\u548c\u5224\u522b\u5668\u8bbe\u8ba1\u3002</p> </li> <li> <p>\u4f7f\u7528 PyTorch \u642d\u5efa\u5e76\u8bad\u7ec3 WGAN \u751f\u6210 MNIST \u624b\u5199\u6570\u5b57\u3002</p> </li> <li> <p>\u5b66\u4e60\u5982\u4f55\u901a\u8fc7 Wasserstein \u8ddd\u79bb\u4f18\u5316 GAN \u6a21\u578b\u7684\u8bad\u7ec3\u7a33\u5b9a\u6027\u3002</p> </li> </ul>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%89%EF%BC%9AWGAN/#1-wgan-gan","title":"1. WGAN \u4e0e\u4f20\u7edf GAN \u7684\u533a\u522b","text":"<p>WGAN\uff08Wasserstein Generative Adversarial Network\uff09\u662f\u5bf9\u4f20\u7edf GAN \u7684\u6539\u8fdb\uff0c\u5b83\u901a\u8fc7\u6700\u5c0f\u5316 Wasserstein \u8ddd\u79bb\u6765\u5ea6\u91cf\u751f\u6210\u6570\u636e\u4e0e\u771f\u5b9e\u6570\u636e\u5206\u5e03\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u4ece\u800c\u907f\u514d\u4e86 GAN \u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u6a21\u5f0f\u5d29\u6e83\u548c\u68af\u5ea6\u6d88\u5931\u95ee\u9898\u3002</p> <p>WGAN \u76f8\u6bd4\u4f20\u7edf GAN \u7684\u6539\u8fdb</p> <p>\u2022   Wasserstein \u8ddd\u79bb\uff1a\u4f20\u7edf GAN \u4f7f\u7528 JS Divergence \u4f5c\u4e3a\u635f\u5931\u51fd\u6570\uff0c\u53ef\u80fd\u5bfc\u81f4\u8bad\u7ec3\u4e0d\u7a33\u5b9a\uff0c\u5c24\u5176\u662f\u5728\u6570\u636e\u5206\u5e03\u5dee\u5f02\u8f83\u5927\u65f6\u3002WGAN \u4f7f\u7528 Wasserstein \u8ddd\u79bb\u6765\u5ea6\u91cf\u751f\u6210\u6570\u636e\u4e0e\u771f\u5b9e\u6570\u636e\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u5b83\u5177\u6709\u66f4\u597d\u7684\u6570\u5b66\u6027\u8d28\uff0c\u5c24\u5176\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u80fd\u63d0\u4f9b\u66f4\u52a0\u5e73\u6ed1\u7684\u635f\u5931\u51fd\u6570\u3002</p> <p>\u2022   \u6743\u91cd\u88c1\u526a\uff1a\u4e3a\u4fdd\u8bc1 Lipschitz \u8fde\u7eed\u6027\uff0cWGAN \u901a\u8fc7\u88c1\u526a\u5224\u522b\u5668\u7684\u6743\u91cd\u6765\u907f\u514d\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u4e0d\u7a33\u5b9a\u6027\u3002\u8fd9\u4e00\u65b9\u6cd5\u53ef\u4ee5\u6709\u6548\u907f\u514d\u4f20\u7edf GAN \u4e2d\u5224\u522b\u5668\u8f93\u51fa\u8fc7\u5927\u7684\u95ee\u9898\u3002</p> <p>\u2022   \u4e0d\u4f7f\u7528 Sigmoid \u6fc0\u6d3b\uff1aWGAN \u7684\u5224\u522b\u5668\u8f93\u51fa\u6ca1\u6709 Sigmoid \u6fc0\u6d3b\u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u4e0d\u9700\u8981\u5c06\u8f93\u51fa\u9650\u5236\u5728 [0,1] \u4e4b\u95f4\u3002</p> <p>\u5982\u9700\u66f4\u52a0\u6df1\u5165\u7684\u5b66\u4e60\uff0c\u53ef\u53c2\u8003\u8be5\u8bba\u6587\uff1aWasserstein GAN</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%89%EF%BC%9AWGAN/#2-wgan","title":"2. WGAN\u7684\u5b9e\u73b0","text":"<p>\u90e8\u5206\u7ec6\u8282\u53ef\u53c2\u8003\u5b9e\u9a8c\u4efb\u52a1\u4e00\u548c\u4e8c\u3002</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%89%EF%BC%9AWGAN/#_1","title":"\u751f\u6210\u5668","text":"<p>WGAN \u751f\u6210\u5668\u7684\u8bbe\u8ba1\u4e0e DCGAN \u7c7b\u4f3c\uff0c\u4f46\u4f1a\u4f7f\u7528 Tanh \u6fc0\u6d3b\u51fd\u6570\u5c06\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u9650\u5236\u5728 [-1, 1] \u7684\u8303\u56f4\u5185\u3002</p> <pre><code>class Generator(nn.Module):\n    def __init__(self, input_dim):\n        super(Generator, self).__init__()\n\n        # 1. \u8f93\u5165\u5c42\uff1a\u5c06 100 \u7ef4\u968f\u673a\u566a\u58f0\u4eceinput_dim\u6295\u5f71\u5230 32x32\uff081024 \u7ef4\uff09\n        #TODO   # \u7ebf\u6027\u53d8\u6362fc1\uff0c\u5c06\u8f93\u5165\u566a\u58f0\u6269\u5c55\u5230 1024 \u7ef4\n\n        self.br1 = nn.Sequential(\n            #TODO   # \u6279\u5f52\u4e00\u5316\uff0c\u52a0\u901f\u8bad\u7ec3\u5e76\u7a33\u5b9a\u6536\u655b\n            #TODO   # ReLU \u6fc0\u6d3b\u51fd\u6570\uff0c\u5f15\u5165\u975e\u7ebf\u6027\n        )\n\n        # 2. \u7b2c\u4e8c\u5c42\uff1a\u5c06 1024 \u7ef4\u6570\u636e\u6620\u5c04\u5230 128 * 7 * 7 \u7684\u7279\u5f81\u56fe\u7ef4\u6570\n        #TODO   # \u7ebf\u6027\u53d8\u6362\uff0c\u5c06\u6570\u636e\u53d8\u6362\u4e3a\u9002\u5408\u5377\u79ef\u5c42\u7684\u7ef4\u6570\u5927\u5c0f\n\n        self.br2 = nn.Sequential(\n            #TODO   # \u6279\u5f52\u4e00\u5316\n            #TODO   # ReLU \u6fc0\u6d3b\u51fd\u6570\n        )\n\n        # 3. \u53cd\u5377\u79ef\u5c42 1\uff1a\u4e0a\u91c7\u6837\uff0c\u8f93\u51fa 64 \u901a\u9053\u7684 14\u00d714 \u7279\u5f81\u56fe\n        self.conv1 = nn.Sequential(\n            #TODO   # \u53cd\u5377\u79ef\uff1a\u5c06 7x7 \u653e\u5927\u5230 14x14\n            #TODO   # \u5f52\u4e00\u5316\uff0c\u7a33\u5b9a\u8bad\u7ec3\n            #TODO   # ReLU \u6fc0\u6d3b\u51fd\u6570\n        )\n\n        # 4. \u53cd\u5377\u79ef\u5c42 2\uff1a\u8f93\u51fa 1 \u901a\u9053\u7684 28\u00d728 \u56fe\u50cf\n        self.conv2 = nn.Sequential(\n            #TODO   # \u53cd\u5377\u79ef\uff1a\u5c06 14x14 \u653e\u5927\u5230 28x28\n            #TODO    # WGAN \u9700\u8981\u4f7f\u7528 Tanh \u6fc0\u6d3b\u51fd\u6570\uff0c\u5c06\u8f93\u51fa\u8303\u56f4\u9650\u5236\u5728 [-1, 1]\n        )\n\n    def forward(self, x):\n        x = self.br1(self.fc1(x))  # \u901a\u8fc7\u5168\u8fde\u63a5\u5c42\uff0c\u8fdb\u884c BatchNorm \u548c ReLU \u6fc0\u6d3b\n        x = self.br2(self.fc2(x))  # \u7ee7\u7eed\u901a\u8fc7\u5168\u8fde\u63a5\u5c42\uff0c\u8fdb\u884c BatchNorm \u548c ReLU \u6fc0\u6d3b\n        x = x.reshape(-1, 128, 7, 7)  # \u53d8\u5f62\u4e3a\u9002\u5408\u5377\u79ef\u8f93\u5165\u7684\u5f62\u72b6 (batch, 128, 7, 7)\n        x = self.conv1(x)  # \u53cd\u5377\u79ef\uff1a\u4e0a\u91c7\u6837\u5230 14x14\n        output = self.conv2(x)  # \u53cd\u5377\u79ef\uff1a\u4e0a\u91c7\u6837\u5230 28x28\n        return output  # \u8fd4\u56de\u751f\u6210\u7684\u56fe\u50cf\n</code></pre>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%89%EF%BC%9AWGAN/#_2","title":"\u5224\u522b\u5668","text":"<p>\u5224\u522b\u5668\u7684\u8f93\u51fa</p> <p>\u8bf7\u6ce8\u610f\uff01\u5728 WGAN \u4e2d\uff0c\u5224\u522b\u5668\u8f93\u51fa\u7684\u662f\u4e00\u4e2a\u5b9e\u6570\uff0c\u800c\u4e0d\u662f\u6982\u7387\uff0c\u56e0\u6b64\u4e0d\u4f7f\u7528 sigmoid \u6fc0\u6d3b\u51fd\u6570\u3002</p> <pre><code>class Discriminator(nn.Module):\n    def __init__(self):\n        super(Discriminator, self).__init__()\n\n        # 1. \u7b2c\u4e00\u5c42\uff1a\u8f93\u5165 1 \u901a\u9053\u7684 28x28 \u56fe\u50cf\uff0c\u8f93\u51fa 32 \u901a\u9053\u7684\u7279\u5f81\u56fe\uff0c\u7136\u540e\u901a\u8fc7MaxPool2d\u964d\u91c7\u6837\n        self.conv1 = nn.Sequential(\n            #TODO  # 5x5 \u5377\u79ef\u6838\uff0c\u6b65\u957f\u4e3a1\n            #TODO   # LeakyReLU\uff0cnegative_slope\u53c2\u6570\u8bbe\u7f6e\u4e3a0.1\n        )\n        self.pl1 = nn.MaxPool2d(2, stride=2)\n\n        # 2. \u7b2c\u4e8c\u5c42\uff1a\u8f93\u5165 32 \u901a\u9053\uff0c\u8f93\u51fa 64 \u901a\u9053\u7279\u5f81, \u7136\u540e\u901a\u8fc7MaxPool2d\u964d\u91c7\u6837\n        self.conv2 = nn.Sequential(\n            #TODO   # 5x5 \u5377\u79ef\u6838\uff0c\u6b65\u957f\u4e3a1\n            #TODO  # LeakyReLU \u6fc0\u6d3b\u51fd\u6570\uff0cnegative_slope\u53c2\u6570\u8bbe\u7f6e\u4e3a0.1\n        )\n        self.pl2 = nn.MaxPool2d(2, stride=2)\n\n        # 3. \u5168\u8fde\u63a5\u5c42 1\uff1a\u5c06 64x4x4 \u7ef4\u7279\u5f81\u56fe\u8f6c\u6362\u6210 1024 \u7ef4\u5411\u91cf\n        self.fc1 = nn.Sequential(\n            #TODO   # \u7ebf\u6027\u53d8\u6362\uff0c\u5c06 64x4x4 \u6620\u5c04\u5230 1024 \u7ef4\n            #TODO   # LeakyReLU \u6fc0\u6d3b\u51fd\u6570\n        )\n\n        # 4. \u5168\u8fde\u63a5\u5c42 2\uff1a\u6700\u7ec8\u8f93\u51fa\n        #TODO # \u8f93\u51fa\u4e00\u4e2a\u6807\u91cf\u4f5c\u4e3a\u5224\u522b\u7ed3\u679c\n\n    def forward(self, x):\n        x = self.pl1(self.conv1(x))  # \u7b2c\u4e00\u5c42\u5377\u79ef\uff0c\u964d\u7ef4\n        x = self.pl2(self.conv2(x))  # \u7b2c\u4e8c\u5c42\u5377\u79ef\uff0c\u964d\u7ef4\n        x = x.view(x.shape[0], -1)  # \u5c55\u5e73\u6210\u5411\u91cf\n        x = self.fc1(x)  # \u901a\u8fc7\u5168\u8fde\u63a5\u5c42\n        output = self.fc2(x)  # \u901a\u8fc7\u6700\u540e\u4e00\u5c42\u5168\u8fde\u63a5\u5c42\uff0c\u8f93\u51fa\u6807\u91cf\n        return output  # \u8fd4\u56de\u5224\u522b\u7ed3\u679c\n</code></pre>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%89%EF%BC%9AWGAN/#_3","title":"\u8bad\u7ec3\u8fc7\u7a0b","text":"<p>1. \u6743\u91cd\u88c1\u526a\uff08Weight Clipping\uff09</p> <p>\u5728WGAN\u4e2d\uff0c\u4e3a\u4e86\u6ee1\u8db3 Lipschitz \u8fde\u7eed\u6027 \u7684\u8981\u6c42\uff0c\u5224\u522b\u5668\u7684\u6743\u91cd\u5fc5\u987b\u53d7\u5230\u9650\u5236\u3002WGAN\u901a\u8fc7\u4f7f\u7528 Wasserstein\u8ddd\u79bb \u6765\u8861\u91cf\u751f\u6210\u6837\u672c\u4e0e\u771f\u5b9e\u6837\u672c\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u4f46\u4e3a\u4e86\u4fdd\u8bc1Wasserstein\u8ddd\u79bb\u7684\u6b63\u786e\u8ba1\u7b97\uff0c\u5224\u522b\u5668\u5fc5\u987b\u662f Lipschitz \u8fde\u7eed\u7684\u3002\u5224\u522b\u5668\u7684\u8f93\u51fa\u4e0d\u80fd\u5bf9\u8f93\u5165\u7684\u5fae\u5c0f\u53d8\u5316\u8fc7\u4e8e\u654f\u611f\u3002\u8fd9\u8981\u6c42\u5224\u522b\u5668\u7684\u6743\u91cd\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4fdd\u6301\u7a33\u5b9a\u3002</p> <p>\u4e3a\u4e86\u786e\u4fdd\u5224\u522b\u5668\u6ee1\u8db3Lipschitz\u6761\u4ef6\uff0cWGAN\u91c7\u53d6\u4e86 \u6743\u91cd\u88c1\u526a \u7684\u65b9\u6cd5\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5728\u6bcf\u6b21\u66f4\u65b0\u5224\u522b\u5668\u7684\u53c2\u6570\u65f6\uff0c\u90fd\u4f1a\u5bf9\u5224\u522b\u5668\u7684\u6743\u91cd\u8fdb\u884c\u88c1\u526a\uff0c\u786e\u4fdd\u5b83\u4eec\u4e0d\u4f1a\u8fc7\u5927\u6216\u8fc7\u5c0f\uff0c\u9650\u5236\u5b83\u4eec\u5728\u4e00\u4e2a\u56fa\u5b9a\u7684\u8303\u56f4\u5185\uff08\u901a\u5e38\u662f[-clip_value, clip_value]\uff09\u3002</p> <p>\u6743\u91cd\u88c1\u526a</p> <p>D.parameters() \u83b7\u53d6\u5224\u522b\u5668\u7684\u6240\u6709\u53c2\u6570\uff08\u4f8b\u5982\u5377\u79ef\u5c42\u548c\u5168\u8fde\u63a5\u5c42\u7684\u6743\u91cd\uff09\u3002</p> <p>\u793a\u4f8b\uff1afor p in D.parameters():</p> <p>clamp_ \u662f\u4e00\u4e2a\u539f\u5730\u64cd\u4f5c\uff08in-place operation\uff09\uff0c\u5c06\u6bcf\u4e2a\u53c2\u6570\u7684\u503c\u9650\u5236\u5728 [-clip_value, clip_value] \u8303\u56f4\u5185\u3002</p> <p>\u793a\u4f8b\uff1aA.clamp_(-1,1)</p> <p>2. \u751f\u6210\u5668\u548c\u5224\u522b\u5668\u7684\u635f\u5931\u51fd\u6570</p> <p>\u5728\u4f20\u7edf\u7684GAN\u4e2d\uff0c\u751f\u6210\u5668\u548c\u5224\u522b\u5668\u7684\u8bad\u7ec3\u76ee\u6807\u662f\u57fa\u4e8e \u4ea4\u53c9\u71b5\u635f\u5931\uff08binary cross-entropy\uff09 \u6765\u5bf9\u6297\u8bad\u7ec3\uff0c\u5373\u5224\u522b\u5668\u8f93\u51fa\u7684\u662f\u4e00\u4e2a\u6982\u7387\u503c\uff0c\u751f\u6210\u5668\u7684\u76ee\u6807\u662f\u6700\u5927\u5316\u5224\u522b\u5668\u7684\u9519\u8bef\u5206\u7c7b\u6982\u7387\u3002\u800c\u5728WGAN\u4e2d\uff0c\u635f\u5931\u51fd\u6570\u91c7\u7528\u4e86 \u57fa\u4e8e\u8ddd\u79bb\u7684\u5b9a\u4e49\uff0c\u5177\u4f53\u662f\u4f7f\u7528 Wasserstein\u8ddd\u79bb \u6765\u5ea6\u91cf\u4e24\u4e2a\u5206\u5e03\u4e4b\u95f4\u7684\u5dee\u5f02\u3002</p> <p>Wasserstein Distance\u7684\u8868\u8fbe\u5f0f\u5982\u4e0b\uff1a</p> \\[ W(p_r, p_g) = \\inf_{\\gamma \\sim \\Pi(p_r, p_g)} \\mathbb{E}_{(x, y) \\sim \\gamma} [\\|x - y\\|] \\] <p>\u5224\u522b\u5668\u7684\u635f\u5931\u51fd\u6570\u4e3a\uff1a</p> \\[ L_D = -\\mathbb{E}_{x \\sim p_{\\text{data}}(x)} [D(x)] + \\mathbb{E}_{z \\sim p_{z}(z)} [D(G(z))] \\] <p>\u751f\u6210\u5668\u7684\u635f\u5931\u51fd\u6570\u4e3a\uff1a</p> \\[ L_G = - \\mathbb{E}_{z\\sim p_z(z)}[D(G(z))] \\] <p>WGAN\u7684\u635f\u5931\u51fd\u6570\u8bbe\u8ba1\u76ee\u6807\u662f\u6700\u5c0f\u5316\u751f\u6210\u5668\u548c\u5224\u522b\u5668\u4e4b\u95f4\u7684Wasserstein\u8ddd\u79bb\uff0c\u4ece\u800c\u4fdd\u8bc1\u66f4\u7a33\u5b9a\u7684\u8bad\u7ec3\u8fc7\u7a0b\u3002WGAN\u7684\u635f\u5931\u51fd\u6570\u5e76\u4e0d\u4f9d\u8d56\u4e8e\u6982\u7387\uff0c\u800c\u662f\u4f9d\u8d56\u4e8e\u5224\u522b\u5668\u7684\u8f93\u51fa\u503c\uff08\u5b9e\u6570\uff09\uff0c\u8fd9\u4f7f\u5f97\u8bad\u7ec3\u8fc7\u7a0b\u66f4\u52a0\u7a33\u5b9a\u3002</p> <p>\u635f\u5931\u8ba1\u7b97</p> <p>WGAN\u4e2d\uff0c\u5224\u522b\u5668\u7684\u635f\u5931\u662f\u57fa\u4e8e\u5224\u522b\u5668\u5bf9\u771f\u5b9e\u6837\u672c\u548c\u751f\u6210\u6837\u672c\u7684\u8bc4\u5206\u5dee\u5f02\u6765\u8ba1\u7b97\u7684\uff0c\u5bf9\u5e94\u4e0a\u8ff0\u516c\u5f0f\uff0c\u5177\u4f53\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\uff1a</p> <p>loss_D = -(torch.mean(real_output) - torch.mean(fake_output))</p> <p>\u751f\u6210\u5668\u7684\u76ee\u6807\u662f\u5c3d\u53ef\u80fd\u8ba9\u5224\u522b\u5668\u8ba4\u4e3a\u751f\u6210\u7684\u6837\u672c\u662f\u771f\u5b9e\u7684\u3002\u5728WGAN\u4e2d\uff0c\u751f\u6210\u5668\u7684\u635f\u5931\u8ba1\u7b97\u4e3a\uff1a</p> <p>loss_G = -torch.mean(fake_output)</p> <pre><code># =============================== \u8bad\u7ec3\u5224\u522b\u5668 ===============================\ndef train_discriminator(real_images, D, G, optim_D, clip_value, batch_size, input_dim, device):\n    '''\u8bad\u7ec3\u5224\u522b\u5668'''\n    real_images = real_images.to(device)\n    real_output = D(real_images)\n\n    noise = torch.randn(batch_size, input_dim, device=device)\n    fake_images = G(noise).detach()\n    fake_output = D(fake_images)\n\n    #TODO  # \u8ba1\u7b97 WGAN \u5224\u522b\u5668\u635f\u5931loss_D\n\n    optim_D.zero_grad()\n    loss_D.backward()\n    optim_D.step()\n\n    # \u5bf9\u5224\u522b\u5668\u53c2\u6570\u8fdb\u884c\u88c1\u526a\n    for p in D.parameters():\n        #TODO # \u5bf9\u5224\u522b\u5668\u53c2\u6570\u8fdb\u884c\u88c1\u526a,\u5c06\u53c2\u6570\u9650\u5236\u5728 [-clip_value, clip_value] \u8303\u56f4\n\n    return loss_D.item()\n\n# =============================== \u8bad\u7ec3\u751f\u6210\u5668 ===============================\ndef train_generator(D, G, optim_G, batch_size, input_dim, device):\n    '''\u8bad\u7ec3\u751f\u6210\u5668'''\n    noise = torch.randn(batch_size, input_dim, device=device)\n    fake_images = G(noise)\n    fake_output = D(fake_images)\n\n    #TODO  # \u8ba1\u7b97 WGAN \u751f\u6210\u5668\u635f\u5931loss_G\n\n    optim_G.zero_grad()\n    loss_G.backward()\n    optim_G.step()\n\n    return loss_G.item()\n</code></pre>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%89%EF%BC%9AWGAN/#mnist","title":"\u52a0\u8f7d MNIST \u6570\u636e\u96c6","text":"<p>\u4f20\u7edf\u7684GAN\u901a\u5e38\u4f7f\u7528[0, 1]\u8303\u56f4\u7684\u56fe\u50cf\u4f5c\u4e3a\u8f93\u5165\uff0c\u4f46WGAN\u8981\u6c42\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u5728 [-1, 1] \u8303\u56f4\u5185\u3002\u8fd9\u662f\u56e0\u4e3aWGAN\u7684\u751f\u6210\u5668\u8f93\u51fa\u901a\u5e38\u4f7f\u7528 Tanh \u6fc0\u6d3b\u51fd\u6570\uff0c\u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u751f\u6210\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u5728\u8fd9\u4e2a\u8303\u56f4\u5185\uff0c\u7b26\u5408\u751f\u6210\u5668\u7684\u8f93\u51fa\u8981\u6c42\u3002\u6b64\u65f6\uff0c\u8f93\u5165\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u9700\u8981\u505a\u5f52\u4e00\u5316\uff0c\u4f7f\u7528 (0.5,) \u4f5c\u4e3a\u5747\u503c (0.5) \u548c (0.5,) \u4f5c\u4e3a\u6807\u51c6\u5dee\uff0c\u786e\u4fdd\u6bcf\u4e2a\u50cf\u7d20\u7684\u503c\u90fd\u88ab\u8c03\u6574\u5230 [-1, 1] \u4e4b\u95f4\u3002</p> <pre><code>train_dataset = datasets.MNIST(root=\"./data/\", train=True, transform=transforms.Compose([\n    transforms.ToTensor(),\n    transforms.Normalize((0.5,), (0.5,))  # \u5c06\u6570\u636e\u8303\u56f4\u8c03\u6574\u5230 [-1, 1]\n]), download=True)\ntrain_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)\n</code></pre>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%89%EF%BC%9AWGAN/#_4","title":"\u5b9a\u4e49\u4f18\u5316\u5668","text":"<p>\u4e0e\u4f20\u7edf\u7684GAN\u4f7f\u7528 Adam \u4f18\u5316\u5668\u4e0d\u540c\uff0cWGAN\u63a8\u8350\u4f7f\u7528 RMSprop \u4f18\u5316\u5668\u3002\u8fd9\u662f\u56e0\u4e3a\u5728WGAN\u4e2d\uff0c\u751f\u6210\u5668\u548c\u5224\u522b\u5668\u7684\u66f4\u65b0\u4e0d\u518d\u4f9d\u8d56\u4e8e\u52a8\u91cf\u548c\u81ea\u9002\u5e94\u5b66\u4e60\u7387\uff08\u5982Adam\u7684\u505a\u6cd5\uff09\uff0c\u800c\u662f\u4f7f\u7528 RMSprop \u6765\u7a33\u5b9a\u68af\u5ea6\u66f4\u65b0\u3002\u4f7f\u7528RMSprop\u80fd\u591f\u5e2e\u52a9\u907f\u514d\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u53c2\u6570\u66f4\u65b0\u4e0d\u7a33\u5b9a\u6216\u8fc7\u5927\uff0c\u4ece\u800c\u4f7f\u8bad\u7ec3\u66f4\u52a0\u7a33\u5b9a\u3002</p> <pre><code>#TODO #\u5b9a\u4e49\u751f\u6210\u5668\u7684\u4f18\u5316\u5668\uff0c\u4f7f\u7528 RMSprop\uff0c\u5b66\u4e60\u7387\u7684\u8bbe\u5b9a\u8bf7\u81ea\u884c\u6d4b\u8bd5\n#TODO #\u5b9a\u4e49\u5224\u522b\u5668\u7684\u4f18\u5316\u5668\uff0c\u4f7f\u7528 RMSprop\uff0c\u5b66\u4e60\u7387\u7684\u8bbe\u5b9a\u8bf7\u81ea\u884c\u6d4b\u8bd5\n</code></pre>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%89%EF%BC%9AWGAN/#_5","title":"\u5f00\u59cb\u8bad\u7ec3","text":"<p>\u5728WGAN\u4e2d\uff0c\u901a\u5e38\u9700\u8981\u5728\u6bcf\u6b21\u751f\u6210\u5668\u8bad\u7ec3\u4e4b\u524d\uff0c\u5148\u8bad\u7ec3 \u5224\u522b\u5668\u591a\u6b21\u3002\u8fd9\u79cd\u7b56\u7565\u6709\u52a9\u4e8e\u4f7f\u5224\u522b\u5668\u7684\u8bad\u7ec3\u66f4\u52a0\u7a33\u5b9a\uff0c\u56e0\u4e3aWGAN\u7684\u8bad\u7ec3\u4f9d\u8d56\u4e8e\u5224\u522b\u5668\u7684\u7a33\u5b9a\u6027\u3002\u5982\u679c\u5224\u522b\u5668\u8bad\u7ec3\u4e0d\u8db3\uff0c\u5b83\u53ef\u80fd\u65e0\u6cd5\u6b63\u786e\u8bc4\u4f30\u751f\u6210\u5668\u7684\u8f93\u51fa\uff0c\u5bfc\u81f4\u8bad\u7ec3\u4e0d\u7a33\u5b9a\u3002</p> <pre><code># =============================== \u4e3b\u51fd\u6570 ===============================\ndef main():\n    # \u8bbe\u5907\u914d\u7f6e\n    device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n\n    # \u8bbe\u5b9a\u8d85\u53c2\u6570\n    input_dim = 100\n    batch_size = 128\n    num_epoch = 30\n    clip_value = 0.01   # \u5224\u522b\u5668\u6743\u91cd\u88c1\u526a\u8303\u56f4\uff0c\u786e\u4fdd\u6ee1\u8db3 Lipschitz \u6761\u4ef6\n\n    # \u52a0\u8f7d MNIST \u6570\u636e\u96c6\n    train_dataset = datasets.MNIST(root=\"./data/\", train=True, transform=transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Normalize((0.5,), (0.5,))\n    ]), download=True)\n    train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)\n\n    # \u521b\u5efa\u751f\u6210\u5668\u548c\u5224\u522b\u5668\uff0c\u5e76\u79fb\u52a8\u5230 GPU\uff08\u5982\u679c\u53ef\u7528\uff09\n    # TODO\n    # TODO\n\n    # \u5b9a\u4e49\u4f18\u5316\u5668\n    # TODO\n    # TODO\n\n    # \u521d\u59cb\u5316 TensorBoard\n    writer = SummaryWriter(log_dir='./logs/experiment_wgan')\n\n    # \u5f00\u59cb\u8bad\u7ec3\n    for epoch in range(num_epoch):\n        total_loss_D, total_loss_G = 0, 0\n        for i, (real_images, _) in enumerate(train_loader):\n            # TODO  # \u5224\u522b\u5668\u8bad\u7ec3 5 \u6b21\n\n            # TODO  # \u751f\u6210\u5668\u8bad\u7ec3 1 \u6b21\n\n            # \u6bcf 100 \u6b65\u6253\u5370\u4e00\u6b21\u635f\u5931\n            if (i + 1) % 100 == 0 or (i + 1) == len(train_loader):\n                print(f'Epoch {epoch:02d} | Step {i + 1:04d} / {len(train_loader)} | Loss_D {total_loss_D / (i + 1):.4f} | Loss_G {total_loss_G / (i + 1):.4f}')\n\n        # \u8bb0\u5f55\u635f\u5931\u5230 TensorBoard\n        writer.add_scalar('WGAN/Loss/Discriminator', total_loss_D / len(train_loader), epoch)\n        writer.add_scalar('WGAN/Loss/Generator', total_loss_G / len(train_loader), epoch)\n\n        # \u751f\u6210\u5e76\u4fdd\u5b58\u793a\u4f8b\u56fe\u50cf\n        with torch.no_grad():\n            noise = torch.randn(64, input_dim, device=device)\n            fake_images = G(noise)\n\n            # \u8bb0\u5f55\u751f\u6210\u7684\u56fe\u50cf\u5230 TensorBoard\n            img_grid = torchvision.utils.make_grid(fake_images, normalize=True)\n            writer.add_image('Generated Images', img_grid, epoch)\n\n    writer.close()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98981: WGAN\u4e0e\u539f\u59cbGAN\u7684\u4e3b\u8981\u533a\u522b\u662f\u4ec0\u4e48\uff1f\u4e3a\u4ec0\u4e48WGAN\u80fd\u591f\u6539\u5584GAN\u7684\u8bad\u7ec3\u7a33\u5b9a\u6027\uff1f</p> <p>\u601d\u8003\u98982: \u5bf9\u4e8e\u6bcf\u4e2aGAN\u6a21\u578b\uff08GAN\uff0c DCGAN\uff0c WGAN\uff09\uff0c\u5728\u62a5\u544a\u4e2d\u5c55\u793aTensorBoard\u4e2d\u8bb0\u5f55\u7684\u635f\u5931\u51fd\u6570\u53d8\u5316\u66f2\u7ebf\u56fe\u548c\u4e0d\u540cepoch\u65f6\u8f93\u51fa\u7684\u56fe\u50cf\uff08\u5206\u522b\u6dfb\u52a0\u5728epoch\u603b\u6570\u76840%\u300125%\u300150%\u300175%\u3001100%\u5904\u8f93\u51fa\u7684\u56fe\u50cf\uff09\uff1b\u76f4\u89c2\u5206\u6790\u635f\u5931\u51fd\u6570\u7684\u53d8\u5316\u8d8b\u52bf\u548c\u751f\u6210\u56fe\u50cf\u7684\u53d8\u5316\u8d8b\u52bf\u3002</p> <p>\u601d\u8003\u98983: \u5c1d\u8bd5\u8c03\u6574\u8d85\u53c2\u6570\u63d0\u5347\u751f\u6210\u56fe\u7247\u7684\u8d28\u91cf\u3002\u4ece\u751f\u6210\u7684\u56fe\u7247\u4e0a\u76f4\u89c2\u6765\u770b\uff0cGAN\uff0cDCGAN\u548cWGAN\u7684\u6548\u679c\u6709\u4ec0\u4e48\u5dee\u522b\uff1f\u4f60\u8ba4\u4e3a\u662f\u4ec0\u4e48\u5bfc\u81f4\u4e86\u8fd9\u79cd\u5dee\u522b\uff1f</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%B8%89%EF%BC%9AWGAN/#_6","title":"6.4 \u5b9e\u9a8c\u4efb\u52a1\u4e09\uff1aWGAN","text":""},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%BA%8C%EF%BC%9A%E6%B7%B1%E5%BA%A6%E5%8D%B7%E7%A7%AF%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88DCGAN%EF%BC%89/","title":"\u5b9e\u9a8c\u4efb\u52a1\u4e8c\uff1a\u6df1\u5ea6\u5377\u79ef\u5bf9\u6297\u751f\u6210\u7f51\u7edc\uff08DCGAN\uff09","text":"<p>\u76ee\u6807</p> <ul> <li> <p>\u4e86\u89e3 DCGAN \u4e0e\u6807\u51c6 GAN \u7684\u4e0d\u540c\u4e4b\u5904\u3002</p> </li> <li> <p>\u638c\u63e1 DCGAN \u7684\u751f\u6210\u5668\uff08Generator\uff09\u548c\u5224\u522b\u5668\uff08Discriminator\uff09\u8bbe\u8ba1\u3002</p> </li> <li> <p>\u4f7f\u7528 PyTorch \u642d\u5efa\u5e76\u8bad\u7ec3 DCGAN \u751f\u6210 MNIST \u624b\u5199\u6570\u5b57\u3002</p> </li> <li> <p>\u5b66\u4e60\u5982\u4f55\u4f18\u5316 GAN \u8bad\u7ec3\u4ee5\u83b7\u5f97\u66f4\u7a33\u5b9a\u7684\u7ed3\u679c\u3002</p> </li> </ul>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%BA%8C%EF%BC%9A%E6%B7%B1%E5%BA%A6%E5%8D%B7%E7%A7%AF%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88DCGAN%EF%BC%89/#1-gan-dcgan","title":"1. GAN \u4e0e DCGAN \u7684\u533a\u522b","text":"<p>\u6807\u51c6 GAN \u4e3b\u8981\u7531\u5168\u8fde\u63a5\u5c42\u6784\u6210\uff0c\u751f\u6210\u5668\u4f7f\u7528\u5168\u8fde\u63a5\u7f51\u7edc\u4ece\u968f\u673a\u566a\u58f0\u751f\u6210\u6570\u636e\uff0c\u800c\u5224\u522b\u5668\u4f7f\u7528\u5168\u8fde\u63a5\u7f51\u7edc\u5bf9\u8f93\u5165\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u3002GAN \u5b58\u5728\u7684\u95ee\u9898\u5305\u62ec\uff1a</p> <ul> <li>\u8bad\u7ec3\u4e0d\u7a33\u5b9a\uff0c\u5bb9\u6613\u51fa\u73b0\u6a21\u5f0f\u5d29\u6e83\uff08Mode Collapse\uff09\u3002</li> <li>\u751f\u6210\u7684\u56fe\u50cf\u8d28\u91cf\u8f83\u4f4e\uff0c\u7f3a\u4e4f\u7a7a\u95f4\u7ed3\u6784\u4fe1\u606f\u3002</li> </ul> <p>\u6df1\u5ea6\u5377\u79ef\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff08DCGAN\uff0cDeep Convolutional Generative Adversarial Network\uff09\u662f\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff08GAN\uff09\u7684\u4e00\u79cd\u6269\u5c55\uff0c\u5b83\u901a\u8fc7\u4f7f\u7528\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNN\uff09\u6765\u5b9e\u73b0\u751f\u6210\u5668\u548c\u5224\u522b\u5668\u7684\u6784\u5efa\u3002\u4e0e\u6807\u51c6\u7684GAN\u76f8\u6bd4\uff0cDCGAN\u901a\u8fc7\u5f15\u5165\u5377\u79ef\u5c42\u6765\u6539\u5584\u56fe\u50cf\u751f\u6210\u8d28\u91cf\uff0c\u4f7f\u5f97\u751f\u6210\u5668\u80fd\u591f\u751f\u6210\u66f4\u6e05\u6670\u3001\u66f4\u9ad8\u5206\u8fa8\u7387\u7684\u56fe\u50cf\u3002</p> <p>DCGAN\uff08Deep Convolutional GAN\uff09\u5f15\u5165\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNN\uff09\u6765\u6539\u8fdb GAN\uff0c\u4f7f\u5176\u5728\u751f\u6210\u9ad8\u5206\u8fa8\u7387\u7684\u56fe\u50cf\u65f6\u8868\u73b0\u66f4\u597d\u3002</p> <p>DCGAN \u76f8\u6bd4\u666e\u901a GAN \u7684\u6539\u8fdb</p> <p>\u2022\u5377\u79ef\u5c42\u66ff\u4ee3\u5168\u8fde\u63a5\u5c42\uff08\u63d0\u9ad8\u56fe\u50cf\u8d28\u91cf\uff09\u3002\u4f20\u7edf\u7684GAN\u4f7f\u7528\u5168\u8fde\u63a5\u5c42\uff0c\u800cDCGAN\u5c06\u5176\u66ff\u6362\u4e3a\u5377\u79ef\u5c42\u3002\u5377\u79ef\u5c42\u5728\u5904\u7406\u56fe\u50cf\u65f6\u80fd\u591f\u66f4\u597d\u5730\u4fdd\u7559\u56fe\u50cf\u7684\u7a7a\u95f4\u7ed3\u6784\uff0c\u4ece\u800c\u751f\u6210\u66f4\u4e3a\u6e05\u6670\u7684\u56fe\u50cf\u3002</p> <p>\u2022\u4f7f\u7528 BatchNorm\uff08\u7a33\u5b9a\u8bad\u7ec3\uff09\u3002</p> <p>\u4ec0\u4e48\u662fBatchNorm\uff1aBatch Normalization\uff08\u6279\u5f52\u4e00\u5316\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u52a0\u901f\u8bad\u7ec3\u548c\u7a33\u5b9a\u68af\u5ea6\u7684\u6280\u672f\uff0c\u5b83\u7684\u6838\u5fc3\u601d\u60f3\u662f\u5bf9 mini-batch \u5185\u7684\u7279\u5f81\u8fdb\u884c\u5f52\u4e00\u5316\u3002</p> <p>\u4e3a\u4ec0\u4e48\u8981\u7528BatchNorm\uff1aBatchNorm \u4f7f\u6570\u636e\u7684\u5206\u5e03\u66f4\u52a0\u7a33\u5b9a\uff0c\u4ece\u800c\u9632\u6b62\u68af\u5ea6\u5728\u6df1\u5c42\u7f51\u7edc\u4e2d\u6d88\u5931\u6216\u7206\u70b8\uff0c\u63d0\u9ad8\u8bad\u7ec3\u7684\u7a33\u5b9a\u6027\u3001\u7531\u4e8e BatchNorm \u5f52\u4e00\u5316\u4e86\u6fc0\u6d3b\u503c\uff0c\u4f7f\u5f97\u6a21\u578b\u5bf9\u4e0d\u540c\u521d\u59cb\u6743\u91cd\u66f4\u52a0\u9c81\u68d2\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u8f83\u5927\u7684\u5b66\u4e60\u7387\uff0c\u52a0\u5feb\u6536\u655b\u901f\u5ea6\u3002</p> <p>\u2022LeakyReLU \u4ee3\u66ff ReLU\uff08\u9632\u6b62\u68af\u5ea6\u6d88\u5931\uff09\u3002</p> <p>\u2022Tanh \u4f5c\u4e3a\u751f\u6210\u5668\u8f93\u51fa\u6fc0\u6d3b\u51fd\u6570\uff08\u9002\u5e94\u6570\u636e\u8303\u56f4\uff09\u3002</p> <p>\u5982\u9700\u66f4\u52a0\u6df1\u5165\u7684\u5b66\u4e60\uff0c\u53ef\u53c2\u8003\u8be5\u8bba\u6587\uff1aUnsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%BA%8C%EF%BC%9A%E6%B7%B1%E5%BA%A6%E5%8D%B7%E7%A7%AF%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88DCGAN%EF%BC%89/#2-dcgan","title":"2. DCGAN\u7684\u5b9e\u73b0","text":"<p>\u90e8\u5206\u7ec6\u8282\u53ef\u53c2\u8003\u5b9e\u9a8c\u4efb\u52a1\u4e00\u3002</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%BA%8C%EF%BC%9A%E6%B7%B1%E5%BA%A6%E5%8D%B7%E7%A7%AF%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88DCGAN%EF%BC%89/#_1","title":"\u751f\u6210\u5668","text":"<p>\u5f52\u4e00\u5316\uff08Batch Normalization\uff09</p> <ul> <li> <p>\u52a0\u901f\u8bad\u7ec3\uff1a\u5f52\u4e00\u5316\u8f93\u5165\u6570\u636e\uff0c\u8ba9\u6570\u636e\u5206\u5e03\u66f4\u52a0\u7a33\u5b9a\uff0c\u63d0\u9ad8\u8bad\u7ec3\u6548\u7387\u3002</p> </li> <li> <p>\u9632\u6b62\u68af\u5ea6\u6d88\u5931\u6216\u68af\u5ea6\u7206\u70b8\uff1a\u907f\u514d\u6a21\u578b\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u6570\u503c\u4e0d\u7a33\u5b9a\u7684\u60c5\u51b5\u3002</p> </li> <li> <p>\u5f15\u5165\u4e00\u5b9a\u7684\u6b63\u5219\u5316\u6548\u679c\uff1a\u51cf\u5c11\u6a21\u578b\u5bf9\u7279\u5b9a\u8f93\u5165\u6a21\u5f0f\u7684\u4f9d\u8d56\uff0c\u63d0\u9ad8\u6cdb\u5316\u80fd\u529b\u3002</p> </li> </ul> <p>\u53cd\u5377\u79ef\uff08Transposed Convolution\uff09</p> <ul> <li> <p>\u53cd\u5377\u79ef\uff08\u4e5f\u53eb \u4e0a\u91c7\u6837\u5377\u79ef\uff09\u7528\u4e8e\u589e\u5927\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\uff0c\u6700\u7ec8\u751f\u6210\u76ee\u6807\u5927\u5c0f\u7684\u56fe\u50cf\u3002</p> </li> <li> <p>\u901a\u8fc7\u5b66\u4e60\u6743\u91cd\uff0c\u5728\u7a7a\u95f4\u4e0a\u6269\u5c55\u7279\u5f81\u56fe\uff0c\u76f8\u5f53\u4e8e\u5377\u79ef\u7684\u9006\u64cd\u4f5c\u3002</p> </li> </ul> <p>self.conv1 = nn.Sequential(</p> <p>nn.ConvTranspose2d(128, 64, 4, stride=2, padding=1),  # (7,7) -&gt; (14,14)</p> <p>nn.BatchNorm2d(64),</p> <p>nn.ReLU())</p> <ul> <li> <p>\u8f93\u5165\u901a\u9053\u6570 128\uff0c\u8f93\u51fa\u901a\u9053\u6570 64</p> </li> <li> <p>kernel_size=4\uff084\u00d74 \u5377\u79ef\u6838\uff09</p> </li> <li> <p>stride=2\uff08\u6b65\u957f 2\uff0c\u6269\u5927\u4e00\u500d\uff09</p> </li> <li> <p>padding=1\uff08\u4fdd\u6301\u5c3a\u5bf8\u4e00\u81f4\uff09</p> </li> </ul> <pre><code>class Generator(nn.Module):\n    def __init__(self, input_dim):\n        super(Generator, self).__init__()\n\n        # 1. \u8f93\u5165\u5c42\uff1a\u5c06 100 \u7ef4\u968f\u673a\u566a\u58f0\u6295\u5f71\u5230 32x32\uff081024 \u7ef4\uff09\n        #TODO   # \u7ebf\u6027\u53d8\u6362fc1\uff0c\u5c06\u8f93\u5165\u566a\u58f0\u6269\u5c55\u5230 1024 \u7ef4\n\n        self.br1 = nn.Sequential(\n            #TODO   # \u6279\u5f52\u4e00\u5316\uff0c\u52a0\u901f\u8bad\u7ec3\u5e76\u7a33\u5b9a\u6536\u655b\n            #TODO   # ReLU \u6fc0\u6d3b\u51fd\u6570\uff0c\u5f15\u5165\u975e\u7ebf\u6027\n        )\n\n        # 2. \u7b2c\u4e8c\u5c42\uff1a\u5c06 1024 \u7ef4\u6570\u636e\u6620\u5c04\u5230 128 * 7 * 7 \u7684\u7ef4\u7279\u5f81\n        #TODO   # \u7ebf\u6027\u53d8\u6362fc2\uff0c\u5c06\u6570\u636e\u53d8\u6362\u4e3a\u9002\u5408\u5377\u79ef\u5c42\u7684\u7ef4\u6570\u5927\u5c0f\n\n        self.br2 = nn.Sequential(\n            #TODO   # \u6279\u5f52\u4e00\u5316\n            #TODO   # ReLU \u6fc0\u6d3b\u51fd\u6570\n        )\n\n        # 3. \u53cd\u5377\u79ef\u5c42 1\uff1a\u4e0a\u91c7\u6837\uff0c\u8f93\u51fa 64 \u901a\u9053\u7684 14\u00d714 \u7279\u5f81\u56fe\n        self.conv1 = nn.Sequential(\n            #TODO   # \u53cd\u5377\u79ef\uff1a\u5c06 7x7 \u653e\u5927\u5230 14x14, kernel size\u8bbe\u7f6e\u4e3a4, stride\u8bbe\u7f6e\u4e3a2\uff0cpadding\u8bbe\u7f6e\u4e3a1\n            #TODO   # \u5f52\u4e00\u5316\uff0c\u7a33\u5b9a\u8bad\u7ec3\n            #TODO   # ReLU \u6fc0\u6d3b\u51fd\u6570\n        )\n\n        # 4. \u53cd\u5377\u79ef\u5c42 2\uff1a\u8f93\u51fa 1 \u901a\u9053\u7684 28\u00d728 \u56fe\u50cf\n        self.conv2 = nn.Sequential(\n            #TODO   # \u53cd\u5377\u79ef\uff1a\u5c06 14x14 \u653e\u5927\u5230 28x28\n            #TODO   # Sigmoid \u6fc0\u6d3b\u51fd\u6570\uff0c\u5c06\u8f93\u51fa\u5f52\u4e00\u5316\u5230 [0,1]\n        )\n\n    def forward(self, x):\n        x = self.br1(self.fc1(x))  # \u901a\u8fc7\u5168\u8fde\u63a5\u5c42\uff0c\u8fdb\u884c BatchNorm \u548c ReLU \u6fc0\u6d3b\n        x = self.br2(self.fc2(x))  # \u7ee7\u7eed\u901a\u8fc7\u5168\u8fde\u63a5\u5c42\uff0c\u8fdb\u884c BatchNorm \u548c ReLU \u6fc0\u6d3b\n        x = x.reshape(-1, 128, 7, 7)  # \u53d8\u5f62\u4e3a\u9002\u5408\u5377\u79ef\u8f93\u5165\u7684\u5f62\u72b6 (batch, 128, 7, 7)\n        x = self.conv1(x)  # \u53cd\u5377\u79ef\uff1a\u4e0a\u91c7\u6837\u5230 14x14\n        output = self.conv2(x)  # \u53cd\u5377\u79ef\uff1a\u4e0a\u91c7\u6837\u5230 28x28\n        return output  # \u8fd4\u56de\u751f\u6210\u7684\u56fe\u50cf\n</code></pre>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E4%BB%BB%E5%8A%A1%E4%BA%8C%EF%BC%9A%E6%B7%B1%E5%BA%A6%E5%8D%B7%E7%A7%AF%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%EF%BC%88DCGAN%EF%BC%89/#_2","title":"\u5224\u522b\u5668","text":"<p>DCGAN \u7684\u5224\u522b\u5668\u4f7f\u7528\u591a\u4e2a\u5377\u79ef\u5c42\u5bf9\u8f93\u5165\u56fe\u50cf\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u5e76\u6700\u7ec8\u8f93\u51fa\u771f\u5047\u6982\u7387\u3002</p> <p>\u5728 DCGAN \u4e2d\uff0c\u5224\u522b\u5668\u662f\u4e00\u4e2a \u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNN\uff09\uff0c\u4e3b\u8981\u6709\uff1a</p> <ul> <li> <p>\u591a\u4e2a\u5377\u79ef\u5c42\uff08Conv2D\uff09\uff1a\u63d0\u53d6\u5c40\u90e8\u7279\u5f81\uff0c\u5982\u8fb9\u7f18\u3001\u7eb9\u7406\u3002</p> </li> <li> <p>LeakyReLU \u6fc0\u6d3b\u51fd\u6570\uff1a\u76f8\u6bd4\u4e8e ReLU\uff0c\u5b83\u53ef\u4ee5\u9632\u6b62\u68af\u5ea6\u6d88\u5931\u95ee\u9898\u3002</p> </li> <li> <p>\u6700\u5927\u6c60\u5316\uff1a\u964d\u91c7\u6837\uff0c\u6839\u636ekernel_size,\u548cstride\u964d\u4f4e\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\u3002</p> </li> <li> <p>\u5168\u8fde\u63a5\u5c42\uff08Linear\uff09\uff1a\u6700\u7ec8\u6620\u5c04\u5230 [0,1] \u7684\u6982\u7387\u3002</p> </li> </ul> <pre><code>class Discriminator(nn.Module):\n    def __init__(self):\n        super(Discriminator, self).__init__()\n\n        # 1. \u7b2c\u4e00\u5c42\uff1a\u8f93\u5165 1 \u901a\u9053\u7684 28x28 \u56fe\u50cf\uff0c\u8f93\u51fa 32 \u901a\u9053\u7684\u7279\u5f81\u56fe\uff0c\u7136\u540e\u901a\u8fc7MaxPool2d\u964d\u91c7\u6837\n        self.conv1 = nn.Sequential(\n            #TODO  # 5x5 \u5377\u79ef\u6838\uff0c\u6b65\u957f\u4e3a1\n            #TODO   # LeakyReLU\uff0cnegative_slope\u53c2\u6570\u8bbe\u7f6e\u4e3a0.1\n        )\n        self.pl1 = nn.MaxPool2d(2, stride=2)\n\n        # 2. \u7b2c\u4e8c\u5c42\uff1a\u8f93\u5165 32 \u901a\u9053\uff0c\u8f93\u51fa 64 \u901a\u9053\u7279\u5f81\n        self.conv2 = nn.Sequential(\n            #TODO   # 5x5 \u5377\u79ef\u6838\uff0c\u6b65\u957f\u4e3a1\n            #TODO  # LeakyReLU \u6fc0\u6d3b\u51fd\u6570\uff0cnegative_slope\u53c2\u6570\u8bbe\u7f6e\u4e3a0.1\n        )\n        self.pl2 = nn.MaxPool2d(2, stride=2)\n\n        # 3. \u5168\u8fde\u63a5\u5c42 1\uff1a\u5c06 64x4x4 \u7ef4\u7279\u5f81\u56fe\u8f6c\u6362\u6210 1024 \u7ef4\u5411\u91cf\n        self.fc1 = nn.Sequential(\n            #TODO   # \u7ebf\u6027\u53d8\u6362\uff0c\u5c06 64x4x4 \u6620\u5c04\u5230 1024 \u7ef4\n            #TODO   # LeakyReLU \u6fc0\u6d3b\u51fd\u6570\uff0cnegative_slope\u53c2\u6570\u8bbe\u7f6e\u4e3a0.1\n        )\n\n        # 4. \u5168\u8fde\u63a5\u5c42 2\uff1a\u6700\u7ec8\u8f93\u51fa\u771f\u5047\u6982\u7387\n        self.fc2 = nn.Sequential(\n            #TODO   # \u7ebf\u6027\u53d8\u6362\uff0c\u5c06 1024 \u7ef4\u6570\u636e\u6620\u5c04\u5230 1 \u7ef4\n            #TODO   # Sigmoid \u5f52\u4e00\u5316\u5230 [0,1] \u4f5c\u4e3a\u6982\u7387\u8f93\u51fa\n        )\n\n    def forward(self, x):\n        x = self.pl1(self.conv1(x))  # \u7b2c\u4e00\u5c42\u5377\u79ef\uff0c\u964d\u7ef4\n        x = self.pl2(self.conv2(x))  # \u7b2c\u4e8c\u5c42\u5377\u79ef\uff0c\u964d\u7ef4\n        x = x.view(x.shape[0], -1)  # \u5c55\u5e73\u6210\u5411\u91cf\n        x = self.fc1(x)  # \u901a\u8fc7\u5168\u8fde\u63a5\u5c42\n        output = self.fc2(x)  # \u901a\u8fc7\u6700\u540e\u4e00\u5c42\u5168\u8fde\u63a5\u5c42\uff0c\u8f93\u51fa\u771f\u5047\u6982\u7387\n        return output  # \u8fd4\u56de\u5224\u522b\u7ed3\u679c\n</code></pre> <p>\u8bad\u7ec3\u8fc7\u7a0b\u53ca\u6570\u636e\u4fdd\u5b58\u53c2\u8003\u5b9e\u9a8c\u4efb\u52a1\u4e00</p> <pre><code>def train_discriminator(real_images, D, G, loss_func, optim_D, batch_size, input_dim, device):\n    # TODO\n    return loss_D.item()\n\ndef train_generator(D, G, loss_func, optim_G, batch_size, input_dim, device):\n    # TODO\n    return loss_G.item()\n\ndef main():\n    # \u8bbe\u5907\u914d\u7f6e\uff1a\u4f7f\u7528 GPU\uff08\u5982\u679c\u53ef\u7528\uff09\uff0c\u5426\u5219\u4f7f\u7528 CPU\n    device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n\n    # \u8bbe\u5b9a\u8d85\u53c2\u6570\n    input_dim = 100  # \u751f\u6210\u5668\u8f93\u5165\u7684\u968f\u673a\u566a\u58f0\u5411\u91cf\u7ef4\u5ea6\n    batch_size = 128  # \u8bad\u7ec3\u65f6\u7684\u6279\u91cf\u5927\u5c0f\n    num_epoch = 30  # \u8bad\u7ec3\u7684\u603b\u8f6e\u6570\n\n    # \u52a0\u8f7d MNIST \u6570\u636e\u96c6\n    train_dataset = datasets.MNIST(root=\"./data/\", train=True, transform=transforms.ToTensor(), download=True)\n    train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)\n\n    # \u521b\u5efa\u751f\u6210\u5668\u548c\u5224\u522b\u5668\uff0c\u5e76\u79fb\u52a8\u5230 GPU\uff08\u5982\u679c\u53ef\u7528\uff09\n    # TODO\n    # TODO\n\n    # \u5b9a\u4e49\u4f18\u5316\u5668\uff0c\u4f18\u5316\u5668\u8981\u6c42\u540c\u4efb\u52a1\u4e00\n    # TODO\n    # TODO\n\n    loss_func = nn.BCELoss()\n\n    # \u521d\u59cb\u5316 TensorBoard\n    writer = SummaryWriter(log_dir='./logs/experiment_dcgan')\n\n    # \u5f00\u59cb\u8bad\u7ec3\n    for epoch in range(num_epoch):\n        total_loss_D, total_loss_G = 0, 0\n        for i, (real_images, _) in enumerate(train_loader):\n            loss_D = train_discriminator(real_images, D, G, loss_func, optim_D, batch_size, input_dim, device)\n            loss_G = train_generator(D, G, loss_func, optim_G, batch_size, input_dim, device)\n\n            total_loss_D += loss_D\n            total_loss_G += loss_G\n\n            # \u6bcf 100 \u6b65\u6253\u5370\u4e00\u6b21\u635f\u5931\n            if (i + 1) % 100 == 0 or (i + 1) == len(train_loader):\n                print(f'Epoch {epoch:02d} | Step {i + 1:04d} / {len(train_loader)} | Loss_D {total_loss_D / (i + 1):.4f} | Loss_G {total_loss_G / (i + 1):.4f}')\n\n        # \u8bb0\u5f55\u635f\u5931\u5230 TensorBoard\n        writer.add_scalar('DCGAN/Loss/Discriminator', total_loss_D / len(train_loader), epoch)\n        writer.add_scalar('DCGAN/Loss/Generator', total_loss_G / len(train_loader), epoch)\n\n        # \u751f\u6210\u5e76\u4fdd\u5b58\u793a\u4f8b\u56fe\u50cf\n        with torch.no_grad():\n            noise = torch.randn(64, input_dim, device=device)\n            fake_images = G(noise)\n\n            # \u8bb0\u5f55\u751f\u6210\u7684\u56fe\u50cf\u5230 TensorBoard\n            img_grid = torchvision.utils.make_grid(fake_images, normalize=True)\n            writer.add_image('Generated Images', img_grid, epoch)\n\n    writer.close()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>\u601d\u8003\u9898</p> <p>\u601d\u8003\u98981: DCGAN\u4e0e\u4f20\u7edfGAN\u7684\u4e3b\u8981\u533a\u522b\u662f\u4ec0\u4e48\uff1f\u4e3a\u4ec0\u4e48DCGAN\u66f4\u9002\u5408\u56fe\u50cf\u751f\u6210\u4efb\u52a1\uff1f</p> <p>\u601d\u8003\u98982: DCGAN\u7684\u751f\u6210\u5668\u548c\u5224\u522b\u5668\u5206\u522b\u4f7f\u7528\u4e86\u54ea\u4e9b\u5173\u952e\u7684\u7f51\u7edc\u7ed3\u6784\uff1f\u8fd9\u4e9b\u7ed3\u6784\u5982\u4f55\u5f71\u54cd\u751f\u6210\u6548\u679c\uff1f</p> <p>\u601d\u8003\u98983: DCGAN\u4e2d\u4e3a\u4ec0\u4e48\u4f7f\u7528\u6279\u5f52\u4e00\u5316\uff08Batch Normalization\uff09\uff1f\u5b83\u5bf9\u8bad\u7ec3\u8fc7\u7a0b\u6709\u4ec0\u4e48\u5f71\u54cd\uff1f</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E5%85%AD%E4%BB%8B%E7%BB%8D/","title":"\u5b9e\u9a8c\uff1a\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff08GAN\uff09","text":""},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E5%85%AD%E4%BB%8B%E7%BB%8D/#_1","title":"\u5f00\u59cb\u4e4b\u524d","text":"<p>\u6211\u4eec\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\u4f7f\u7528Jupyter Notebook\u8fdb\u884c\u5b9e\u9a8c\uff0c\u8bf7\u53c2\u8003Jupyter Notebook\u4f7f\u7528\uff0c\u6309\u7167\u6587\u6863\u4e2d\u8be6\u7ec6\u6b65\u9aa4\u8fdb\u884c\u64cd\u4f5c\uff0c\u5b8c\u6210Jupyter Notebook\u7684\u914d\u7f6e\u3002</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E5%85%AD%E4%BB%8B%E7%BB%8D/#_2","title":"\u5b9e\u9a8c\u4efb\u52a1","text":"<p>\u672c\u6b21\u5b9e\u9a8c\u5206\u4e3a\u4e09\u4e2a\u4efb\u52a1\uff1aGAN\uff08\u7ea660\u5206\u949f\uff09\u3001DCGAN\uff08\u7ea645\u5206\u949f\uff09\u3001WGAN\uff08\u7ea645\u5206\u949f\uff09\u3002</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E5%85%AD%E4%BB%8B%E7%BB%8D/#gan_1","title":"\u4efb\u52a1\u4e00\uff1aGAN","text":"<p>\u4e0b\u8f7d\u4efb\u52a1\u4e00\u4ee3\u7801</p> <p>\u5728\u8fd9\u4e2a\u4efb\u52a1\u4e2d\uff0c\u4f60\u5c06\uff1a</p> <ol> <li>\u4e86\u89e3 GAN\uff08Generative adversarial network\uff09 \u7684\u57fa\u672c\u6982\u5ff5</li> <li>\u5b66\u4f1a \u6784\u5efa \u5e76 \u8bad\u7ec3 GAN \u6a21\u578b\uff0c\u751f\u6210\u903c\u771f\u7684\u56fe\u50cf</li> <li>\u4e86\u89e3GAN\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u9047\u5230\u7684\u95ee\u9898\u53ca\u5176\u89e3\u51b3\u65b9\u6848</li> <li>\u4e86\u89e3TensorBoard\u5de5\u5177\u7684\u57fa\u672c\u7528\u6cd5</li> </ol> <p>\u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a</p> <ul> <li>\u6570\u636e\u51c6\u5907</li> <li> <p>\u6784\u5efa GAN \u6a21\u578b\uff0c\u5305\u62ec\u751f\u6210\u5668\uff08Generator\uff09\u4e0e\u5224\u522b\u5668\uff08Discriminator\uff09</p> </li> <li> <p>\u8bad\u7ec3 GAN</p> </li> <li> <p>\u7ed3\u679c\u53ef\u89c6\u5316</p> </li> <li> <p>\u4f7f\u7528TensorBoard\u8bb0\u5f55\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u635f\u5931\u51fd\u6570\u7684\u53d8\u5316\u8d8b\u52bf</p> </li> </ul> <p>\u901a\u8fc7\u672c\u4efb\u52a1\uff0c\u4f60\u5c06\u5b66\u4f1a\u7528GAN\uff08\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff09\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b\uff0c\u4f7f\u5176\u80fd\u591f\u8f93\u51fa\u624b\u5199\u6570\u5b57\u56fe\u50cf</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E5%85%AD%E4%BB%8B%E7%BB%8D/#dcgan","title":"\u4efb\u52a1\u4e8c\uff1aDCGAN","text":"<p>\u4e0b\u8f7d\u4efb\u52a1\u4e8c\u4ee3\u7801</p> <p>\u5728\u8fd9\u4e2a\u4efb\u52a1\u4e2d\uff0c\u4f60\u5c06\uff1a</p> <ol> <li>\u4e86\u89e3 DCGAN\uff08Deep Convolutional GAN\uff09 \u7684\u57fa\u672c\u539f\u7406</li> <li>\u638c\u63e1\u5377\u79ef\u3001\u6279\u5f52\u4e00\u5316\uff08BatchNorm\uff09\u7b49\u5728DCGAN\u4e2d\u7684\u5e94\u7528</li> <li>\u4e86\u89e3DCGAN\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u9047\u5230\u7684\u95ee\u9898\u53ca\u5176\u89e3\u51b3\u65b9\u6848</li> </ol> <p>\u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a</p> <ul> <li>\u4ee3\u7801\u6539\u8fdb\uff0c\u5305\u62ec\u5377\u79ef\u5c42\u66ff\u4ee3\u5168\u8fde\u63a5\u5c42\u3001\u4f7f\u7528 BatchNorm\u3001LeakyReLU \u4ee3\u66ff ReLU\u3001Tanh \u4f5c\u4e3a\u751f\u6210\u5668\u8f93\u51fa\u6fc0\u6d3b\u51fd\u6570</li> <li>\u8bad\u7ec3DCGAN</li> <li>\u7ed3\u679c\u53ef\u89c6\u5316</li> <li>\u4f7f\u7528TensorBoard\u8bb0\u5f55\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u635f\u5931\u51fd\u6570\u7684\u53d8\u5316\u8d8b\u52bf</li> <li>\u5bf9\u6bd4\u4e0d\u540c\u4e4b\u5904\uff0c\u5206\u6790\u5176\u67b6\u6784\u548c\u6539\u8fdb\u70b9</li> </ul> <p>\u901a\u8fc7\u672c\u4efb\u52a1\uff0c\u4f60\u5c06\u5b66\u4f1a\u5728\u7b2c\u4e00\u90e8\u5206\u7684\u57fa\u7840\u4e0a\uff0c\u7528DCGAN\uff08Deep Convolutional GAN\uff09\u6765\u5b9e\u73b0\u76f8\u540c\u7684\u76ee\u6807</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E5%85%AD%E4%BB%8B%E7%BB%8D/#wgan","title":"\u4efb\u52a1\u4e09\uff1aWGAN","text":"<p>\u4e0b\u8f7d\u4efb\u52a1\u4e09\u4ee3\u7801</p> <p>\u5728\u8fd9\u4e2a\u4efb\u52a1\u4e2d\uff0c\u4f60\u5c06\uff1a</p> <ol> <li>\u4e86\u89e3 WGAN\uff08Wasserstein GAN\uff09 \u7684\u57fa\u672c\u539f\u7406</li> <li>\u5b66\u4e60\u5982\u4f55\u901a\u8fc7 Wasserstein \u8ddd\u79bb\u4f18\u5316 GAN \u6a21\u578b\u7684\u8bad\u7ec3\u7a33\u5b9a\u6027</li> <li>\u4e86\u89e3WGAN\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u9047\u5230\u7684\u95ee\u9898\u53ca\u5176\u89e3\u51b3\u65b9\u6848</li> </ol> <p>\u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a</p> <ul> <li>\u4ee3\u7801\u6539\u8fdb\uff0c\u901a\u8fc7\u6700\u5c0f\u5316 Wasserstein \u8ddd\u79bb\u6765\u5ea6\u91cf\u751f\u6210\u6570\u636e\u4e0e\u771f\u5b9e\u6570\u636e\u5206\u5e03\u4e4b\u95f4\u7684\u5dee\u5f02</li> <li>\u8bad\u7ec3WGAN</li> <li>\u7ed3\u679c\u53ef\u89c6\u5316</li> <li>\u4f7f\u7528TensorBoard\u8bb0\u5f55\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u635f\u5931\u51fd\u6570\u7684\u53d8\u5316\u8d8b\u52bf</li> <li>\u5bf9\u6bd4\u4e0d\u540c\u4e4b\u5904\uff0c\u5206\u6790\u5176\u67b6\u6784\u548c\u6539\u8fdb\u70b9</li> </ul> <p>\u901a\u8fc7\u672c\u4efb\u52a1\uff0c\u4f60\u5c06\u5b66\u4f1a\u5728\u7b2c\u4e8c\u90e8\u5206\u7684\u57fa\u7840\u4e0a\uff0c\u7528 WGAN\uff08Wasserstein GAN\uff09\u6765\u5b9e\u73b0\u76f8\u540c\u7684\u76ee\u6807</p>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E5%85%AD%E4%BB%8B%E7%BB%8D/#_3","title":"\u5b9e\u9a8c\u63d0\u4ea4","text":"<p>\u5b9e\u9a8c\u5b8c\u6210\u540e\uff0c\u8bf7\u63d0\u4ea4\u4ee5\u4e0b\u6750\u6599\uff1a</p> <ol> <li>\u8fd0\u884c\u6210\u529f\u7684Jupyter Notebook\u6587\u4ef6</li> <li>\u4e00\u4efdPDF\u62a5\u544a\uff0c\u62a5\u544a\u5185\u5bb9\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a<ol> <li>\u4efb\u52a1\u4e2d\u7684\u586b\u5145\u4ee3\u7801\u548c\u76f8\u5e94\u5b9e\u9a8c\u7ed3\u679c</li> <li>\u5b9e\u9a8c\u516d\u601d\u8003\u9898\u7b54\u6848</li> <li>\u5b9e\u9a8c\u5fc3\u5f97\u4e0e\u4f53\u4f1a</li> </ol> </li> </ol>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E5%85%AD%E4%BB%8B%E7%BB%8D/#_4","title":"\u63d0\u4ea4\u8bf4\u660e","text":"<ol> <li>\u672c\u6b21\u63d0\u4ea4\u7684\u5185\u5bb9\u4e3a: \u5b9e\u9a8c\u516d\u8981\u6c42\u63d0\u4ea4\u7684\u5185\u5bb9\uff0c\u5177\u4f53\u8981\u6c42\u8bf7\u53c2\u89c1\u5b9e\u9a8c\u7f51\u7ad9\uff08https://zhiweinju.github.io/nju-dl-lab-2025spring/\uff09</li> <li>\u63d0\u4ea4\u7684\u62a5\u544a\u6587\u4ef6\u8bf7\u4ee5PDF\u6587\u4ef6\u683c\u5f0f\u4e0a\u4f20\u5230selearning\u7f51\u7ad9\uff0c\u4e0a\u4f20\u6587\u4ef6\u7684\u6587\u4ef6\u547d\u540d\u683c\u5f0f\u4e3a: \u5b66\u53f7_\u59d3\u540d_\u5b9e\u9a8c\u516d.pdf\uff0c\u6bd4\u5982\uff1a123456789_\u5f20\u4e09_\u5b9e\u9a8c\u516d.pdf</li> <li>\u5176\u4ed6\u63d0\u4ea4\u6587\u4ef6\uff08\u5982 \u8fd0\u884c\u6210\u529f\u7684Jupyter Notebook\u6587\u4ef6\uff09\uff0c\u8bf7\u52a0\u4e0a\u524d\u7f00: \u5b66\u53f7_\u59d3\u540d_\uff0c\u6bd4\u5982: 123456789_\u5f20\u4e09_lab6_GAN.ipynb</li> <li>\u672c\u6b21\u63d0\u4ea4\u7684\u622a\u6b62\u65f6\u95f4\u4e3a 4\u670811\u65e523:59:59</li> <li>\u5bf9\u4e8e\u8fdf\u4ea4\u7684\u5904\u7406: \u8fdf\u4ea4\u4e00\u5468\u4ee5\u5185\uff0c\u6298\u6263\u7cfb\u6570\u4e3a0.8\uff0c\u8fdf\u4ea4\u8d85\u8fc7\u4e00\u5468\uff0c\u6298\u6263\u7cfb\u6570\u4e3a0.6\uff0c\u8d85\u8fc7\u4e00\u4e2a\u6708\u505c\u6b62\u63a5\u6536\u63d0\u4ea4\uff0c\u5c1a\u672a\u63d0\u4ea4\u8005\u672c\u6b21\u4f5c\u4e1a\u8ba10\u5206</li> </ol>"},{"location":"lab6/%E5%AE%9E%E9%AA%8C%E5%85%AD%E4%BB%8B%E7%BB%8D/#_5","title":"6.1 \u5b9e\u9a8c\u8bf4\u660e","text":""},{"location":"lab7/%E5%AE%9E%E9%AA%8C%E4%B8%83%E4%BB%8B%E7%BB%8D/","title":"\u5b9e\u9a8c\u4e03\uff1a\u8fc1\u79fb\u5b66\u4e60\u548c\u5143\u5b66\u4e60\u5b9e\u8df5","text":""},{"location":"lab7/%E5%AE%9E%E9%AA%8C%E4%B8%83%E4%BB%8B%E7%BB%8D/#_2","title":"\u5b9e\u9a8c\u4efb\u52a1","text":"<p>\u672c\u6b21\u5b9e\u9a8c\u65e8\u5728\u901a\u8fc7Few-Shot\u5206\u7c7b\u4efb\u52a1\u7406\u89e3\u8fc1\u79fb\u5b66\u4e60\u548c\u5143\u5b66\u4e60\u6838\u5fc3\u601d\u60f3\uff0c\u5171\u5305\u542b\u4e24\u4e2a\u4efb\u52a1\uff1a\u57fa\u4e8e\u8fc1\u79fb\u5b66\u4e60\u7684\u57fa\u7ebf\u6a21\u578b\u8bad\u7ec3\uff0850\u5206\u949f\uff09\u548cMAML\u5143\u5b66\u4e60\u6a21\u578b\u5b9e\u73b0\uff08100\u5206\u949f\uff09\u3002</p>"},{"location":"lab7/%E5%AE%9E%E9%AA%8C%E4%B8%83%E4%BB%8B%E7%BB%8D/#_3","title":"\u6570\u636e\u96c6\u8bf4\u660e","text":"<p>\u4e0b\u8f7d\u8bad\u7ec3\u96c6</p> <p>\u4e0b\u8f7d\u6d4b\u8bd5\u96c6</p> <p>Omniglot\u6570\u636e\u96c6\u5305\u542b50\u79cd\u6587\u5b57\u7cfb\u7edf\u4e2d\u76841623\u4e2a\u624b\u5199\u5b57\u7b26\uff0c\u6bcf\u4e2a\u5b57\u7b26\u753120\u4e2a\u4e0d\u540c\u4e66\u5199\u8005\u7ed8\u5236\u3002\u6570\u636e\u96c6\u5212\u5206\u4e3a\uff1a - \u8bad\u7ec3/\u9a8c\u8bc1\u96c6\uff1a30\u79cd\u6587\u5b57\u7cfb\u7edf    - \u6bcf\u4e2a\u6587\u5b57\u7cfb\u7edf\u4e2d\u6709\u591a\u79cd\u6587\u5b57    - \u6bcf\u4e2a\u6587\u5b57\u670920\u5f20\u56fe\u50cf</p> <p></p> <ul> <li>\u6d4b\u8bd5\u96c6\uff1a640\u5bf9\u652f\u6301\u96c6\u548c\u67e5\u8be2\u96c6</li> <li>5\u5f20\u652f\u6301\u56fe\u50cf</li> <li>5\u5f20\u67e5\u8be2\u56fe\u50cf</li> </ul> <p></p> <ul> <li>\u6d4b\u8bd5\u96c6\u6807\u7b7e\u8bf4\u660e\uff1a</li> </ul> <p></p> <p>\u6570\u636e\u96c6\u4e0b\u8f7d\u4ee3\u7801\u5c06\u5728\u63d0\u4f9b\u7684Jupyter Notebook\u4e2d\u81ea\u52a8\u6267\u884c\u3002</p>"},{"location":"lab7/%E5%AE%9E%E9%AA%8C%E4%B8%83%E4%BB%8B%E7%BB%8D/#_4","title":"\u5b9e\u9a8c\u4efb\u52a1\u8be6\u89e3","text":""},{"location":"lab7/%E5%AE%9E%E9%AA%8C%E4%B8%83%E4%BB%8B%E7%BB%8D/#_5","title":"\u4efb\u52a1\u4e00\uff1a\u8fc1\u79fb\u5b66\u4e60\u57fa\u7ebf\u6a21\u578b","text":"<p>\u8fc1\u79fb\u5b66\u4e60\u76f8\u5173\u77e5\u8bc6\u8bf7\u53c2\u8003\u8fc1\u79fb\u5b66\u4e60\u548c\u5143\u5b66\u4e60\u4ecb\u7ecd</p> <p>\u4e0b\u8f7d\u4efb\u52a1\u4e00\u548c\u4efb\u52a1\u4e8c\u4ee3\u7801</p>"},{"location":"lab7/%E5%AE%9E%E9%AA%8C%E4%B8%83%E4%BB%8B%E7%BB%8D/#_6","title":"\u4efb\u52a1\u63cf\u8ff0","text":"<ol> <li>\u6570\u636e\u6784\u9020\uff1a\u4ece\u8bad\u7ec3\u96c6\u4e2d\u968f\u673a\u9009\u53d65\u4e2aTask</li> <li>\u6a21\u578b\u6784\u5efa\uff1a\u4e00\u4e2a\u7b80\u5355\u76845\u5c42\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff0c\u4ee3\u7801\u5df2\u5728\u63d0\u4f9b\u7684Jupyter Notebook\u7ed9\u51fa</li> <li>\u8bad\u7ec3\u6d41\u7a0b\uff1a</li> <li>\u9636\u6bb5\u4e00\uff1a\u5728\u968f\u673a\u9009\u53d6\u76845\u4e2aTask\u6570\u636e\u4e0a\u9884\u8bad\u7ec3\u5206\u7c7b\u6a21\u578b</li> <li>\u9636\u6bb5\u4e8c\uff1a\u57285\u4e2a\u652f\u6491\u96c6\u4e0a\u5fae\u8c03</li> <li>\u9636\u6bb5\u4e09\uff1a\u5728\u67e5\u8be2\u96c6\u63a8\u7406</li> </ol>"},{"location":"lab7/%E5%AE%9E%E9%AA%8C%E4%B8%83%E4%BB%8B%E7%BB%8D/#maml","title":"\u4efb\u52a1\u4e8c\uff1aMAML\u5143\u5b66\u4e60\u6a21\u578b","text":"<p>\u5143\u5b66\u4e60\u76f8\u5173\u77e5\u8bc6\u8bf7\u53c2\u8003\u8fc1\u79fb\u5b66\u4e60\u548c\u5143\u5b66\u4e60\u4ecb\u7ecd</p>"},{"location":"lab7/%E5%AE%9E%E9%AA%8C%E4%B8%83%E4%BB%8B%E7%BB%8D/#_7","title":"\u4efb\u52a1\u63cf\u8ff0","text":"<ol> <li>MAML\u6838\u5fc3\u601d\u60f3\uff1a</li> <li>\u5728\u4efb\u52a1\u5206\u5e03\u4e0a\u5b66\u4e60\u4e00\u7ec4\u5168\u5c40\u521d\u59cb\u5316\u53c2\u6570</li> <li>\u901a\u8fc7\u5c11\u91cf\u68af\u5ea6\u66f4\u65b0\u5feb\u901f\u9002\u5e94\u65b0\u4efb\u52a1</li> <li>\u5b9e\u73b0\u6b65\u9aa4\uff1a</li> <li>\u91c7\u6837\u4efb\u52a1\u6279\u6b21\uff08\u6bcf\u6279\u542b32\u4e2aTask\uff09</li> <li>\u5185\u5faa\u73af\uff08Inner Loop\uff09\uff1a\u5728\u6bcf\u4e2aTask\u7684\u652f\u6491\u96c6\u4e0a\u6267\u884c\u68af\u5ea6\u66f4\u65b0</li> <li>\u5916\u5faa\u73af\uff08Outer Loop\uff09\uff1a\u57fa\u4e8e\u67e5\u8be2\u96c6\u635f\u5931\u66f4\u65b0\u5143\u6a21\u578b\u53c2\u6570</li> </ol>"},{"location":"lab7/%E5%AE%9E%E9%AA%8C%E4%B8%83%E4%BB%8B%E7%BB%8D/#_8","title":"\u7b97\u6cd5\u4f2a\u4ee3\u7801","text":"<p> \uff08\u6ce8\uff1a\u5b9e\u9645\u4ee3\u7801\u4e2d\u5c06\u63d0\u4f9b\u5b8c\u6574PyTorch\u5b9e\u73b0\uff09</p>"},{"location":"lab7/%E5%AE%9E%E9%AA%8C%E4%B8%83%E4%BB%8B%E7%BB%8D/#_9","title":"\u5b9e\u9a8c\u8d44\u6e90","text":"<ul> <li>MAML\u539f\u8bba\u6587</li> <li>PyTorch\u5143\u5b66\u4e60\u5e93Torchmeta\u53c2\u8003</li> </ul>"},{"location":"lab7/%E5%AE%9E%E9%AA%8C%E4%B8%83%E4%BB%8B%E7%BB%8D/#_10","title":"\u5b9e\u9a8c\u63d0\u4ea4","text":"<p>\u63d0\u4ea4\u622a\u6b62\u524d\u9700\u63d0\u4f9b\u4ee5\u4e0b\u6750\u6599\uff1a</p> <ol> <li>\u4ee3\u7801\u6587\u4ef6\uff1a</li> <li> <p>\u5b8c\u6574\u53ef\u8fd0\u884c\u7684Jupyter Notebook\uff08\u542b\u4efb\u52a1\u4e00\u3001\u4e8c\u5b9e\u73b0\uff09</p> </li> <li> <p>\u5b9e\u9a8c\u62a5\u544a\uff08PDF\u683c\u5f0f\uff09\uff1a</p> </li> </ol> \u5185\u5bb9\u8981\u6c42 \u5206\u503c\u5360\u6bd4 1. \u7ed8\u5236\u9a8c\u8bc1\u96c6\u51c6\u786e\u7387\u548c\u4efb\u52a1\u6570\u91cf\u7684\u5173\u7cfb\u56fe 20% 2. \u4e00\u53e5\u8bdd\u63cf\u8ff0\u9a8c\u8bc1\u96c6\u51c6\u786e\u7387\u548c\u4efb\u52a1\u6570\u91cf\u7684\u5173\u7cfb 5% 3. \u9605\u8bfb\u8bba\u6587\u5e76\u5199\u51fa\u4e00\u4e2a\u4f7f\u7528MAML\u65f6\u53ef\u80fd\u51fa\u73b0\u7684\u95ee\u9898 25% 4. \u89e3\u91ca\u4e0a\u4e00\u95ee\u7684\u95ee\u9898\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u5e76\u7ed9\u51fa\u4f60\u7684\u89e3\u51b3\u65b9\u6cd5 25% 5. \u63cf\u8ff0\u4f60\u5bf9\u6e90\u4ee3\u7801\u505a\u4e86\u54ea\u4e9b\u6539\u8fdb\u4ee5\u63d0\u9ad8\u6d4b\u8bd5\u51c6\u786e\u7387 25% <ol> <li>\u6027\u80fd\u6307\u6807\uff08\u57fa\u7ebf\u6a21\u578b vs MAML\u57285-way 1-shot\u4efb\u52a1\u4e0a\u7684\u6d4b\u8bd5\u51c6\u786e\u7387\uff09\uff1a</li> </ol> <p>\u4e0b\u8f7d\u6d4b\u8bd5\u96c6\u771f\u5b9e\u6807\u7b7e</p> \u6027\u80fd\u8981\u6c42\uff08\u53ef\u53e0\u52a0\uff09 \u52a0\u5206 \u57fa\u7ebf\u6a21\u578bacc&gt;0.6 +5\u5206 MAML acc&gt;0.7 +5\u5206 MAML acc&gt;0.9 +5\u5206 MAML acc&gt;0.95 +5\u5206"},{"location":"lab7/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%85%83%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/","title":"7.2 \u5b9e\u9a8c\u4efb\u52a1\uff1a\u8fc1\u79fb\u5b66\u4e60\u548c\u5143\u5b66\u4e60","text":""},{"location":"lab7/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%85%83%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/#_1","title":"\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u8fc1\u79fb\u5b66\u4e60\u4e0e\u5143\u5b66\u4e60","text":""},{"location":"lab7/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%85%83%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/#_2","title":"\u6982\u8ff0","text":"<p>\u672c\u8282\u8bfe\u901a\u8fc7\u5bf9\u6bd4\u673a\u5668\u5b66\u4e60\u3001\u8fc1\u79fb\u5b66\u4e60\u548c\u5143\u5b66\u4e60\u7684\u6838\u5fc3\u601d\u60f3\uff0c\u5e2e\u52a9\u540c\u5b66\u4eec\u7406\u89e3\u4e0d\u540c\u8303\u5f0f\u89e3\u51b3\u4eba\u5de5\u667a\u80fd\u4efb\u52a1\u65f6\u7684\u8bbe\u8ba1\u54f2\u5b66\u5dee\u5f02\uff0c\u901a\u8fc7\u5b9e\u9a8c\u638c\u63e1\u5143\u5b66\u4e60\u7b97\u6cd5MAML\u4ee5\u53caFew-shot Learning\u3002</p>"},{"location":"lab7/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%85%83%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/#machine-learning","title":"\u7b2c\u4e00\u7ae0 \u673a\u5668\u5b66\u4e60\uff08Machine Learning\uff09","text":""},{"location":"lab7/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%85%83%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/#11","title":"1.1 \u57fa\u672c\u6982\u5ff5","text":"<ul> <li>\u4efb\u52a1\u5bfc\u5411\uff1a\u4e3a\u7279\u5b9a\u4efb\u52a1\u4ece\u5934\u8bad\u7ec3\u6a21\u578b</li> <li>\u6570\u636e\u4f9d\u8d56\uff1a\u9700\u8981\u5927\u91cf\u6807\u6ce8\u6570\u636e</li> <li>\u8bad\u7ec3\u65b9\u5f0f\uff1a\u7aef\u5230\u7aef\uff08End-to-End\uff09\u8bad\u7ec3</li> <li>\u5c40\u9650\u6027\uff1a\u96be\u4ee5\u5feb\u901f\u9002\u5e94\u65b0\u4efb\u52a1</li> </ul>"},{"location":"lab7/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%85%83%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/#12","title":"1.2 \u5178\u578b\u573a\u666f","text":"<ul> <li>\u56fe\u50cf\u5206\u7c7b\uff08ImageNet\uff09</li> <li>\u6587\u672c\u5206\u7c7b\uff08IMDB\u5f71\u8bc4\uff09</li> <li>\u8bed\u97f3\u8bc6\u522b\uff08\u7279\u5b9a\u8bed\u79cd\uff09</li> </ul>"},{"location":"lab7/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%85%83%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/#transfer-learning","title":"\u7b2c\u4e8c\u7ae0 \u8fc1\u79fb\u5b66\u4e60\uff08Transfer Learning\uff09","text":""},{"location":"lab7/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%85%83%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/#21","title":"2.1 \u6838\u5fc3\u601d\u60f3","text":"<ul> <li>\u77e5\u8bc6\u590d\u7528\uff1a\u5229\u7528\u5df2\u6709\u6a21\u578b\u89e3\u51b3\u65b0\u4efb\u52a1</li> <li>\u5173\u952e\u7b56\u7565\uff1a</li> <li>\u7279\u5f81\u63d0\u53d6\u5668\u51bb\u7ed3</li> <li>\u9876\u5c42\u5fae\u8c03\uff08Fine-tuning\uff09</li> <li>\u9886\u57df\u9002\u5e94\uff08Domain Adaptation\uff09</li> </ul>"},{"location":"lab7/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%85%83%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/#meta-learning","title":"\u7b2c\u4e09\u7ae0 \u5143\u5b66\u4e60\uff08Meta Learning\uff09","text":""},{"location":"lab7/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%85%83%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/#31","title":"3.1 \u5b66\u4e60\u8303\u5f0f\u9769\u65b0","text":"<ul> <li>\u6838\u5fc3\u76ee\u6807\uff1a\u5b66\u4f1a\u5b66\u4e60\uff08Learn to Learn\uff09</li> <li>\u4ee5\u5206\u7c7b\u4efb\u52a1\u4e3a\u4f8b\uff0c\u5143\u5b66\u4e60\u8f93\u51fa\u7684\u5e76\u975e\u662f\u6700\u7ec8\u7684\u5206\u7c7b\u7ed3\u679c\uff0c\u800c\u662f\u4e00\u4e2a\u4e2d\u95f4\u6a21\u578bF\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0cF\u7684\u6a21\u578b\u7ed3\u6784\uff0c\u6a21\u578b\u521d\u59cb\u5316\u53c2\u6570\u6216\u8005\u5b66\u4e60\u7387\u7b49\u662f\u5143\u5b66\u4e60\u9700\u8981\u6c42\u89e3\u7684\u3002\u5f97\u5230\u6a21\u578bF\u4e4b\u540e\uff0c\u9700\u8981\u5229\u7528\u4e0b\u6e38\u4efb\u52a1\u7684\u6570\u636e\u5bf9F\u8fdb\u884c\u5fae\u8c03\uff0c\u5f97\u5230f\uff0c\u8fd9\u624d\u662f\u6700\u7ec8\u7684\u5206\u7c7b\u6a21\u578b\u3002   </li> <li>\u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u4ee5\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1\u4e3a\u4f8b\uff0c\u8bad\u7ec3\u6837\u672c\u5c31\u662f\u56fe\u50cf\u548c\u6807\u7b7e\uff0c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u6bcf\u6b21\u4f1a\u4ece\u8bad\u7ec3\u96c6\u4e2d\u91c7\u6837batch size\u4e2a\u56fe\u50cf\u53ca\u5176\u5bf9\u5e94\u7684\u6807\u7b7e\u8fdb\u884c\u8bad\u7ec3\u3002\u800c\u5728\u5143\u5b66\u4e60\u4e2d\uff0c\u6211\u4eec\u91c7\u6837\u7684\u5e76\u975e\u56fe\u50cf\u548c\u6807\u7b7e\uff0c\u800c\u662f\u4efb\u52a1\uff08Task\uff09\u3002\u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff0c\u6211\u4eec\u4ece\u8bad\u7ec3\u96c6\u4e2d\u91c7\u6837\u4e862\u4e2a\u4efb\u52a1\uff0c\u8fd9\u4e24\u4e2a\u4efb\u52a1\u5206\u522b\u4e3a\u732b\u548c\u72d7\u7684\u4e8c\u5206\u7c7b\u4efb\u52a1\u4ee5\u53ca\u72b0\u72f3\u548c\u7a7f\u5c71\u7532\u7684\u4e8c\u5206\u7c7b\u4efb\u52a1\uff0c\u6bcf\u4e2a\u4efb\u52a1\u6211\u4eec\u90fd\u91c7\u7528\u4ea4\u53c9\u71b5\u635f\u5931\u8fdb\u884c\u4f18\u5316\uff0c\u90a3\u4e48\u6700\u7ec8\u7684\u635f\u5931\u5c31\u662f\u6240\u6709\u4efb\u52a1\u4e0a\u7684\u635f\u5931\u4e4b\u548c\u3002   </li> <li>\u53e6\u4e00\u4e2a\u4e0e\u673a\u5668\u5b66\u4e60\u4e0d\u540c\u7684\u70b9\u5728\u4e8e\uff0c\u5728\u5143\u5b66\u4e60\u4e2d\uff0c\u4e0d\u7ba1\u662f\u8bad\u7ec3\u96c6\u8fd8\u662f\u6d4b\u8bd5\u96c6\u4e2d\u7684\u4efb\u52a1\uff0c\u6bcf\u4e2a\u4efb\u52a1\u90fd\u4f1a\u6709\u81ea\u5df1\u7684\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u3002\u4e3a\u4e86\u907f\u514d\u6df7\u6dc6\uff0c\u6211\u4eec\u5c06\u6bcf\u4e2a\u4efb\u52a1\u4e2d\u7684\u8bad\u7ec3\u96c6\u79f0\u4e3a\u652f\u6301\u96c6\uff08Support Set\uff09\uff0c\u6bcf\u4e2a\u4efb\u52a1\u4e2d\u7684\u6d4b\u8bd5\u96c6\u79f0\u4e3a\u67e5\u8be2\u96c6\uff08Query Set\uff09\u3002\u652f\u6301\u96c6\u7684\u4f5c\u7528\u662f\u8bad\u7ec3\u5f97\u5230F\uff0c\u800c\u67e5\u8be2\u96c6\u5219\u662f\u7528\u6765\u8bad\u7ec3\u5f97\u5230f\u3002   </li> <li>\u5173\u952e\u7279\u5f81\uff1a</li> <li>\u591a\u4efb\u52a1\u8bad\u7ec3</li> <li>\u5feb\u901f\u9002\u5e94\u80fd\u529b</li> <li>\u53c2\u6570\u521d\u59cb\u5316\u7b56\u7565</li> <li>Few-shot Learning\u6982\u5ff5\u8865\u5145\u8bf4\u660e\uff1a </li> </ul>"},{"location":"lab7/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%85%83%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/#32-maml","title":"3.2 MAML \u7b97\u6cd5\u89e3\u6790","text":"<p>Model-agnostic Meta-Learning \u6846\u67b6\uff1a</p> <p>\u7ed3\u5408MAML\u8bba\u6587\u4e2d\u7684\u7b97\u6cd5\u6d41\u7a0b\u56fe\uff0c\u8bb2\u89e3MAML\uff1a</p> <p></p> <p>\u7b2c\u4e00\u4e2aRequire\u6307\u7684\u662f\u5728\u8bad\u7ec3\u96c6\u4e2dtask\u7684\u5206\u5e03\u3002\u7ed3\u5408\u6211\u4eec\u5728\u4e0a\u4e00\u5c0f\u8282\u4e3e\u7684\u4f8b\u5b50\uff0c\u8fd9\u91cc\u5373\u53cd\u590d\u968f\u673a\u62bd\u53d6task\uff0c\u5f62\u6210\u4e00\u4e2a\u7531\u82e5\u5e72\u4e2a\uff08e.g., 1000\u4e2a\uff09\u7ec4\u6210\u7684task\u6c60\uff0c\u4f5c\u4e3aMAML\u7684\u8bad\u7ec3\u96c6\u3002task\u4e4b\u95f4\uff0c\u53ea\u8981\u5b58\u5728\u4e00\u5b9a\u7684\u5dee\u5f02\u5373\u53ef\uff0c\u4e0d\u9700\u8981\u5b8c\u5168\u4e0d\u540c\u3002\u518d\u5f3a\u8c03\u4e00\u4e0b\uff0cMAML\u7684\u8bad\u7ec3\u662f\u57fa\u4e8etask\u7684\uff0c\u800c\u8fd9\u91cc\u7684\u6bcf\u4e2atask\u5c31\u76f8\u5f53\u4e8e\u666e\u901a\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u4e00\u6761\u8bad\u7ec3\u6570\u636e\u3002</p> <p>\u7b2c\u4e8c\u4e2aRequire\u4e2d\u7684step size\u662f\u5b66\u4e60\u7387\u3002MAML\u662f\u57fa\u4e8e\u4e8c\u91cd\u68af\u5ea6\u7684\uff0c\u6bcf\u6b21\u8fed\u4ee3\u5305\u62ec\u4e24\u6b21\u53c2\u6570\u66f4\u65b0\u7684\u8fc7\u7a0b\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5b66\u4e60\u7387\u53ef\u4ee5\u8c03\u6574\u3002</p> <ol> <li>\u968f\u673a\u521d\u59cb\u5316\u6a21\u578b\u7684\u53c2\u6570\uff1b</li> <li>\u5faa\u73af\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u8f6e\u8fed\u4ee3\u8fc7\u7a0b\u6216\u4e00\u4e2aepoch\uff1b</li> <li>\u76f8\u5f53\u4e8epytorch\u4e2d\u7684DataLoader\uff0c\u5373\u968f\u673a\u5bf9\u82e5\u5e72\u4e2a\uff08e.g., 4\u4e2a\uff09task\u8fdb\u884c\u91c7\u6837\uff0c\u5f62\u6210\u4e00\u4e2abatch\uff1b</li> <li>\u5bf9\u4e8e\u6240\u6709\u91c7\u6837\u51fa\u6765\u7684task\uff0c\u6267\u884c5~6\u6b65\uff1b</li> <li>\u5bf9batch\u4e2d\u7684\u67d0\u4e00\u4e2atask\u4e2d\u7684support set\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u53c2\u6570\u7684\u68af\u5ea6\u3002\u5728N-way K-shot\u7684\u8bbe\u7f6e\u4e0b\uff0c\u8fd9\u91cc\u7684support set\u5e94\u8be5\u6709N*K\u4e2a\u6837\u672c\u3002\u7b97\u6cd5\u4e2d\u5199with respect to K examples\uff0c\u9ed8\u8ba4\u5bf9\u6bcf\u4e00\u4e2aclass\u4e0b\u7684K\u4e2a\u6837\u672c\u505a\u8ba1\u7b97\u3002\u5b9e\u9645\u4e0a\u53c2\u4e0e\u8ba1\u7b97\u7684\u603b\u8ba1\u6709NK\u4e2a\u6837\u672c\uff1b</li> <li>\u7b2c\u4e00\u6b21\u68af\u5ea6\u7684\u66f4\u65b0\uff1b</li> <li>\u6b65\u9aa44\uff5e\u6b65\u9aa47\u7ed3\u675f\u540e\uff0cMAML\u5b8c\u6210\u4e86\u7b2c\u4e00\u6b21\u68af\u5ea6\u66f4\u65b0\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u505a\u7684\uff0c\u662f\u6839\u636e\u7b2c\u4e00\u6b21\u68af\u5ea6\u66f4\u65b0\u5f97\u5230\u7684\u53c2\u6570\uff0c\u8ba1\u7b97\u7b2c\u4e8c\u6b21\u68af\u5ea6\u66f4\u65b0\u3002\u7b2c\u4e8c\u6b21\u68af\u5ea6\u66f4\u65b0\u65f6\u8ba1\u7b97\u51fa\u7684\u68af\u5ea6\uff0c\u76f4\u63a5\u901a\u8fc7SGD\u4f5c\u7528\u4e8e\u539f\u6a21\u578b\u4e0a\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u7684\u6a21\u578b\u771f\u6b63\u7528\u4e8e\u66f4\u65b0\u5176\u53c2\u6570\u7684\u68af\u5ea6\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u7b2c\u4e00\u6b21\u68af\u5ea6\u66f4\u65b0\u662f\u4e3a\u4e86\u7b2c\u4e8c\u6b21\u68af\u5ea6\u66f4\u65b0\uff0c\u800c\u7b2c\u4e8c\u6b21\u68af\u5ea6\u66f4\u65b0\u624d\u662f\u4e3a\u4e86\u66f4\u65b0\u6a21\u578b\u53c2\u6570\u3002</li> <li>\u5bf9\u5e94\u7b2c\u4e8c\u6b21\u68af\u5ea6\u66f4\u65b0\u7684\u8fc7\u7a0b\u3002\u8fd9\u91cc\u7684loss\u8ba1\u7b97\u65b9\u6cd5\uff0c\u5927\u81f4\u4e0e\u6b65\u9aa45\u76f8\u540c\uff0c\u4f46\u662f\u4e0d\u540c\u70b9\u6709\u4e24\u5904\u3002\u4e00\u5904\u662f\u6211\u4eec\u4e0d\u518d\u662f\u5206\u522b\u5229\u7528\u6bcf\u4e2atask\u7684loss\u66f4\u65b0\u68af\u5ea6\uff0c\u800c\u662f\u50cf\u5e38\u89c1\u7684\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u4e00\u6837\uff0c\u8ba1\u7b97\u4e00\u4e2abatch\u7684loss\u603b\u548c\uff0c\u5bf9\u68af\u5ea6\u8fdb\u884c\u968f\u673a\u68af\u5ea6\u4e0b\u964dSGD\u3002\u53e6\u4e00\u5904\u662f\u8fd9\u91cc\u53c2\u4e0e\u8ba1\u7b97\u7684\u6837\u672c\uff0c\u662ftask\u4e2d\u7684query set\uff0c\u76ee\u7684\u662f\u589e\u5f3a\u6a21\u578b\u5728task\u4e0a\u7684\u6cdb\u5316\u80fd\u529b\uff0c\u907f\u514d\u8fc7\u62df\u5408support set\u3002\u6b65\u9aa48\u7ed3\u675f\u540e\uff0c\u6a21\u578b\u7ed3\u675f\u5728\u8be5batch\u4e2d\u7684\u8bad\u7ec3\uff0c\u5f00\u59cb\u56de\u5230\u6b65\u9aa43\uff0c\u7ee7\u7eed\u91c7\u6837\u4e0b\u4e00\u4e2abatch\u3002</li> </ol> <p></p>"},{"location":"lab7/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%85%83%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/#33","title":"3.3 \u8303\u5f0f\u5bf9\u6bd4","text":"\u7ef4\u5ea6 \u666e\u901a\u6df1\u5ea6\u5b66\u4e60 \u8fc1\u79fb\u5b66\u4e60 \u5143\u5b66\u4e60 \u5b66\u4e60\u76ee\u6807 \u5355\u4efb\u52a1\u4f18\u5316 \u4efb\u52a1\u95f4\u8fc1\u79fb \u5b66\u4e60\u7b56\u7565\u83b7\u53d6 \u6570\u636e\u5206\u5e03 \u72ec\u7acb\u540c\u5206\u5e03 \u76f8\u5173\u5206\u5e03 \u591a\u5206\u5e03 \u9002\u5e94\u901f\u5ea6 \u6162 \u4e2d\u7b49 \u5feb \u5178\u578b\u5e94\u7528 \u6807\u51c6\u5206\u7c7b \u9886\u57df\u8fc1\u79fb \u5c0f\u6837\u672c\u5b66\u4e60"},{"location":"lab7/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%85%83%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/#_3","title":"\u7b2c\u56db\u7ae0 \u5e94\u7528\u573a\u666f\u5bf9\u6bd4","text":""},{"location":"lab7/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%85%83%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/#41","title":"4.1 \u5178\u578b\u6848\u4f8b","text":"<ul> <li>\u666e\u901a\u6df1\u5ea6\u5b66\u4e60\uff1a\u6807\u51c6\u56fe\u50cf\u5206\u7c7b</li> <li>\u8fc1\u79fb\u5b66\u4e60\uff1a\u533b\u7597\u5f71\u50cf\u5206\u6790\uff08\u4f7f\u7528ImageNet\u9884\u8bad\u7ec3\u6a21\u578b\uff09</li> <li>\u5143\u5b66\u4e60\uff1a\u673a\u5668\u4eba\u5feb\u901f\u638c\u63e1\u65b0\u64cd\u4f5c\u6280\u80fd</li> </ul>"},{"location":"lab7/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%85%83%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/#_4","title":"\u7b2c\u4e94\u7ae0 \u6838\u5fc3\u5dee\u5f02\u603b\u7ed3","text":""},{"location":"lab7/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%85%83%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/#51","title":"5.1 \u54f2\u5b66\u5dee\u5f02","text":"<ul> <li>\u666e\u901a\u6df1\u5ea6\u5b66\u4e60\uff1a\u5de5\u5320\u601d\u7ef4\uff08\u7cbe\u96d5\u7ec6\u7422\u5355\u4e2a\u4efb\u52a1\uff09</li> <li>\u8fc1\u79fb\u5b66\u4e60\uff1a\u5de5\u7a0b\u5e08\u601d\u7ef4\uff08\u6a21\u5757\u5316\u590d\u7528\u77e5\u8bc6\uff09</li> <li>\u5143\u5b66\u4e60\uff1a\u6559\u80b2\u5bb6\u601d\u7ef4\uff08\u57f9\u517b\u5b66\u4e60\u80fd\u529b\uff09</li> </ul>"},{"location":"lab7/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%85%83%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/#52","title":"5.2 \u6280\u672f\u5bf9\u6bd4\u56fe","text":""},{"location":"lab7/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%85%83%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/#_5","title":"\u5ef6\u4f38\u9605\u8bfb","text":"<ul> <li>\u8fc1\u79fb\u5b66\u4e60\u7efc\u8ff0</li> <li>MAML\u539f\u59cb\u8bba\u6587</li> <li>\u5143\u5b66\u4e60\u524d\u6cbf\u8fdb\u5c55 ```</li> </ul>"},{"location":"lab8/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/","title":"8.2 \u5b9e\u9a8c\u4efb\u52a1\uff1a\u591a\u6a21\u6001\u60c5\u611f\u5206\u6790","text":"<p>\u6ce8\u610f</p> <p>\u5728\u5b9e\u9a8c\u5f00\u59cb\u65f6\uff0c\u8bf7\u786e\u4fdd\u5b9e\u9a8c\u8fd0\u884c\u5728GPU\u4e0a\uff01</p> <p>\u5728python\u73af\u5883\u4e0b\u6216\u5728jupyter notebook\u91cc\u6d4b\u8bd5\uff1a <pre><code>import torch\ntorch.cuda.is_available()\n</code></pre> \u5982\u679c\u8fd4\u56deTrue\uff0c\u5219GPU\u80fd\u88ab\u8c03\u7528\uff0c\u5426\u5219\u8bf7\u91cd\u542fdocker\u73af\u5883\u6216\u8054\u7cfb\u52a9\u6559</p> <p>\u5bf9\u4e8e\u5b9e\u9a8c\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u4e0d\u719f\u6089\u7684\u6a21\u578b\u6216\u8005\u51fd\u6570\u8c03\u7528\uff0c\u53ef\u4ee5\u53c2\u9605 PyTorch\u5b98\u7f51\u6587\u6863</p>"},{"location":"lab8/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/#_1","title":"\u4efb\u52a1\u80cc\u666f\u4ecb\u7ecd","text":"<p>\u591a\u6a21\u6001\u5b66\u4e60\u662f\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u9886\u57df\uff0c\u5b83\u6d89\u53ca\u4ece\u591a\u4e2a\u6a21\u6001\uff08\u5982\u6587\u672c\u3001\u56fe\u50cf\u3001\u97f3\u9891\u7b49\uff09\u4e2d\u63d0\u53d6\u4fe1\u606f\uff0c\u4ee5\u63d0\u9ad8\u6a21\u578b\u7684\u6027\u80fd\u548c\u6cdb\u5316\u80fd\u529b\u3002\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u4fe1\u606f\u901a\u5e38\u4ee5\u591a\u79cd\u5f62\u5f0f\u5b58\u5728\uff0c\u4f8b\u5982\u5728\u89c6\u9891\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u83b7\u53d6\u89c6\u89c9\u3001\u97f3\u9891\u548c\u6587\u672c\u4fe1\u606f\u3002\u591a\u6a21\u6001\u5b66\u4e60\u7684\u76ee\u6807\u662f\u6709\u6548\u5730\u878d\u5408\u8fd9\u4e9b\u4e0d\u540c\u6a21\u6001\u7684\u4fe1\u606f\uff0c\u4ee5\u4fbf\u66f4\u51c6\u786e\u5730\u5b8c\u6210\u7279\u5b9a\u4efb\u52a1\u3002</p> <p>\u60c5\u611f\u5206\u6790\u662f\u81ea\u7136\u8bed\u8a00\u5904\u7406\u548c\u8ba1\u7b97\u673a\u89c6\u89c9\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u9886\u57df\uff0c\u65e8\u5728\u8bc6\u522b\u548c\u63d0\u53d6\u6587\u672c\u3001\u97f3\u9891\u6216\u89c6\u9891\u4e2d\u7684\u60c5\u611f\u4fe1\u606f\u3002\u591a\u6a21\u6001\u60c5\u611f\u5206\u6790\uff08Multimodal Sentiment Analysis\uff09\u7ed3\u5408\u4e86\u6765\u81ea\u591a\u4e2a\u6a21\u6001\u7684\u4fe1\u606f\uff0c\u4ee5\u63d0\u9ad8\u60c5\u611f\u8bc6\u522b\u7684\u51c6\u786e\u6027\u3002</p>"},{"location":"lab8/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/#_2","title":"\u6570\u636e\u96c6\u8bf4\u660e","text":"<p>\u672c\u5b9e\u9a8c\u4f7f\u7528\u7684\u6570\u636e\u96c6\u662fCMU-MOSI\uff08Multimodal Opinion-level Sentiment Intensity\uff09\uff0c\u8fd9\u662f\u4e00\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684\u591a\u6a21\u6001\u60c5\u611f\u5206\u6790\u6570\u636e\u96c6\u3002CMU-MOSI\u6570\u636e\u96c6\u5305\u542b\u89c6\u9891\u7247\u6bb5\uff0c\u6bcf\u4e2a\u7247\u6bb5\u90fd\u9644\u6709\u6587\u672c\u3001\u97f3\u9891\u548c\u89c6\u89c9\u7279\u5f81\uff0c\u4ee5\u53ca\u5bf9\u5e94\u7684\u60c5\u611f\u6807\u7b7e\u3002\u60c5\u611f\u6807\u7b7e\u7684\u8303\u56f4\u4e3a[-3, 3]\uff0c\u8868\u793a\u4ece\u5f3a\u70c8\u7684\u8d1f\u9762\u60c5\u611f\u5230\u5f3a\u70c8\u7684\u6b63\u9762\u60c5\u611f\u3002</p> <p>\u6570\u636e\u96c6\u5206\u4e3a\u8bad\u7ec3\u96c6\u3001\u9a8c\u8bc1\u96c6\u548c\u6d4b\u8bd5\u96c6\u3002 \u6570\u636e\u96c6\u5185\u7684\u6bcf\u4e2a\u6837\u672c\u4e3a\u4e00\u6bb5\u7b2c\u4e00\u4eba\u79f0\u7684\u8bb2\u8ff0\u89c6\u9891\u3002</p> <p>\u591a\u6a21\u6001\u60c5\u611f\u5206\u6790\u6a21\u578b\u9700\u8981\u7efc\u5408\u89c6\u9891\u753b\u9762\uff0cASR\u8f6c\u5f55\u6587\u672c\u548c\u97f3\u9891\u7efc\u5408\u5206\u6790\u5224\u65ad\u89c6\u9891\u60c5\u611f\u3002</p> <p>\u8003\u8651\u5230\u663e\u5b58\u548c\u65f6\u95f4\u5f00\u9500\uff0c\u6211\u4eec\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\u91c7\u7528\u4e86\u65e9\u671f\u591a\u6a21\u6001\u60c5\u611f\u8bc6\u522b\u7b97\u6cd5\u7684\u4e00\u822c\u6d41\u7a0b\uff1a \u5148\u901a\u8fc7\u9884\u8bad\u7ec3\u6a21\u578b\u63d0\u53d6\u591a\u6a21\u6001\u7279\u5f81\uff0c\u7136\u540e\u57fa\u4e8e\u63d0\u53d6\u7684\u591a\u6a21\u6001\u7279\u5f81\u8bad\u7ec3\u548c\u6d4b\u8bd5\u6a21\u578b\u3002</p> <p>\uff08\u5bf9\u8be5\u4efb\u52a1\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u8003\u8651\u4ece\u539f\u59cb\u7684\u89c6\u9891\u3001\u6587\u672c\u548c\u97f3\u9891\u7279\u5f81\u5f00\u59cb\u8bbe\u8ba1\u548c\u8bad\u7ec3\u6a21\u578b\uff0c\u53ef\u4ee5\u5f97\u5230\u66f4\u597d\u7684\u6548\u679c\uff0c\u672c\u6b21\u5b9e\u9a8c\u4e0d\u505a\u8981\u6c42\u3002\uff09</p> <p>\u6bcf\u4e2a\u6837\u672c\u5305\u542b\u4ee5\u4e0b\u7279\u5f81\uff1a</p> <ul> <li>\u89c6\u89c9\u7279\u5f81\uff1a\u4ece\u89c6\u9891\u5e27\u4e2d\u63d0\u53d6\u7684\u89c6\u89c9\u4fe1\u606f\u3002\u89c6\u89c9\u7279\u5f81\u662f\u901a\u8fc7FACET\u548cOpenFace\u63d0\u53d6\u7684\u3002FACET\u63d0\u53d6\u4e86\u4e03\u79cd\u57fa\u672c\u60c5\u7eea\u548c\u4e24\u79cd\u9ad8\u7ea7\u60c5\u7eea\u7684\u6307\u6807\uff0c\u4ee5\u53ca20\u4e2a\u9762\u90e8\u52a8\u4f5c\u5355\u5143\uff08FACs\uff09\uff0cOpenFace\u63d0\u53d6\u4e86\u5934\u90e8\u4f4d\u7f6e\u3001\u5934\u90e8\u65cb\u8f6c\u548c68\u4e2a\u9762\u90e8\u6807\u5fd7\u70b9\u7684\u4f4d\u7f6e\u3002\u6bcf\u5e27\u670935\u4e2a\u7279\u5f81\u3002</li> <li>\u6587\u672c\u7279\u5f81\uff1a\u4ece\u89c6\u9891\u4e2d\u63d0\u53d6\u7684\u6587\u672c\u4fe1\u606f\u3002\u6587\u672c\u7279\u5f81\u662f\u901a\u8fc7GloVe\u8bcd\u5d4c\u5165\u5f97\u5230\u7684\uff0c\u6bcf\u4e2a\u5355\u8bcd\u88ab\u8868\u793a\u4e3a\u4e00\u4e2a300\u7ef4\u7684\u5411\u91cf\u3002</li> <li>\u97f3\u9891\u7279\u5f81\uff1a\u4ece\u89c6\u9891\u4e2d\u63d0\u53d6\u7684\u97f3\u9891\u4fe1\u606f\u3002\u97f3\u9891\u7279\u5f81\u662f\u901a\u8fc7COVAREP\u63d0\u53d6\u7684\uff0c\u5305\u62ec12\u4e2aMFCCs\u3001\u97f3\u9ad8\u8ddf\u8e2a\u3001\u58f0\u95e8\u6e90\u53c2\u6570\u7b49\u3002\u6bcf\u5e27\u670974\u4e2a\u7279\u5f81\u3002</li> <li>\u60c5\u611f\u6807\u7b7e\uff1a\u8868\u793a\u60c5\u611f\u5f3a\u5ea6\u7684\u6570\u503c\u3002\u60c5\u611f\u6807\u7b7e\u901a\u8fc7\u5bf9\u82e5\u5e72\u6807\u6ce8\u4eba\u5458\u6807\u6ce8\u7684[-3, 3]\u5185\u7684\u6574\u6570\u8bc4\u5206\u6c42\u5e73\u5747\u5f97\u5230\uff0c\u8868\u793a\u4ece\u5f3a\u70c8\u7684\u8d1f\u9762\u60c5\u611f\u5230\u5f3a\u70c8\u7684\u6b63\u9762\u60c5\u611f\u3002</li> </ul> <p>\u7531\u4e8e\u7279\u5f81\u5df2\u7ecf\u63d0\u524d\u8fdb\u884c\u4e86\u8de8\u6a21\u6001\u7684\u5bf9\u9f50\u64cd\u4f5c\uff0c\u56e0\u6b64\u6bcf\u4e2a\u6a21\u6001\u7684\u7279\u5f81\u7684\u957f\u5ea6\u5747\u4e3a50.</p> <p>\u6570\u636e\u96c6\u4e0b\u8f7d\u5730\u5740</p> <p>\u6570\u636e\u96c6\u4e0b\u8f7d\u9047\u5230\u95ee\u9898\u8bf7\u8054\u7cfb\u52a9\u6559\u3002</p>"},{"location":"lab8/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/#_3","title":"\u5177\u4f53\u5b9e\u73b0\u8fc7\u7a0b","text":"<p>\u4e00\u4e2a\u5b8c\u6574\u7684\u6df1\u5ea6\u5b66\u4e60\u9879\u76ee\u901a\u5e38\u5305\u62ec\u4ee5\u4e0b\u6b65\u9aa4\uff1a\u6570\u636e\u96c6\u52a0\u8f7d\u3001\u6a21\u578b\u6784\u5efa\u3001\u8bad\u7ec3\u4e0e\u6d4b\u8bd5\u6d41\u7a0b\uff0c\u4ee5\u53ca\u8bc4\u4ef7\u6307\u6807\u7684\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u3002</p> <p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u786e\u4fdd\u9879\u76ee\u7684\u53ef\u7ef4\u62a4\u6027\u548c\u6a21\u5757\u5316\uff0c\u8fd9\u4e9b\u6b65\u9aa4\u4f1a\u5206\u5e03\u5728\u4e0d\u540c\u7684\u6587\u4ef6\u4e2d\u3002 \u4f46\u662f\u4e3a\u4e86\u4fbf\u4e8e\u4f5c\u4e1a\u63d0\u4ea4\u548c\u8bc4\u5206\uff0c\u6211\u4eec\u5c06\u6240\u6709\u6b65\u9aa4\u6574\u5408\u5728\u4e00\u4e2aJupyter Notebook\u6587\u4ef6\u4e2d\u3002</p> <p>\u6a21\u578b\u6846\u67b6\u5df2\u5728\u6587\u6863\u4e2d\u57fa\u672c\u5b8c\u6210\uff0c\u6838\u5fc3\u90e8\u5206\u9700\u8981\u4f60\u81ea\u884c\u8865\u5145\u5b8c\u6574\uff0c\u5728\u9700\u8981\u8865\u5145\u7684\u90e8\u5206\u5df2\u7ecf\u6807\u6ce8# TODO\u5e76\u9644\u4e0a\u76f8\u5e94\u7684\u5185\u5bb9\u63d0\u793a\u3002</p>"},{"location":"lab8/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/#_4","title":"\u5bfc\u5165\u6240\u9700\u7684\u6a21\u5757","text":"<pre><code>import pickle\nimport random\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset, DataLoader\nimport torch.optim as optim\nfrom torch.optim.lr_scheduler import StepLR, CosineAnnealingLR\nfrom sklearn.metrics import accuracy_score, f1_score\n</code></pre> <p>\u6ce8\u610f</p> <p>\u5982\u679c\u5bfc\u5165sklearn\u62a5\u9519\u672a\u5b89\u88c5\uff0c\u901a\u8fc7\u4ee5\u4e0b\u6307\u4ee4\u5b89\u88c5: <pre><code>pip install numpy==1.23.0 --upgrade -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install scikit-learn==1.2.2 -i https://pypi.tuna.tsinghua.edu.cn/simple\n</code></pre></p>"},{"location":"lab8/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/#_5","title":"\u6570\u636e\u96c6\u52a0\u8f7d","text":"<pre><code>class MOSIDataset(Dataset):\n    def __init__(self, data_path, split='train'):\n        # Load the data from the pickle file\n        with open(data_path, 'rb') as f:\n            data = pickle.load(f)\n\n        # Select the appropriate split\n        self.vision = data[split]['vision']\n        self.text = data[split]['text']\n        self.audio = data[split]['audio']\n        self.labels = data[split]['labels']\n        self.ids = data[split]['id']\n\n        # audio\u6570\u636e\u4e2d\u5b58\u5728\u574f\u70b9\u9700\u8981\u5904\u7406\uff1a\n        self.audio[self.audio == float('inf')] = 0.0\n        self.audio[self.audio == float('-inf')] = 0.0\n\n    def __len__(self):\n        # TODO: \u8fd4\u56de\u6570\u636e\u96c6\u957f\u5ea6\n\n    def __getitem__(self, idx):\n        # Extract the features and label for the given index\n        vision = torch.tensor(self.vision[idx], dtype=torch.float32)\n        text = torch.tensor(self.text[idx], dtype=torch.float32)\n        audio = torch.tensor(self.audio[idx], dtype=torch.float32)\n        label = torch.tensor(self.labels[idx], dtype=torch.float32).squeeze()\n\n        return vision, text, audio, label\n</code></pre>"},{"location":"lab8/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/#_6","title":"\u6a21\u578b\u6784\u5efa","text":"<p>\u4e00\u4e2a\u7b80\u5355\u7684\u591a\u6a21\u6001\u60c5\u611f\u5206\u6790\u6a21\u578b\u7684\u6846\u67b6\u5982\u4e0b\uff1a </p> <p>\u57fa\u4e8e\u4e0a\u8ff0\u6846\u67b6\uff0c\u672c\u6b21\u5b9e\u9a8c\u8bbe\u8ba1\u5b9e\u73b0\u4e00\u4e2a\u57fa\u4e8eLSTM\u7684\u591a\u6a21\u6001\u60c5\u611f\u5206\u6790\u6a21\u578b\u3002</p> <p>\u6211\u4eec\u4f7f\u7528LSTM\u6a21\u578b\uff08\u5b9e\u9a8c\u56db\uff09\u4f5c\u4e3a\u5355\u6a21\u6001\u7f16\u7801\u5668\u548c\u591a\u6a21\u6001\u878d\u5408\u7f16\u7801\u5668\u67b6\u6784\uff0c\u6700\u540e\u6211\u4eec\u901a\u8fc7\u7ebf\u6027\u5c42\u8f93\u51fa\u4e00\u4e2a\u9884\u6d4b\u503c\u3002</p> <p>\u7531\u4e8e\u5f97\u5206\u662f[-3, 3]\u5185\u7684\u4e00\u4e2a\u5b9e\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528sigmoid\u51fd\u6570\u6620\u5c04\u5230[0, 1]\u5e76\u653e\u7f29\u5230\u5bf9\u5e94\u5927\u5c0f\u3002</p> <pre><code>class MultimodalSentimentAnalysisModel(nn.Module):\n    def __init__(self):\n        super(MultimodalSentimentAnalysisModel, self).__init__()\n\n        self.vision_norm = nn.LayerNorm(35)\n        self.text_norm = nn.LayerNorm(300)\n        self.audio_norm = nn.LayerNorm(74)\n\n        self.vision_fc = nn.Linear(35, 128)\n        self.text_fc = nn.Linear(300, 128)\n        self.audio_fc = nn.Linear(74, 128)\n\n        # \u5b9a\u4e49vision_lstm, text_lstm \u548c audio_lstm\u548c\u878d\u5408\u5c42mm_lstm. \u8981\u6c42hidden_size=128, num_layers=1, dropout=0.1, batch_first=True\n        # TODO: self.vision_lstm\n        # TODO: self.text_lstm\n        # TODO: self.audio_lstm\n        # TODO: self.mm_lstm\n\n        # Define a fully connected layer for fusion\n        self.fc = nn.Linear(128, 1)\n\n    def forward(self, vision, text, audio):\n\n        # apply layernorm \n        # TODO\n        # TODO\n        # TODO\n\n        # Process each modality\n        vision = F.relu(self.vision_fc(vision))\n        text = F.relu(self.text_fc(text))\n        audio = F.relu(self.audio_fc(audio))\n\n        # LSTM for temporal processing\n        output_v, (vision_h, _) = self.vision_lstm(vision)\n        output_t, (text_h, _) = self.text_lstm(text)\n        output_a, (audio_h, _) = self.audio_lstm(audio)\n\n        # \u5bf9\u5355\u6a21\u6001\u7684LSTM\u8f93\u51fa\u8fdb\u884c\u76f4\u63a5\u76f8\u52a0\u5f97\u5230feature\n        # TODO: feature\n        _, (fusion_tensor, _) = self.mm_lstm(feature)\n\n        # Concatenate the final hidden states\n        output = self.fc(fusion_tensor[-1])\n\n        # Apply sigmoid to constrain output to (0, 1)\n        # TODO\n        # Scale and shift to range (-3, 3)\n        # TODO\n\n        return output\n</code></pre>"},{"location":"lab8/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/#_7","title":"\u8bc4\u4ef7\u6307\u6807","text":"<p>\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u591a\u79cd\u8bc4\u4ef7\u6307\u6807\u6765\u8bc4\u4f30\u591a\u6a21\u6001\u60c5\u611f\u5206\u6790\u6a21\u578b\u7684\u6027\u80fd\u3002\u8fd9\u4e9b\u6307\u6807\u5305\u62ec\u4e8c\u5206\u7c7b\u3001\u4e94\u5206\u7c7b\u3001\u4e03\u5206\u7c7b\u60c5\u611f\u5206\u6790\uff0c\u4ee5\u53ca\u60c5\u611f\u56de\u5f52\u7684\u5747\u65b9\u8bef\u5dee\uff08MAE\uff09\u548c\u76f8\u5173\u7cfb\u6570\uff08Correlation r\uff09\u3002</p> <p>\u6ce8\u610f\uff0c\u7531\u4e8e\u6a21\u578b\u7684\u9884\u6d4b\u503c\u662f\u8fde\u7eed\u7684\u5b9e\u6570\uff0c\u4e3a\u4e86\u4f7f\u7528\u591a\u5206\u7c7b\u4efb\u52a1\u7684\u8bc4\u4ef7\u65b9\u5f0f\uff0c\u9700\u8981\u5c06\u8fd9\u4e9b\u9884\u6d4b\u503c\u8f6c\u6362\u4e3a\u79bb\u6563\u7684\u7c7b\u522b\uff0c\u6211\u4eec\u9996\u5148\u4f7f\u7528<code>np.clip</code>\u51fd\u6570\u5c06\u9884\u6d4b\u503c\u9650\u5236\u5728\u7279\u5b9a\u8303\u56f4\u5185\u3002</p> <ul> <li> <p>\u5bf9\u4e8e\u4e03\u5206\u7c7b\u60c5\u611f\u5206\u6790\uff0c\u9884\u6d4b\u503c\u88ab\u9650\u5236\u5728[-3, 3]\u8303\u56f4\u5185\u3002</p> </li> <li> <p>\u5bf9\u4e8e\u4e94\u5206\u7c7b\u60c5\u611f\u5206\u6790\uff0c\u9884\u6d4b\u503c\u88ab\u9650\u5236\u5728[-2, 2]\u8303\u56f4\u5185\u3002</p> </li> </ul> <p>\u4ee5\u4e0b\u662f\u6bcf\u4e2a\u6307\u6807\u7684\u7b80\u5355\u4ecb\u7ecd\u548c\u8ba1\u7b97\u8fc7\u7a0b\uff1a</p>"},{"location":"lab8/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/#_8","title":"\u4e8c\u5206\u7c7b\u60c5\u611f\u5206\u6790","text":"<ul> <li>\u6307\u6807\uff1a\u51c6\u786e\u7387\uff08Accuracy\uff09\u548cF1\u5206\u6570\uff08F1 Score\uff09</li> <li> <p>\u8ba1\u7b97\u8fc7\u7a0b\uff1a</p> <ul> <li>\u4e8c\u5206\u7c7b\u60c5\u611f\u5206\u6790\u5c06\u60c5\u611f\u6807\u7b7e\u5206\u4e3a\u6b63\u9762\u548c\u8d1f\u9762\u4e24\u7c7b\u3002\u6211\u4eec\u6392\u9664\u60c5\u611f\u6807\u7b7e\u4e3a\u96f6\u7684\u6837\u672c\uff0c\u53ea\u8003\u8651\u975e\u96f6\u6837\u672c\u3002</li> <li>\u51c6\u786e\u7387\u8ba1\u7b97\u516c\u5f0f\uff1a</li> </ul> \\[ \\text{Accuracy} = \\frac{\\text{Number of Correct Predictions}}{\\text{Total Number of Predictions}} \\] <ul> <li>F1\u5206\u6570\u8ba1\u7b97\u516c\u5f0f\uff1a</li> </ul> \\[ \\text{F1 Score} = 2 \\times \\frac{\\text{Precision} \\times \\text{Recall}}{\\text{Precision} + \\text{Recall}} \\] <ul> <li>\u5728\u4ee3\u7801\u4e2d\uff0c<code>non_zeros_acc2</code>\u548c<code>non_zeros_f1_score</code>\u5206\u522b\u8868\u793a\u975e\u96f6\u6837\u672c\u7684\u51c6\u786e\u7387\u548cF1\u5206\u6570\u3002</li> </ul> </li> </ul>"},{"location":"lab8/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/#_9","title":"\u4e94\u5206\u7c7b\u60c5\u611f\u5206\u6790","text":"<ul> <li>\u6307\u6807\uff1a\u51c6\u786e\u7387\uff08Accuracy\uff09</li> <li>\u8ba1\u7b97\u8fc7\u7a0b\uff1a<ul> <li>\u4e94\u5206\u7c7b\u60c5\u611f\u5206\u6790\u5c06\u60c5\u611f\u6807\u7b7e\u5206\u4e3a\u4e94\u4e2a\u7b49\u7ea7\uff0c\u8303\u56f4\u4e3a[-2, 2]\u3002</li> <li>\u51c6\u786e\u7387\u8ba1\u7b97\u516c\u5f0f\u540c\u4e0a\u3002</li> <li>\u5728\u4ee3\u7801\u4e2d\uff0c<code>mult_a5</code>\u8868\u793a\u4e94\u5206\u7c7b\u7684\u51c6\u786e\u7387\u3002</li> </ul> </li> </ul>"},{"location":"lab8/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/#_10","title":"\u4e03\u5206\u7c7b\u60c5\u611f\u5206\u6790","text":"<ul> <li>\u6307\u6807\uff1a\u51c6\u786e\u7387\uff08Accuracy\uff09</li> <li>\u8ba1\u7b97\u8fc7\u7a0b\uff1a<ul> <li>\u4e03\u5206\u7c7b\u60c5\u611f\u5206\u6790\u5c06\u60c5\u611f\u6807\u7b7e\u5206\u4e3a\u4e03\u4e2a\u7b49\u7ea7\uff0c\u8303\u56f4\u4e3a[-3, 3]\u3002</li> <li>\u51c6\u786e\u7387\u8ba1\u7b97\u516c\u5f0f\u540c\u4e0a\u3002</li> <li>\u5728\u4ee3\u7801\u4e2d\uff0c<code>mult_a7</code>\u8868\u793a\u4e03\u5206\u7c7b\u7684\u51c6\u786e\u7387\u3002</li> </ul> </li> </ul>"},{"location":"lab8/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/#_11","title":"\u60c5\u611f\u56de\u5f52","text":"<ul> <li>\u6307\u6807\uff1a\u5747\u65b9\u8bef\u5dee\uff08Mean Absolute Error, MAE\uff09\u548c\u76f8\u5173\u7cfb\u6570\uff08Correlation r\uff09</li> <li> <p>\u8ba1\u7b97\u8fc7\u7a0b\uff1a</p> <ul> <li>\u5747\u65b9\u8bef\u5dee\u8ba1\u7b97\u516c\u5f0f\uff08\\(y_i\\) \u662f\u771f\u5b9e\u503c\uff0c\\(\\hat{y}_i\\) \u662f\u9884\u6d4b\u503c\uff09\uff1a</li> </ul> \\[ \\text{MAE} = \\frac{1}{n} \\sum_{i=1}^{n} |y_i - \\hat{y}_i| \\] <ul> <li>\u76f8\u5173\u7cfb\u6570\u8ba1\u7b97\u516c\u5f0f\uff08\\(\\bar{y}\\) \u548c \\(\\bar{\\hat{y}}\\) \u5206\u522b\u662f\u771f\u5b9e\u503c\u548c\u9884\u6d4b\u503c\u7684\u5747\u503c\uff09\uff1a</li> </ul> \\[ r = \\frac{\\sum (y_i - \\bar{y})(\\hat{y}_i - \\bar{\\hat{y}})}{\\sqrt{\\sum (y_i - \\bar{y})^2 \\sum (\\hat{y}_i - \\bar{\\hat{y}})^2}} \\] <ul> <li>\u5728\u4ee3\u7801\u4e2d\uff0c<code>mae</code>\u548c<code>corr</code>\u5206\u522b\u8868\u793a\u5747\u65b9\u8bef\u5dee\u548c\u76f8\u5173\u7cfb\u6570\u3002</li> </ul> </li> </ul> <p>\u8fd9\u4e9b\u6307\u6807\u63d0\u4f9b\u4e86\u4e0d\u540c\u7684\u89c6\u89d2\u6765\u8bc4\u4f30\u6a21\u578b\u7684\u6027\u80fd\uff0c\u5305\u62ec\u5206\u7c7b\u51c6\u786e\u6027\u548c\u56de\u5f52\u7cbe\u5ea6\u3002\u901a\u8fc7\u7efc\u5408\u4f7f\u7528\u8fd9\u4e9b\u6307\u6807\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u5168\u9762\u5730\u7406\u89e3\u6a21\u578b\u5728\u591a\u6a21\u6001\u60c5\u611f\u5206\u6790\u4efb\u52a1\u4e2d\u7684\u8868\u73b0\u3002</p> <pre><code>def eval_mosi_regression(y_pred, y_true, exclude_zero=False):\n    test_preds = y_pred.view(-1).cpu().detach().numpy()\n    test_truth = y_true.view(-1).cpu().detach().numpy()\n\n    test_preds_a7 = np.clip(test_preds, a_min=-3., a_max=3.)\n    test_truth_a7 = np.clip(test_truth, a_min=-3., a_max=3.)\n    test_preds_a5 = np.clip(test_preds, a_min=-2., a_max=2.)\n    test_truth_a5 = np.clip(test_truth, a_min=-2., a_max=2.)\n\n    mae = np.mean(np.absolute(test_preds - test_truth))\n    corr = np.corrcoef(test_preds, test_truth)[0][1]\n    mult_a7 = multiclass_acc(test_preds_a7, test_truth_a7)\n    mult_a5 = multiclass_acc(test_preds_a5, test_truth_a5)\n\n    non_zeros = np.array([i for i, e in enumerate(test_truth) if e != 0])\n    non_zeros_binary_truth = (test_truth[non_zeros] &gt; 0)\n    non_zeros_binary_preds = (test_preds[non_zeros] &gt; 0)\n\n    non_zeros_acc2 = accuracy_score(non_zeros_binary_preds, non_zeros_binary_truth)\n    non_zeros_f1_score = f1_score(non_zeros_binary_preds, non_zeros_binary_truth, average='weighted')\n\n    eval_results = {\n        \"Non0_acc_2\":  round(non_zeros_acc2, 4),\n        \"Non0_F1_score\": round(non_zeros_f1_score, 4),\n        \"Mult_acc_5\": round(mult_a5, 4),\n        \"Mult_acc_7\": round(mult_a7, 4),\n        \"MAE\": round(mae, 4),\n        \"Corr\": round(corr, 4)\n    }\n    return eval_results\n\ndef multiclass_acc(y_pred, y_true):\n    y_pred = np.round(y_pred)\n    y_true = np.round(y_true)\n\n    # Compute the accuracy\n    # TODO: \u6ce8\u610f\uff0c\u8fd9\u91cc\u7edf\u8ba1\u7684\u662f\u603b\u7684\u5206\u7c7b\u51c6\u786e\u7387\uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u4e2a\u7c7b\u522b\u4e0a\u7684\u51c6\u786e\u7387\u3002\n\n    return acc\n</code></pre>"},{"location":"lab8/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/#_12","title":"\u6a21\u578b\u8bad\u7ec3","text":"<p>\u5728\u6a21\u578b\u7684\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u6bcf\u8bad\u7ec3\u5b8c\u6210\u4e00\u4e2aepoch\uff0c\u5c31\u5728\u9a8c\u8bc1\u96c6\u4e0a\u8fdb\u884c\u4e00\u6b21\u6a21\u578b\u8bc4\u4f30\u3002\u6211\u4eec\u9009\u62e9\u7ed3\u679c\u6700\u597d\u7684\u90a3\u4e2aepoch\u7684\u6a21\u578b\u4f5c\u4e3a\u6700\u4f18\u6a21\u578b\u5e76\u4fdd\u5b58\u3002</p> <p>\u6ce8\u610f\uff0c\u4fdd\u6301\u5b66\u672f\u4e25\u8c28\u6027\uff0c\u4e0d\u8981\u4f7f\u7528\u6d4b\u8bd5\u96c6\u6311\u9009\u8d85\u53c2\u6216\u8005\u6700\u4f18\u6a21\u578b\u3002</p> <pre><code>def train_model(model, train_loader, valid_loader, criterion, optimizer, scheduler, device, epochs):\n    model.to(device)\n\n    best_corr = 0.\n    best_epoch = 0\n\n    for epoch in range(epochs):\n        model.train()\n        running_loss = 0.0\n\n        for i, (vision, text, audio, labels) in enumerate(train_loader):\n            vision, text, audio, labels = vision.to(device), text.to(device), audio.to(device), labels.to(device)\n\n            optimizer.zero_grad()\n\n            # \u6a21\u578b\u524d\u5411\u83b7\u5f97\u8f93\u51fa\uff1a\n            # TODO\n            # \u8ba1\u7b97\u635f\u5931\uff1a\n            # TODO\n            # \u53cd\u5411\u4f20\u64ad\uff0c\u8ba1\u7b97\u68af\u5ea6\n            # TODO\n\n            optimizer.step()\n            scheduler.step()\n\n            running_loss += loss.item()\n\n        print(f'Epoch [{epoch+1}/{epochs}], Loss: {running_loss/len(train_loader):.4f}')\n\n        val_corr = validate_model(model, valid_loader, criterion, device)\n\n        if val_corr &gt; best_corr:\n            best_corr = val_corr\n            best_epoch = epoch\n            torch.save(model.state_dict(), 'best_model.pth')\n\n    print(f\"Best model saved with val_corr {best_corr} at epoch {best_epoch}.\")\n</code></pre>"},{"location":"lab8/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/#_13","title":"\u6a21\u578b\u9a8c\u8bc1","text":"<pre><code>def validate_model(model, valid_loader, criterion, device):\n    model.eval()\n    valid_loss = 0.0\n\n    all_preds = []\n    all_labels = []\n\n    with torch.no_grad():\n        for vision, text, audio, labels in valid_loader:\n            vision, text, audio, labels = vision.to(device), text.to(device), audio.to(device), labels.to(device)\n\n            outputs = model(vision, text, audio)\n            loss = criterion(outputs.squeeze(), labels.squeeze())\n\n            valid_loss += loss.item()\n\n            all_preds.append(outputs)\n            all_labels.append(labels)\n\n    print(f'Validation Loss: {valid_loss/len(valid_loader):.4f}')\n\n    all_preds = torch.cat(all_preds, dim=0)\n    all_labels = torch.cat(all_labels, dim=0)\n\n    # \u8ba1\u7b97\u8bc4\u4ef7\u6307\u6807\n    # TODO\n    print(eval_results)\n\n    return eval_results[\"Corr\"]\n</code></pre>"},{"location":"lab8/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/#_14","title":"\u4e3b\u51fd\u6570","text":"<pre><code>def main():\n\n    # \u56fa\u5b9a\u968f\u673a\u6570\u79cd\u5b50\uff0c\u786e\u4fdd\u5b9e\u9a8c\u7ed3\u679c\u53ef\u91cd\u590d\u6027\n    seed = 42\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    if torch.cuda.is_available():\n        torch.cuda.manual_seed(seed)\n        torch.cuda.manual_seed_all(seed)\n\n    device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n    print(device)\n\n    # \u5b9a\u4e49\u635f\u5931\u51fd\u6570criterion, \u4f7f\u7528\u5747\u65b9\u8bef\u5dee\u635f\u5931\u3002\u53ef\u4ee5\u4f7f\u7528pytorch\u5c01\u88c5\u597d\u7684\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u6839\u636e\u516c\u5f0f\u624b\u5199\uff1a\n    # TODO\n\n    learning_rate = 1e-3\n    epochs = 20\n\n    # Initialize the model.\n    # TODO\n\n    data_path = './mosi_raw.pkl'\n    # \u521d\u59cb\u5316\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u7684\u6570\u636e\u96c6\u7c7b\n    # TODO: train_dataset\n    # TODO: valid_dataset\n    # \u521d\u59cb\u5316\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u7684\u52a0\u8f7d\u5668\uff0c\u8981\u6c42batch_size=16\n    # TODO: train_loader\uff0c\u53c2\u6570shuffle=True\n    # TODO: valid_loader\uff0c\u53c2\u6570shuffle=False\n\n    # Initialize the optimizer and scheduler.\n    # TODO: \u4f7f\u7528Adam\u4f18\u5316\u5668\n    scheduler = CosineAnnealingLR(optimizer, T_max=epochs*len(train_loader))\n\n    # \u8c03\u7528\u8bad\u7ec3\u51fd\u6570\uff0c\u6ce8\u610f\u4f20\u5165\u5bf9\u5e94\u53c2\u6570\uff1a\n    # TODO\n\n    # \u52a0\u8f7d\u6700\u4f73epoch\u53c2\u6570\n    best_model_state = torch.load('best_model.pth')\n    model.load_state_dict(best_model_state)\n\n    # \u521d\u59cb\u5316\u6d4b\u8bd5\u96c6\u7684\u6570\u636e\u96c6\u7c7b\u548c\u52a0\u8f7d\u5668\n    # TODO: test_dataset\n    # TODO: test_loader\n\n    print(\"\\n========== test results: ==========\\n\")\n    validate_model(model, test_loader, criterion, device)\n</code></pre>"},{"location":"lab8/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/#_15","title":"\u7a0b\u5e8f\u6267\u884c","text":"<pre><code>if __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u6ce8\u610f</p> <ol> <li> <p>\u5982\u679c\u6a21\u578b\u548c\u8bc4\u4ef7\u6307\u6807\u4ee3\u7801\u5168\u90e8\u8865\u5145\u6b63\u786e\uff0c\u6700\u7ec8\u7ed3\u679c\u5e94\u63a5\u8fd1\uff1a{'Non0_acc_2': 0.7241, 'Non0_F1_score': 0.7252, 'Mult_acc_5': 0.3469, 'Mult_acc_7': 0.3047, 'MAE': 1.0878, 'Corr': 0.547}</p> </li> <li> <p>\u8bf7\u4e0d\u8981\u5c06\u6d4b\u8bd5\u96c6\u5408\u7528\u4e8e\u8d85\u53c2\u9009\u62e9\u6216\u8005\u6700\u4f73\u8bad\u7ec3epoch\u7684\u6311\u9009\uff0c\u56e0\u4e3a\u6d4b\u8bd5\u96c6\u7684\u4e3b\u8981\u76ee\u7684\u662f\u7528\u4e8e\u8bc4\u4f30\u6a21\u578b\u5728\u672a\u89c1\u6570\u636e\u4e0a\u7684\u6cdb\u5316\u80fd\u529b\u3002\u5982\u679c\u5728\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u6d4b\u8bd5\u96c6\u6765\u8fdb\u884c\u8d85\u53c2\u6570\u9009\u62e9\u6216\u9009\u62e9\u6700\u4f73\u8bad\u7ec3epoch\uff0c\u5c31\u4f1a\u5bfc\u81f4\u4fe1\u606f\u6cc4\u6f0f\uff0c\u4f7f\u5f97\u6a21\u578b\u5728\u6d4b\u8bd5\u96c6\u4e0a\u7684\u6027\u80fd\u8bc4\u4f30\u4e0d\u518d\u5ba2\u89c2\u548c\u51c6\u786e\u3002\u8fd9\u79cd\u505a\u6cd5\u53ef\u80fd\u5bfc\u81f4\u6a21\u578b\u8fc7\u62df\u5408\u4e8e\u6d4b\u8bd5\u96c6\uff0c\u4ece\u800c\u65e0\u6cd5\u771f\u5b9e\u53cd\u6620\u6a21\u578b\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u7684\u8868\u73b0\u3002\u56e0\u6b64\uff0c\u901a\u5e38\u5e94\u8be5\u5c06\u6570\u636e\u96c6\u5206\u4e3a\u8bad\u7ec3\u96c6\u3001\u9a8c\u8bc1\u96c6\u548c\u6d4b\u8bd5\u96c6\uff0c\u4f7f\u7528\u9a8c\u8bc1\u96c6\u8fdb\u884c\u8d85\u53c2\u6570\u8c03\u4f18\u548c\u6a21\u578b\u9009\u62e9\uff0c\u800c\u5c06\u6d4b\u8bd5\u96c6\u4fdd\u7559\u7528\u4e8e\u6700\u7ec8\u8bc4\u4f30\u3002</p> </li> </ol> <p>\u601d\u8003\u9898</p> <ol> <li> <p>\u5728\u4e0a\u8ff0\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\uff0c\u4f7f\u7528tensorboard\u8bb0\u5f55\u8bad\u7ec3\u8fc7\u7a0b\u5728\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u4e0a\u7684\u635f\u5931\u53d8\u5316\u66f2\u7ebf\uff0c\u5206\u6790\u635f\u5931\u53d8\u5316\u8d8b\u52bf\u4e0d\u540c\u7684\u539f\u56e0\u3002\u4f7f\u7528tensorboard\u8f93\u51fa\u6a21\u578b\u7ed3\u6784\u56fe\u3002</p> </li> <li> <p>\u6d88\u878d\u5b9e\u9a8c\u5206\u6790\uff1a</p> <p>2.1 \u5728\u539f\u6a21\u578b\u7684\u57fa\u7840\u4e0a\uff0c\u4f7f\u7528Transformer encoder\u66ff\u6362\u4e0a\u8ff0\u6a21\u578b\u4e2d\u7684LSTM\uff0c\u8bb0\u5f55\u5e76\u5206\u6790\u5b9e\u9a8c\u7ed3\u679c\u3002\u53ef\u4ee5\u4f7f\u7528pytorch\u5c01\u88c5\u597d\u7684\u6a21\u578b\uff0c\u4e5f\u53ef\u4ee5\u81ea\u5df1\u624b\u5199Transformer\u3002\u7531\u4e8e\u5904\u7406\u7684\u5bf9\u8c61\u662f\u65f6\u5e8f\u6570\u636e\uff0c\u56e0\u6b64\u4e0d\u8981\u5fd8\u8bb0\u4f7f\u7528\u4f4d\u7f6e\u7f16\u7801\uff08position encoding\uff09\u3002</p> <p>2.2 \u6a21\u578b\u4e2d\u4f7f\u7528Layernorm\u7684\u76ee\u7684\u662f\u4ec0\u4e48\uff1f\u5bf9\u6bd4\u539f\u6a21\u578b\u548c\u79fb\u9664Layernorm\u5c42\u4ee5\u540e\u7684\u5b9e\u9a8c\u7ed3\u679c\u5dee\u5f02\u3002</p> <p>2.3 \u5728\u539f\u6a21\u578b\u7684\u57fa\u7840\u4e0a\u79fb\u9664\u5bf9\u5e94\u6a21\u5757\uff0c\u5bf9\u6bd4\u53ea\u4f7f\u7528text\u8f93\u5165\uff0c\u53ea\u4f7f\u7528vision\u8f93\u5165\uff0c\u53ea\u4f7f\u7528audio\u8f93\u5165\uff0c\u548c\u4f7f\u7528text+vision\u8f93\u5165\uff0c\u4f7f\u7528text+audio\u8f93\u5165\u548c\u4f7f\u7528\u5168\u90e8\u6a21\u6001\u8f93\u5165\u7684\u5b9e\u9a8c\u7ed3\u679c\u5dee\u522b\uff0c\u5e76\u5206\u6790\u5b9e\u9a8c\u7ed3\u679c\u3002</p> <p>2.4 \u5728\u539f\u6a21\u578b\u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u635f\u5931\u51fd\u6570\u4ece\u5747\u65b9\u8bef\u5dee\u635f\u5931\uff08Mean Square Error\uff09\u66ff\u6362\u6210\u7edd\u5bf9\u8bef\u5dee\u635f\u5931\uff08Mean Absolute Error\uff0c MAE\uff09\u548c\u5e73\u6ed1L1\u635f\u5931\uff08Huber Loss\uff09\uff0c\u5bf9\u6bd4\u5b9e\u9a8c\u7ed3\u679c\u5dee\u5f02\u3002</p> <p>2.5 \u5728\u539f\u6a21\u578b\u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u7279\u5f81\u878d\u5408\u65b9\u5f0f\u4ece[\u7b80\u5355\u76f8\u52a0+LSTM]\u66ff\u6362\u6210\u57fa\u4e8e\u6ce8\u610f\u529b\u673a\u5236\uff08\u53c2\u8003\u5b9e\u9a8c\u4e94\uff09\u7684\u878d\u5408\u65b9\u5f0f\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5bf9\u4e8e\u4e0d\u540c\u6a21\u6001\u7684\u7279\u5f81\u76f8\u52a0\u6216\u62fc\u63a5\u548c\u8fdb\u884cself-attention, \u6216\u8005\u5728\u4e0d\u540c\u6a21\u6001\u4e4b\u95f4\u8fdb\u884ccross-attention\u3002\u5728\u5b9e\u9a8c\u62a5\u544a\u4e2d\u63cf\u8ff0\u4f60\u7684\u65b9\u6848\u5e76\u8bb0\u5f55\u5b9e\u9a8c\u7ed3\u679c\u3002</p> </li> <li> <p>\u7ed3\u5408\u4e0a\u8ff0\u5206\u6790\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u76f8\u6bd4\u4e8e\u539f\u6a21\u578b\u8868\u73b0\u66f4\u597d\u7684\u591a\u6a21\u6001\u60c5\u611f\u5206\u6790\u6a21\u578b\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u66ff\u6362\u5355\u6a21\u6001\u7f16\u7801\u6a21\u578b\u3001\u635f\u5931\u51fd\u6570\u3001\u591a\u6a21\u6001\u878d\u5408\u65b9\u5f0f\uff0c\u6216\u8005\u7efc\u5408\u51e0\u79cd\u65b9\u6cd5\u6765\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\u8868\u73b0\u3002\u5728\u62a5\u544a\u4e2d\u7ed3\u5408\u56fe\u793a\u6216\u8005\u516c\u5f0f\u8be6\u7ec6\u63cf\u8ff0\u4f60\u7684\u6a21\u578b\u8bbe\u8ba1\uff0c\u6307\u51fa\u4f60\u7684\u6a21\u578b\u76f8\u6bd4\u539f\u6a21\u578b\u7684\u6539\u8fdb\u4e4b\u5904\uff0c\u5e76\u548c\u539f\u6a21\u578b\u8fdb\u884c\u5b9e\u9a8c\u7ed3\u679c\u5bf9\u6bd4\u3002\u8bf7\u5c06\u6a21\u578b\u4ee3\u7801\u5305\u542b\u5728EXP_MSA.ipynb\u6587\u4ef6\u6216\u8005\u63d0\u4ea4\u65b0\u7684ipynb\u6587\u4ef6\u3002</p> </li> </ol> <p>\u4ec0\u4e48\u662f\u6d88\u878d\u5b9e\u9a8c\uff1f</p> <p>\u6d88\u878d\u5b9e\u9a8c\uff08Ablation Study\uff09\u662f\u4e00\u79cd\u5728\u673a\u5668\u5b66\u4e60\u548c\u6df1\u5ea6\u5b66\u4e60\u9886\u57df\u4e2d\u5e38\u7528\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u8bc4\u4f30\u6a21\u578b\u4e2d\u5404\u4e2a\u7ec4\u4ef6\u6216\u7279\u5f81\u5bf9\u6574\u4f53\u6027\u80fd\u7684\u5f71\u54cd\u3002\u901a\u8fc7\u7cfb\u7edf\u5730\u79fb\u9664\u6216\u4fee\u6539\u6a21\u578b\u7684\u67d0\u4e9b\u90e8\u5206\uff0c\u7814\u7a76\u4eba\u5458\u53ef\u4ee5\u4e86\u89e3\u8fd9\u4e9b\u90e8\u5206\u5728\u6a21\u578b\u4e2d\u7684\u91cd\u8981\u6027\u548c\u8d21\u732e\u3002</p> <p>\u5728\u6d88\u878d\u5b9e\u9a8c\u4e2d\uff0c\u901a\u5e38\u4f1a\u8fdb\u884c\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p> <ol> <li> <p>\u9009\u62e9\u7ec4\u4ef6\uff1a\u786e\u5b9a\u6a21\u578b\u4e2d\u9700\u8981\u8bc4\u4f30\u7684\u7ec4\u4ef6\u6216\u7279\u5f81\u3002\u8fd9\u53ef\u80fd\u662f\u67d0\u4e2a\u7279\u5b9a\u7684\u5c42\u3001\u6a21\u5757\u3001\u7279\u5f81\u96c6\u6216\u8d85\u53c2\u6570\u3002</p> </li> <li> <p>\u79fb\u9664\u6216\u4fee\u6539\uff1a\u6709\u8ba1\u5212\u5730\u79fb\u9664\u6216\u4fee\u6539\u8fd9\u4e9b\u7ec4\u4ef6\u3002\u53ef\u4ee5\u662f\u5b8c\u5168\u5220\u9664\u67d0\u4e2a\u6a21\u5757\uff0c\u6216\u8005\u662f\u6539\u53d8\u67d0\u4e2a\u53c2\u6570\u7684\u503c\u3002</p> </li> <li> <p>\u8bc4\u4f30\u6027\u80fd\uff1a\u5728\u4fee\u6539\u540e\u7684\u6a21\u578b\u4e0a\u8fdb\u884c\u5b9e\u9a8c\uff0c\u8bc4\u4f30\u5176\u6027\u80fd\u53d8\u5316\u3002\u901a\u5e38\u4f7f\u7528\u4e0e\u539f\u59cb\u6a21\u578b\u76f8\u540c\u7684\u8bc4\u4f30\u6307\u6807\u3002</p> </li> <li> <p>\u5206\u6790\u7ed3\u679c\uff1a\u901a\u8fc7\u6bd4\u8f83\u539f\u59cb\u6a21\u578b\u548c\u4fee\u6539\u540e\u6a21\u578b\u7684\u6027\u80fd\uff0c\u5206\u6790\u6bcf\u4e2a\u7ec4\u4ef6\u5bf9\u6a21\u578b\u6574\u4f53\u6027\u80fd\u7684\u5f71\u54cd\u3002</p> </li> </ol> <p>\u6d88\u878d\u5b9e\u9a8c\u7684\u7ed3\u679c\u53ef\u4ee5\u5e2e\u52a9\u7814\u7a76\u4eba\u5458\uff1a</p> <ul> <li>\u786e\u5b9a\u54ea\u4e9b\u7ec4\u4ef6\u5bf9\u6a21\u578b\u6027\u80fd\u81f3\u5173\u91cd\u8981\u3002</li> <li>\u8bc6\u522b\u53ef\u80fd\u7684\u6a21\u578b\u6539\u8fdb\u65b9\u5411\u3002</li> <li>\u7406\u89e3\u6a21\u578b\u7684\u5185\u90e8\u5de5\u4f5c\u673a\u5236\u3002</li> <li>\u7b80\u5316\u6a21\u578b\uff0c\u53bb\u9664\u4e0d\u5fc5\u8981\u7684\u590d\u6742\u6027\u3002</li> </ul> <p>\u8fd9\u79cd\u65b9\u6cd5\u5728\u8bba\u6587\u548c\u7814\u7a76\u4e2d\u975e\u5e38\u5e38\u89c1\uff0c\u56e0\u4e3a\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u7cfb\u7edf\u5316\u7684\u65b9\u6cd5\u6765\u7406\u89e3\u590d\u6742\u6a21\u578b\u7684\u884c\u4e3a\u3002</p>"},{"location":"lab8/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/#_16","title":"\u53c2\u8003\u6587\u732e","text":"<p>Zadeh et al., Tensor Fusion Network for Multimodal Sentiment Analysis</p> <p>Hazarika et al., MISA: Modality-Invariant and -Specific Representations for Multimodal Sentiment Analysis</p> <p>Ge et al., Learning Robust Multi-Modal Representation for Multi-Label Emotion Recognition via Adversarial Masking and Perturbation</p>"},{"location":"lab8/%E5%AE%9E%E9%AA%8C%E5%85%AB%E4%BB%8B%E7%BB%8D/","title":"\u5b9e\u9a8c\uff1a\u591a\u6a21\u6001\u60c5\u611f\u5206\u6790\uff08Multimodal Sentiment Analysis\uff09","text":""},{"location":"lab8/%E5%AE%9E%E9%AA%8C%E5%85%AB%E4%BB%8B%E7%BB%8D/#_1","title":"\u5f00\u59cb\u4e4b\u524d","text":"<p>\u6211\u4eec\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\u4f7f\u7528jupyter Notebook\u8fdb\u884c\u5b9e\u9a8c\uff0c \u8bf7\u53c2\u8003Jupyter Notebook\u4f7f\u7528\uff0c \u6309\u7167\u6587\u6863\u4e2d\u8be6\u7ec6\u6b65\u9aa4\u8fdb\u884c\u64cd\u4f5c\uff0c\u5b8c\u6210Jupyter Notebook\u7684\u914d\u7f6e\u3002</p>"},{"location":"lab8/%E5%AE%9E%E9%AA%8C%E5%85%AB%E4%BB%8B%E7%BB%8D/#_2","title":"\u5b9e\u9a8c\u4efb\u52a1","text":"<p>\u672c\u6b21\u5b9e\u9a8c\u5305\u62ec\u4e24\u4e2a\u4efb\u52a1\uff1a</p> <ol> <li> <p>\u6839\u636e\u8981\u6c42\u8865\u5145\u5b8c\u6574\u6570\u636e\u96c6\u52a0\u8f7d\u3001\u6a21\u578b\u642d\u5efa\u3001\u8bc4\u4ef7\u6307\u6807\u3001\u6a21\u578b\u8bad\u7ec3\u548c\u6d4b\u8bd5\u4ee3\u7801\u3002</p> </li> <li> <p>\u5728\u4efb\u52a11\u7684\u57fa\u7840\u4e0a\uff0c\u5b8c\u6210\u5b9e\u9a8c\u7ed3\u679c\u5bf9\u6bd4\u5206\u6790\u3001\u6d88\u878d\u5b9e\u9a8c\u548c\u65b0\u6a21\u578b\u8bbe\u8ba1\u3002</p> </li> </ol>"},{"location":"lab8/%E5%AE%9E%E9%AA%8C%E5%85%AB%E4%BB%8B%E7%BB%8D/#_3","title":"\u4efb\u52a1\u6587\u6863\uff1a\u591a\u6a21\u6001\u60c5\u611f\u5206\u6790","text":""},{"location":"lab8/%E5%AE%9E%E9%AA%8C%E5%85%AB%E4%BB%8B%E7%BB%8D/#exp_msaipynb","title":"\u4efb\u52a1\u4ee3\u7801\uff1aEXP_MSA.ipynb","text":""},{"location":"lab8/%E5%AE%9E%E9%AA%8C%E5%85%AB%E4%BB%8B%E7%BB%8D/#_4","title":"\u4efb\u52a1\u63cf\u8ff0","text":"<p>\u672c\u5b9e\u9a8c\u7684\u4efb\u52a1\u662f\u5b9e\u73b0\u4e00\u4e2a\u591a\u6a21\u6001\u60c5\u611f\u5206\u6790\u6a21\u578b\uff0c\u8be5\u6a21\u578b\u80fd\u591f\u878d\u5408\u89c6\u89c9\u3001\u6587\u672c\u548c\u97f3\u9891\u4fe1\u606f\uff0c\u4ee5\u9884\u6d4b\u89c6\u9891\u7247\u6bb5\u7684\u60c5\u611f\u5f3a\u5ea6\u3002 </p> <p>\u5177\u4f53\u4efb\u52a1\u5305\u62ec\uff1a</p> <ol> <li>\u6570\u636e\u9884\u5904\u7406\uff1a\u52a0\u8f7d\u548c\u5904\u7406CMU-MOSI\u6570\u636e\u96c6\uff0c\u786e\u4fdd\u6570\u636e\u7684\u5b8c\u6574\u6027\u548c\u4e00\u81f4\u6027\u3002</li> <li>\u6a21\u578b\u8bbe\u8ba1\uff1a\u8bbe\u8ba1\u4e00\u4e2a\u591a\u6a21\u6001\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\uff0c\u5305\u62ec\u5404\u6a21\u6001\u7684\u7279\u5f81\u63d0\u53d6\u548c\u878d\u5408\u673a\u5236\u3002</li> <li>\u6a21\u578b\u8bad\u7ec3\uff1a\u4f7f\u7528\u8bad\u7ec3\u6570\u636e\u96c6\u8bad\u7ec3\u6a21\u578b\uff0c\u5e76\u5728\u9a8c\u8bc1\u96c6\u4e0a\u8fdb\u884c\u8bc4\u4f30\uff0c\u4ee5\u9009\u62e9\u6700\u4f73\u6a21\u578b\u3002</li> <li>\u6a21\u578b\u8bc4\u4f30\uff1a\u5728\u6d4b\u8bd5\u96c6\u4e0a\u8bc4\u4f30\u6a21\u578b\u6027\u80fd\uff0c\u4f7f\u7528\u591a\u79cd\u6307\u6807\uff08\u5982MAE\u3001\u76f8\u5173\u7cfb\u6570\u7b49\uff09\u8fdb\u884c\u8bc4\u4f30\u3002</li> <li>\u7ed3\u679c\u5206\u6790\uff1a\u5206\u6790\u6a21\u578b\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u8ba8\u8bba\u6a21\u578b\u8bbe\u8ba1\u548c\u591a\u6a21\u6001\u878d\u5408\u5bf9\u60c5\u611f\u5206\u6790\u6027\u80fd\u7684\u5f71\u54cd\u3002</li> </ol>"},{"location":"lab8/%E5%AE%9E%E9%AA%8C%E5%85%AB%E4%BB%8B%E7%BB%8D/#_5","title":"\u5b9e\u9a8c\u63d0\u4ea4","text":"<p>\u5b9e\u9a8c\u5b8c\u6210\u540e\uff0c\u8bf7\u63d0\u4ea4\u4ee5\u4e0b\u6750\u6599\uff1a</p> <ol> <li>\u8fd0\u884c\u6210\u529f\u7684Jupyter Notebook\u6587\u4ef6</li> <li>\u4e00\u4efdPDF\u62a5\u544a\uff0c\u62a5\u544a\u5185\u5bb9\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a<ol> <li>\u4efb\u52a1\u4e2d\u7684\u586b\u5145\u4ee3\u7801\u548c\u76f8\u5e94\u5b9e\u9a8c\u7ed3\u679c</li> <li>\u5b9e\u9a8c\u516b\u601d\u8003\u9898\u7b54\u6848</li> <li>\u5b9e\u9a8c\u5fc3\u5f97\u4e0e\u4f53\u4f1a</li> </ol> </li> </ol>"},{"location":"lab8/%E5%AE%9E%E9%AA%8C%E5%85%AB%E4%BB%8B%E7%BB%8D/#_6","title":"\u63d0\u4ea4\u8bf4\u660e","text":"<ol> <li>\u672c\u6b21\u63d0\u4ea4\u7684\u5185\u5bb9\u4e3a: \u5b9e\u9a8c\u516b\u8981\u6c42\u63d0\u4ea4\u7684\u5185\u5bb9\uff0c\u5177\u4f53\u8981\u6c42\u8bf7\u53c2\u89c1\u5b9e\u9a8c\u7f51\u7ad9\uff08https://zhiweinju.github.io/nju-dl-lab-2025spring/\uff09</li> <li>\u63d0\u4ea4\u7684\u62a5\u544a\u6587\u4ef6\u8bf7\u4ee5PDF\u6587\u4ef6\u683c\u5f0f\u4e0a\u4f20\u5230selearning\u7f51\u7ad9\uff0c\u4e0a\u4f20\u6587\u4ef6\u7684\u6587\u4ef6\u547d\u540d\u683c\u5f0f\u4e3a: \u5b66\u53f7_\u59d3\u540d_\u5b9e\u9a8c\u516b.pdf\uff0c\u6bd4\u5982\uff1a123456789_\u5f20\u4e09_\u5b9e\u9a8c\u516b.pdf</li> <li>\u5176\u4ed6\u63d0\u4ea4\u6587\u4ef6\uff08\u5982 \u8fd0\u884c\u6210\u529f\u7684Jupyter Notebook\u6587\u4ef6\uff09\uff0c\u8bf7\u52a0\u4e0a\u524d\u7f00: \u5b66\u53f7_\u59d3\u540d_lab8_\uff0c\u6bd4\u5982: 123456789_\u5f20\u4e09_lab8_MSA.ipynb</li> <li>\u672c\u6b21\u63d0\u4ea4\u7684\u622a\u6b62\u65f6\u95f4\u4e3a 4\u670825\u65e523:59:59</li> <li>\u5bf9\u4e8e\u8fdf\u4ea4\u7684\u5904\u7406: \u8fdf\u4ea4\u4e00\u5468\u4ee5\u5185\uff0c\u6298\u6263\u7cfb\u6570\u4e3a0.8\uff0c\u8fdf\u4ea4\u8d85\u8fc7\u4e00\u5468\uff0c\u6298\u6263\u7cfb\u6570\u4e3a0.6\uff0c\u8d85\u8fc7\u4e00\u4e2a\u6708\u505c\u6b62\u63a5\u6536\u63d0\u4ea4\uff0c\u5c1a\u672a\u63d0\u4ea4\u8005\u672c\u6b21\u4f5c\u4e1a\u8ba10\u5206</li> </ol>"},{"location":"lab9/%E5%AE%9E%E9%AA%8C%E4%B9%9D%E4%BB%8B%E7%BB%8D/","title":"\u5b9e\u9a8c\u4e5d\uff1a\u56fe\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08GCN\uff09","text":""},{"location":"lab9/%E5%AE%9E%E9%AA%8C%E4%B9%9D%E4%BB%8B%E7%BB%8D/#_1","title":"\u5f00\u59cb\u4e4b\u524d","text":"<p>\u6211\u4eec\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\u4f7f\u7528jupyter Notebook\u8fdb\u884c\u5b9e\u9a8c\uff0c \u8bf7\u53c2\u8003Jupyter Notebook\u4f7f\u7528\uff0c \u6309\u7167\u6587\u6863\u4e2d\u8be6\u7ec6\u6b65\u9aa4\u8fdb\u884c\u64cd\u4f5c\uff0c\u5b8c\u6210Jupyter Notebook\u7684\u914d\u7f6e\u3002</p>"},{"location":"lab9/%E5%AE%9E%E9%AA%8C%E4%B9%9D%E4%BB%8B%E7%BB%8D/#gnn","title":"GNN\u5b66\u4e60","text":"<p>\u53c2\u8003 cs224w </p>"},{"location":"lab9/%E5%AE%9E%E9%AA%8C%E4%B9%9D%E4%BB%8B%E7%BB%8D/#_2","title":"\u5b9e\u9a8c\u4efb\u52a1","text":""},{"location":"lab9/%E5%AE%9E%E9%AA%8C%E4%B9%9D%E4%BB%8B%E7%BB%8D/#gcnipynb","title":"\u8be6\u89c1\uff1aGCN.ipynb","text":""},{"location":"lab9/%E5%AE%9E%E9%AA%8C%E4%B9%9D%E4%BB%8B%E7%BB%8D/#_3","title":"\u5b9e\u9a8c\u63d0\u4ea4","text":"<p>\u5b9e\u9a8c\u5b8c\u6210\u540e\uff0c\u8bf7\u63d0\u4ea4\u4ee5\u4e0b\u6750\u6599\uff1a</p> <ol> <li>\u8fd0\u884c\u6210\u529f\u7684Jupyter Notebook\u6587\u4ef6</li> <li>\u4e00\u4efdPDF\u62a5\u544a\uff0c\u62a5\u544a\u5185\u5bb9\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a<ol> <li>\u4efb\u52a1\u4e2d\u7684\u586b\u5145\u4ee3\u7801\u548c\u76f8\u5e94\u5b9e\u9a8c\u7ed3\u679c</li> <li>\u5b9e\u9a8c\u5fc3\u5f97\u4e0e\u4f53\u4f1a</li> </ol> </li> </ol>"},{"location":"lab9/%E5%AE%9E%E9%AA%8C%E4%B9%9D%E4%BB%8B%E7%BB%8D/#_4","title":"\u63d0\u4ea4\u8bf4\u660e","text":"<ol> <li>\u672c\u6b21\u63d0\u4ea4\u7684\u5185\u5bb9\u4e3a: \u5b9e\u9a8c\u4e5d\u8981\u6c42\u63d0\u4ea4\u7684\u5185\u5bb9\uff0c\u5177\u4f53\u8981\u6c42\u8bf7\u53c2\u89c1\u5b9e\u9a8c\u7f51\u7ad9\uff08https://zhiweinju.github.io/nju-dl-lab-2025spring/\uff09</li> <li>\u63d0\u4ea4\u7684\u62a5\u544a\u6587\u4ef6\u8bf7\u4ee5PDF\u6587\u4ef6\u683c\u5f0f\u4e0a\u4f20\u5230selearning\u7f51\u7ad9\uff0c\u4e0a\u4f20\u6587\u4ef6\u7684\u6587\u4ef6\u547d\u540d\u683c\u5f0f\u4e3a: \u5b66\u53f7_\u59d3\u540d_\u5b9e\u9a8c\u4e5d.pdf\uff0c\u6bd4\u5982\uff1a123456789_\u5f20\u4e09_\u5b9e\u9a8c\u4e5d.pdf</li> <li>\u5176\u4ed6\u63d0\u4ea4\u6587\u4ef6\uff08\u5982 \u8fd0\u884c\u6210\u529f\u7684Jupyter Notebook\u6587\u4ef6\uff09\uff0c\u8bf7\u52a0\u4e0a\u524d\u7f00: \u5b66\u53f7_\u59d3\u540d_lab9_\uff0c\u6bd4\u5982: 123456789_\u5f20\u4e09_lab9_GCN.ipynb</li> <li>\u672c\u6b21\u63d0\u4ea4\u7684\u622a\u6b62\u65f6\u95f4\u4e3a 5\u670815\u65e523:59:59</li> <li>\u5bf9\u4e8e\u8fdf\u4ea4\u7684\u5904\u7406: \u8fdf\u4ea4\u4e00\u5468\u4ee5\u5185\uff0c\u6298\u6263\u7cfb\u6570\u4e3a0.8\uff0c\u8fdf\u4ea4\u8d85\u8fc7\u4e00\u5468\uff0c\u6298\u6263\u7cfb\u6570\u4e3a0.6\uff0c\u8d85\u8fc7\u4e00\u4e2a\u6708\u505c\u6b62\u63a5\u6536\u63d0\u4ea4\uff0c\u5c1a\u672a\u63d0\u4ea4\u8005\u672c\u6b21\u4f5c\u4e1a\u8ba10\u5206</li> </ol>"}]}